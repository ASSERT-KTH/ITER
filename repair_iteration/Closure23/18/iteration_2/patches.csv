bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.isObject()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  right.isObjectLit())  {	  if(n.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
2	[BUG]  [BUGGY]  if(n.isObject()  ||  right.isPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  right.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  right.isPropAccess())  {	  if(n.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
3	[BUG]  [BUGGY]  if  (n.isObject())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject())  {	  if    (left.isObject())    {    	non-compiled	[CE]  orphaned  case	46	None	replace
4	[BUG]  [BUGGY]  if  (left.isObject()  ||  left.isObject())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObject()  ||  left.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  left.isObject())  {	  if    (left.isObject())    {    	non-compiled	[CE]  orphaned  case	46	None	replace
5	[BUG]  [BUGGY]  if  (left.isObject()  &&  right.isObject())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObject()  &&  right.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  &&  right.isObject())  {	  if    (left.isObject())    {    	non-compiled	[CE]  orphaned  case	46	None	replace
6	[BUG]  [BUGGY]  if  (!left.isObjectLit()  &&  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectLit()  &&  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  &&  n.isObjectPropAccess())  {	  if    (!left.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	57	None	replace
7	[BUG]  [BUGGY]  if  (!left.isObject()  &&  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  &&  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  &&  n.isObjectPropAccess())  {	  if    (!left.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	57	None	replace
8	[BUG]  [BUGGY]  if  (!left.isObjectLit()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectLit()  ||  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  ||  right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	57	None	replace
9	[BUG]  [BUGGY]  if  (!left.isObject()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  ||  n.isObjectPropAccess())  {	  if    (!left.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	57	None	replace
10	[BUG]  [BUGGY]  if  (!n.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!n.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!n.isObjectLit()  ||  n.isObjectPropAccess())  {	  if    (!left.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	57	None	replace
11	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  Preconditions.checkArgument(right.isGetElem());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  left.getFirstChild();  Preconditions.checkArgument(right.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  left.getFirstChild();  Preconditions.checkArgument(right.isGetElem());	  Node    right    =    n.getLastChild();    Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	42	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.isGetElem());	  Node    right    =    n.getLastChild();    Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	42	None	replace
13	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  Preconditions.checkArgument(right.isGetElem());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  left.getLastChild();  Preconditions.checkArgument(right.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  left.getLastChild();  Preconditions.checkArgument(right.isGetElem());	  Node    right    =    n.getLastChild();    Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	42	None	replace
14	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  Preconditions.checkArgument(left.isGetElem());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getFirstChild();  Preconditions.checkArgument(left.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getFirstChild();  Preconditions.checkArgument(left.isGetElem());	  Node    right    =    n.getLastChild();    Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	42	None	replace
15	[BUG]  [BUGGY]  if  (!n.isPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!n.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!n.isPropAccess())  {	  if    (!n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
16	[BUG]  [BUGGY]  if  (n.isObject()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObject()  ||  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject()  ||  left.isObjectPropAccess())  {	  if    (right.isObject()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
17	[BUG]  [BUGGY]  if  (right.isObject()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObject()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  &&  right.isObjectPropAccess())  {	  if    (right.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	52	None	replace
18	[BUG]  [BUGGY]  if(n.isObject()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  left.isObjectLit())  {	  if(left.isObject()    &&    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
19	[BUG]  [BUGGY]  if(left.isPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isPropAccess()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isPropAccess()  &&  left.isObjectLit())  {	  if(left.isObject()    &&    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
20	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&!left.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
21	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
22	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&  n.hasChildren())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
23	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  ||!left.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
24	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
25	[BUG]  [BUGGY]  if  (!right.isObject())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObject())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
26	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectReference())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&  n.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
27	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  left.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
28	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectReference())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
29	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  right.isObjectReference())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  right.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  right.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
30	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectReference())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  left.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
31	[BUG]  [BUGGY]  if(!n.isObjectProp())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectProp())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectProp())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
32	[BUG]  [BUGGY]  if(n.isObjectProp()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectProp()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp()  ||  n.isObjectLit())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
33	[BUG]  [BUGGY]  if(n.isObjectProp()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectProp()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp()  ||  left.isObjectLit())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
34	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectProp())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectProp())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectProp())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
35	[BUG]  [BUGGY]  if(n.isObjectProp()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectProp()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp()  ||!left.isObjectLit())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
36	[BUG]  [BUGGY]  if(left.isObjectProp())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectProp())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectProp())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  tryFoldObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  tryFoldObjectPropAccess(n,  left,  right);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  tryFoldObjectPropAccess(n,  left,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
43	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectPropAccess()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  &&  left.isObjectLit())  {	  if    (left.isObjectPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
44	[BUG]  [BUGGY]  if  (n.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectPropAccess()  ||  right.isObjectLit())  {	  if    (right.isObjectPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	21	None	replace
45	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
46	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
47	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
48	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
49	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
50	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
51	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  left.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
52	[BUG]  [BUGGY]  if(n.isObjectLit()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  &&  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  &&  left.isObjectPropAccess())  {	  if(n.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	33	None	replace
53	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  n.isObjectPropAccess())  {	  if(n.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	33	None	replace
54	[BUG]  [BUGGY]  if(n.isObject()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  left.isObjectPropAccess())  {	  if(left.isObject()    &&    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	40	None	replace
55	[BUG]  [BUGGY]  if(n.isObject()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  right.isObjectPropAccess())  {	  if(left.isObject()    &&    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	40	None	replace
56	[BUG]  [BUGGY]  if(!left.isObject()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!left.isObject()  &&  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!left.isObject()  &&  left.isObjectPropAccess())  {	  if(left.isObject()    &&    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	40	None	replace
57	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  if(left.isObject()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
59	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
60	[BUG]  [BUGGY]  if(n.isObject()  &&  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  n.isObjectPropAccess())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
61	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectPropAccess()  ||  left.isObjectLit())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
62	[BUG]  [BUGGY]  if(!n.isObject()  ||!n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObject()  ||!n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObject()  ||!n.isObjectPropAccess())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
63	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectType())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectType())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectType())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
64	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||!left.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
65	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  &&!left.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
66	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&!right.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
67	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  &&!n.isObjectLit())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  &&!n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  &&!n.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
68	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  &&!right.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
69	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  Preconditions.checkArgument(left.isGetElem());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getLastChild();  Preconditions.checkArgument(left.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getLastChild();  Preconditions.checkArgument(left.isGetElem());	  Node    right    =    n.getFirstChild();    Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	43	None	replace
70	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
71	[BUG]  [BUGGY]  if(left.isObject()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
72	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
73	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectType()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  left.isObjectType()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectType()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
74	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
75	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isEmpty())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isEmpty())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isEmpty())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
76	[BUG]  [BUGGY]  if  (n.isObjectPropAccess()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectPropAccess()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectPropAccess()  &&  right.isObjectLit())  {	  if    (left.isObjectPropAccess()    &&    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	45	None	replace
77	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  &&  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  &&  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  &&  n.isObjectLit())  {	  if(n.isObjectPropAccess()    &&    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
78	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&  left.isObjectLit())  {	  if(n.isObjectPropAccess()    &&    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
79	[BUG]  [BUGGY]  if(left.isObject()  &&  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  &&  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&  n.isObjectLit())  {	  if(n.isObjectPropAccess()    &&    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
80	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectPosition())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  &&  n.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&  n.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
81	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
82	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectPosition())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
83	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectPosition())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  left.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
84	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isPosition())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
85	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isArrayLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isArrayLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  left.isArrayLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
86	[BUG]  [BUGGY]  if  (left.isObject()  &&  right.isObjectLiteral())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObject()  &&  right.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  &&  right.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
87	[BUG]  [BUGGY]  if  (n.isObject()  ||  right.isObjectLiteral())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObject()  ||  right.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject()  ||  right.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
88	[BUG]  [BUGGY]  if  (left.isPropAccess()  ||  right.isObjectLiteral())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isPropAccess()  ||  right.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isPropAccess()  ||  right.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
89	[BUG]  [BUGGY]  if(n.isObjectLit()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  &&  right.isObjectPropAccess())  {	  if(n.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	35	None	replace
90	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  n.isObjectPropAccess())  {	  if(n.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	35	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.OBJECTLIT);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
97	[BUG]  [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  &&!right.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
98	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  ||!right.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
99	[BUG]  [BUGGY]  if  (!right.isObjectLit()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  ||!left.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
100	[BUG]  [BUGGY]  if  (!left.isObject()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  &&!right.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
101	[BUG]  [BUGGY]  if  (!left.isObject()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  ||!right.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
102	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  left.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
103	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  n.getLastChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
104	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  left.getLastChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
105	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  right.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
106	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  n.getNext();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
107	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  ||  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  left.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	32	None	replace
108	[BUG]  [BUGGY]  if(right.isObject()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObject()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  &&  right.isObjectLit())  {	  if(right.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	60	None	replace
109	[BUG]  [BUGGY]  if(right.isObject()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObject()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  &&  left.isObjectLit())  {	  if(left.isObject()    &&    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	15	None	replace
110	[BUG]  [BUGGY]  if(left.isPropAccess()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isPropAccess()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isPropAccess()  &&  right.isObjectLit())  {	  if(left.isObject()    &&    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	15	None	replace
111	[BUG]  [BUGGY]  if(!left.isObject()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!left.isObject()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!left.isObject()  &&  right.isObjectLit())  {	  if(left.isObject()    &&    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	15	None	replace
112	[BUG]  [BUGGY]  if  (!left.isObject())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject())  {	  if    (!left.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	20	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isObject());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.isObject());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isObject());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkState(n.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkState(n.isGetElem());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetObject());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.isGetObject());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isGetObject());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isObjectProp());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.isObjectProp());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isObjectProp());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
117	[BUG]  [BUGGY]  if  (n.isObject()  ||  right.isObject())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObject()  ||  right.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject()  ||  right.isObject())  {	  if    (left.isObject()    ||    right.isObject())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
118	[BUG]  [BUGGY]  if  (right.isObject()  ||  left.isObject())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObject()  ||  left.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  ||  left.isObject())  {	  if    (left.isObject()    ||    right.isObject())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
119	[BUG]  [BUGGY]  if  (n.isObject()  ||  left.isObject())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObject()  ||  left.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject()  ||  left.isObject())  {	  if    (left.isObject()    ||    right.isObject())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
120	[BUG]  [BUGGY]  if  (!right.isPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isPropAccess())  {	  if    (!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	59	None	replace
121	[BUG]  [BUGGY]  if  (!right.isObject()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObject()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObject()  ||  n.isObjectPropAccess())  {	  if    (!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	59	None	replace
122	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
123	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
124	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
125	[BUG]  [BUGGY]  Node  right  =  n.getLeftChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getLeftChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getLeftChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
126	[BUG]  [BUGGY]  Node  right  =  n.getLowerCase();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getLowerCase();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getLowerCase();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
127	[BUG]  [BUGGY]  if(left.isObject()  &&  right.isPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  &&  right.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&  right.isPropAccess())  {	  if(left.isObject()    ||    right.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
128	[BUG]  [BUGGY]  if(n.isObject()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  left.isPropAccess())  {	  if(left.isObject()    ||    right.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
129	[BUG]  [BUGGY]  if(right.isObject()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObject()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  ||  left.isPropAccess())  {	  if(left.isObject()    ||    right.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
130	[BUG]  [BUGGY]  if  (n.isObjectLit()  &&  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectLit()  &&  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectLit()  &&  n.isObjectPropAccess())  {	  if    (n.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
131	[BUG]  [BUGGY]  if  (n.isObjectObject()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectObject()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectObject()  ||  n.isObjectPropAccess())  {	  if    (n.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
132	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&!right.isObjectLit())  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
133	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
134	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&  n.hasChildren())  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
135	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
136	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.NAME)  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
137	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.GETPROP)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.GETPROP)  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&  n.getType()  ==  Token.GETPROP)  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
138	[BUG]  [BUGGY]  if(right.isObjectLit()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  &&  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  &&  left.isObjectPropAccess())  {	  if(left.isObjectLit()    &&    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	39	None	replace
139	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&!left.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
140	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  ||!left.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
141	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&!left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&!left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&!left.isObjectPropAccess())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
142	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&!right.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
143	[BUG]  [BUGGY]  if  (!left.isObjectLit()  ||!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectLit()  ||!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  ||!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
144	[BUG]  [BUGGY]  if  (!right.isObjectLit()  &&!left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  &&!left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  &&!left.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
145	[BUG]  [BUGGY]  if  (!left.isObject()  ||!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  ||!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  ||!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
146	[BUG]  [BUGGY]  if  (!left.isObject()  &&!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  &&!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  &&!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
147	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isPropAccess())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
148	[BUG]  [BUGGY]  if(left.isObject()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  left.isPropAccess())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
149	[BUG]  [BUGGY]  if(n.isPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isPropAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isPropAccess()  ||  left.isObjectLit())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
150	[BUG]  [BUGGY]  if(left.isPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isPropAccess()  ||  right.isObjectLit())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
151	[BUG]  [BUGGY]  if  (right.isObject()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObject()  &&  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  &&  left.isObjectPropAccess())  {	  if    (left.isObject()    &&    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
152	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
153	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
154	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectPropAccess()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  &&  right.isObjectPropAccess())  {	  if    (left.isObjectPropAccess()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	47	None	replace
155	[BUG]  [BUGGY]  if  (n.isObjectPropAccess()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectPropAccess()  ||  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectPropAccess()  ||  right.isObjectPropAccess())  {	  if    (left.isObjectPropAccess()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	47	None	replace
156	[BUG]  [BUGGY]  if  (n.isObjectPropAccess()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectPropAccess()  ||  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectPropAccess()  ||  left.isObjectPropAccess())  {	  if    (left.isObjectPropAccess()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	47	None	replace
157	[BUG]  [BUGGY]  if  (right.isObjectPropAccess()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObjectPropAccess()  ||  left.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess()  ||  left.isObjectPropAccess())  {	  if    (left.isObjectPropAccess()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	47	None	replace
158	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
159	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
160	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
161	[BUG]  [BUGGY]  if(n.isObjectProp()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectProp()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp()  &&!left.isObjectLit())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
162	[BUG]  [BUGGY]  if  (left.isObjectLit()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectLit()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectLit()  ||  right.isObjectLit())  {	  if    (left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	44	None	replace
163	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectImpl())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectImpl())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectImpl())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
164	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectObject())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectObject())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
165	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectInput())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectInput())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectInput())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
166	[BUG]  [BUGGY]  if  (right.isObjectPropAccess()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObjectPropAccess()  &&  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess()  &&  right.isObjectLit())  {	  if    (right.isObjectPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	21	None	replace
167	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
171	[BUG]  [BUGGY]  if(left.isObjectAccess()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectAccess()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectAccess()  ||  left.isPropAccess())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
172	[BUG]  [BUGGY]  if(left.isObjectAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectAccess()  ||  left.isObjectLit())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
173	[BUG]  [BUGGY]  if(right.isObjectLit()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  &&  right.isObjectPropAccess())  {	  if(right.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
174	[BUG]  [BUGGY]  if(!n.isObject()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObject()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObject()  &&!left.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
175	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  ||  left.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
176	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  right.isObjectInput())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  right.isObjectInput())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  right.isObjectInput())  {	  if(left.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	32	None	replace
177	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&  left.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
178	[BUG]  [BUGGY]  if  (!right.isObject()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObject()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObject()  &&!left.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
179	[BUG]  [BUGGY]  if  (left.isObjectLit()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectLit()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectLit()  ||!right.isObjectLit())  {	  if    (!left.isObjectLit()    ||!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	58	None	replace
180	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  &&!right.isEmpty())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  &&!right.isEmpty())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  &&!right.isEmpty())  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
181	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isObject());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.isObject());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.isObject());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetElem());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(right.isGetElem());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(right.isGetElem());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.isArrayLit());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGet());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(left.isGet());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(left.isGet());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
186	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
187	[BUG]  [BUGGY]  if  (right.isObject()  ||  right.isObjectLiteral())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObject()  ||  right.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  ||  right.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
188	[BUG]  [BUGGY]  if(left!=  null  ||  left.isObject()  ||  right.isPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left!=  null  ||  left.isObject()  ||  right.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left!=  null  ||  left.isObject()  ||  right.isPropAccess())  {	  if(left.isObject()    ||    right.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
189	[BUG]  [BUGGY]  if(right.isObject()  ||  right.isObject())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObject()  ||  right.isObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  ||  right.isObject())  {	  if(left.isObject()    ||    right.isPropAccess())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
190	[BUG]  [BUGGY]  if  (!right.isObjectLit()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  &&!left.isObjectLit())  {	  if    (!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	59	None	replace
191	[BUG]  [BUGGY]  if(right.isObject()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObject()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  ||  n.isObjectLit())  {	  if(n.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
192	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  ||  right.isObjectReference())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  ||  right.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  ||  right.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
193	[BUG]  [BUGGY]  if(n.isObject()  &&  n.isObjectReference())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  n.isObjectReference())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  n.isObjectReference())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
194	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  right.isObjectPropAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
195	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  left.isObjectAccess()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
196	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectInput()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  left.isObjectInput()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectInput()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	56	None	replace
197	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  left.getNext();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
198	[BUG]  [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectLit()  ||  n.isObjectObjectPropAccess())  {	  if    (n.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
199	[BUG]  [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectObject())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectLit()  ||  n.isObjectObject())  {	  if    (n.isObjectLit()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
200	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  ||!left.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
201	[BUG]  [BUGGY]  if(left.isObject()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObject()  &&!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&!left.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
202	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
204	[BUG]  [BUGGY]  if  (left.isObjectLit()  ||!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectLit()  ||!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectLit()  ||!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
205	[BUG]  [BUGGY]  if  (left.isObjectLit()  &&!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObjectLit()  &&!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectLit()  &&!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
206	[BUG]  [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  &&!right.isObjectAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
207	[BUG]  [BUGGY]  if(left.isObjectPropAccess()  ||  right.isObjectPosition())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectPropAccess()  ||  right.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectPropAccess()  ||  right.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
208	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  &&  n.isObjectPosition())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  &&  n.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  &&  n.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
209	[BUG]  [BUGGY]  if(n.isObject()  &&  n.isObjectPosition())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  &&  n.isObjectPosition())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  &&  n.isObjectPosition())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	30	None	replace
212	[BUG]  [BUGGY]  Node  left  =  n.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  n.cloneTree();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.cloneTree();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
213	[BUG]  [BUGGY]  Node  left  =  n.firstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  n.firstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.firstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
214	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  right.isObjectPropAccess()  ||  left.isObjectLit())  {	  if(right.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
215	[BUG]  [BUGGY]  if  (left.isObject()  ||  left.isObjectLiteral())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (left.isObject()  ||  left.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  left.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
216	[BUG]  [BUGGY]  if  (right.isObject()  ||  left.isObjectLiteral())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (right.isObject()  ||  left.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  ||  left.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectLiteral())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
217	[BUG]  [BUGGY]  if(!n.isObjectPropAccess()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObjectPropAccess()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess()  ||!right.isObjectLit())  {	  if(!n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
218	[BUG]  [BUGGY]  if  (!n.isObjectLit()  ||!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!n.isObjectLit()  ||!left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!n.isObjectLit()  ||!left.isObjectLit())  {	  if    (!n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	31	None	replace
220	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  right.isObjectObject())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  ||  right.isObjectObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  right.isObjectObject())  {	  if(n.isObjectLit()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	35	None	replace
221	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
222	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectReference()  ||  n.hasChildren())  {	  if(n.isObjectPropAccess()    ||    n.isObjectReference())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
223	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
224	[BUG]  [BUGGY]  if(n.isObjectProp()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectProp()  ||  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp()  ||  n.hasChildren())  {	  if(n.isObjectProp())    {    	non-compiled	[CE]  orphaned  case	54	None	replace
225	[BUG]  [BUGGY]  Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
226	[BUG]  [BUGGY]  Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isEmpty());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.isEmpty());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isEmpty());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isReference());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Preconditions.checkArgument(n.isReference());  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isReference());	  Preconditions.checkArgument(n.isGetElem());    	non-compiled	[CE]  orphaned  case	29	None	replace
229	[BUG]  [BUGGY]  if  (!right.isObjectLit()  &&!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  &&!right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  &&!right.isObjectPropAccess())  {	  if    (!left.isObjectLit()    &&!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
230	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	49	None	replace
231	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObjectPropAccess()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess()  ||  n.isObjectLit())  {	  if    (!left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
232	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
233	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isEmpty())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isEmpty())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isEmpty())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
234	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.hasChildren())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
235	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isVarArgs())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isVarArgs())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition()  ||  n.isVarArgs())  {	  if(n.isObjectPropAccess()    ||    n.isObjectPosition())    {    	non-compiled	[CE]  orphaned  case	50	None	replace
236	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  left.isPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  ||  left.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  left.isPropAccess())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
237	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  right.isPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(left.isObjectLit()  ||  right.isPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  right.isPropAccess())  {	  if(left.isPropAccess()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	24	None	replace
238	[BUG]  [BUGGY]  if  (!right.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  ||  n.isObjectPropAccess())  {	  if    (!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	59	None	replace
239	[BUG]  [BUGGY]  if  (!right.isObjectLit()  &&  n.hasChildren())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectLit()  &&  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit()  &&  n.hasChildren())  {	  if    (!right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	59	None	replace
240	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getFirstChild().getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
241	[BUG]  [BUGGY]  if  (!left.isObject()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!left.isObject()  &&  right.isObjectPropAccess())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObject()  &&  right.isObjectPropAccess())  {	  if    (left.isObject()    &&    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
242	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(right.isObjectLit()  ||  left.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  left.isObjectLit())  {	  if    (right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	37	None	replace
243	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectPropAccess()  ||  n.isObjectLit())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
244	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectLiteral())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObject()  ||  n.isObjectLiteral())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectLiteral())  {	  if(n.isObject()    ||    n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	13	None	replace
245	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  left.isObjectObject())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectLit()  ||  left.isObjectObject())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  left.isObjectObject())  {	  if(n.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	33	None	replace
246	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||!right.isObjectLit())  {	  if(n.isObjectPropAccess()    &&!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
247	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.hasChildren())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.hasChildren())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.hasChildren())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
248	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.isEmpty())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.isEmpty())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectLit()  ||  n.isEmpty())  {	  if(n.isObjectPropAccess()    ||    n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	11	None	replace
249	[BUG]  [BUGGY]  if(!n.isObject()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if(!n.isObject()  ||  right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObject()  ||  right.isObjectLit())  {	  if(n.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	14	None	replace
250	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  ||!right.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  ||!right.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
251	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  ||  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  ||  n.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
252	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.isObjectLit())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());      [BUGGY]  if  (!right.isObjectPropAccess()  &&  n.isObjectLit())  {  [BUGGY]      return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess()  &&  n.isObjectLit())  {	  if    (!right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	19	None	replace
