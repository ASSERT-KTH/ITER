bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if(n.isObjectPropAccess())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
2	[BUG]  [BUGGY]  if  (left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if  (left.isObjectPropAccess())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
3	[BUG]  [BUGGY]  if  (n.isObjectLit())  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if  (n.isObjectLit())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectLit())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
4	[BUG]  [BUGGY]  if  (!left.isObjectLit())  {  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if  (!left.isObjectLit())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
5	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]    [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	  	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
6	[BUG]  [BUGGY]  if  (left.isObject()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if  (left.isObject()  ||  right.isObjectPropAccess())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  right.isObjectPropAccess())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
7	[BUG]  [BUGGY]  if  (right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if  (right.isObjectPropAccess())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
8	[BUG]  [BUGGY]  if(left.isObject()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if(left.isObject()  ||  left.isObjectLit())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  left.isObjectLit())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
9	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectPropAccess())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
10	[BUG]  [BUGGY]  if(left.isObject()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  [BUGGY]  if(left.isObject()  ||  right.isObjectLit())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  right.isObjectLit())  {	if  (left.isObjectLit())  {  	non-compiled	[CE]  orphaned  case	35	None	replace
