bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldComparison(null,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(null,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(null,  left,  right);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  return  tryFoldComparison(left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(left,  right);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
4	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
5	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
6	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
7	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
8	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
9	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  default	8	None	replace
10	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  tryFoldComparison(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
11	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
12	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  default  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  default	8	None	replace
13	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
14	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
15	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
16	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
17	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
18	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
19	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(left,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(left,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(left,  subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
20	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  right);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
21	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldOperator(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrae,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
25	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
26	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
27	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
28	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.type);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
29	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
30	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
31	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
32	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
33	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
34	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
35	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
36	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
37	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
38	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.type);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
39	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
40	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree);	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
41	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
42	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
44	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
45	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  default);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
47	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
48	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
49	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree);	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
50	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
51	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
52	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
53	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
54	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  result);	  return    tryFoldDeclaration(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
55	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(null,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(null,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(null,  subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
56	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
57	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
58	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
59	[BUG]  [BUGGY]  return  tryFoldComparison(left,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(left,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(left,  subtree);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  return  tryFoldComparison(second,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(second,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(second,  subtree);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
61	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
62	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  result);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
63	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
64	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
65	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
66	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
67	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  result);	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
68	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
69	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
70	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  result);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
71	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  subtree);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
72	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
73	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  result);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
74	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
75	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  result);	  return    tryFoldBinaryOperand(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
76	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
77	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  result);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
78	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
79	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
80	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(right,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(right,  left);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(right,  left);	  return    tryFoldBinaryOperator(subtree,    left);    	non-compiled	[CE]  orphaned  case	6	None	replace
81	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
82	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldAssignmentOperator(subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	3	None	replace
83	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperand(subtree);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree);	  return    tryFoldComparison(subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
84	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
85	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
86	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right);	      	non-compiled	[CE]  orphaned  case	8	None	replace
87	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:    [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]    }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldUnknownComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
