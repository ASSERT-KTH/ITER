bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result.type);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  result.type);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
2	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
3	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.value);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
4	[BUG]  [BUGGY]  return  tryFoldOperand(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperand(subtree,  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperand(subtree,  left,  right,  subtree.type);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
5	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type)+  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type)+  1;	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
6	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	49	None	replace
7	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree  +  1);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	49	None	replace
8	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
9	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
10	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  0);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
11	[BUG]  [BUGGY]  return  tryFoldOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperand(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
12	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
13	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  right,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  right,  right);	  return    tryFoldBinaryOperator(right,    subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
15	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  right);	  return    tryFoldBinaryOperator(right,    subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
16	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrae,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtrae,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrae,  right);	  return    tryFoldBinaryOperator(right,    subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
17	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.clone());	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
18	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
19	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
20	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
21	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
22	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneComparison());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.cloneComparison());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.cloneComparison());	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
23	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
24	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldConstant(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
25	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  default);	  return    tryFoldConstant(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
26	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
27	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  subtree.type);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
28	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
29	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
30	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
31	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  reverse);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
32	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
33	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
34	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
35	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
36	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	57	None	replace
37	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
38	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
39	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NON_NUMBER_ERROR);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
40	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
41	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
42	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  subtree);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
43	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
44	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
45	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  default);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
46	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtreeType);    	non-compiled	[CE]  orphaned  case	64	None	replace
47	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtreeType);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtreeType);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtreeType);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtreeType);    	non-compiled	[CE]  orphaned  case	64	None	replace
48	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtreeType,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtreeType);    	non-compiled	[CE]  orphaned  case	64	None	replace
49	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtreeType);    	non-compiled	[CE]  orphaned  case	64	None	replace
50	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
51	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
52	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
53	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
54	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  	37	None	replace
55	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
56	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldUnknownComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	66	None	replace
57	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldUnknownComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	66	None	replace
58	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldUnknownComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	66	None	replace
59	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldUnknownComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	66	None	replace
60	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	58	None	replace
61	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	58	None	replace
62	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	58	None	replace
63	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	62	None	replace
64	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.result);	  return    tryFoldConstant(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	62	None	replace
65	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
66	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
67	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
68	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result.type);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result.type);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
69	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
70	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type  -  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
71	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
72	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.value);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
73	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
74	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
75	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
76	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
77	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
78	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	25	None	replace
79	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldUnknownComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	87	None	replace
80	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldUnknownComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	87	None	replace
81	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  1);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	14	None	replace
82	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  2);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  2);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	14	None	replace
83	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	14	None	replace
84	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  3);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  3);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  3);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	14	None	replace
85	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  4);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  4);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  4);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	14	None	replace
86	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
87	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
88	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
89	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  result.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
90	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
91	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  node.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
92	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
93	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
94	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
95	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
96	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.removeFirstChild());  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.removeFirstChild());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.removeFirstChild());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
97	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtrae,    left,    right);    	non-compiled	[CE]  orphaned  case	23	None	replace
98	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
99	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
100	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  right,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  right,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
101	[BUG]  [BUGGY]  return  tryFoldUnknownOperator(subtree,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownOperator(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownOperator(subtree,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
102	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
103	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  default);	  return    tryFoldConstants(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
104	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
105	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
106	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  DEFAULT_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
107	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NON_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
108	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
109	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
110	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
111	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  |  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  |  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER  |  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
112	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	29	None	replace
113	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
114	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	77	None	replace
115	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.result);	  return    tryFoldConstants(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	77	None	replace
116	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.clone());	  return    tryFoldConstants(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	77	None	replace
117	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
118	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
119	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
120	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
121	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
122	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left);	  return    tryFoldBinaryOperand(subtree);    	non-compiled	[CE]  orphaned  case	83	None	replace
123	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
124	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
125	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
126	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmpty());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmpty());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmpty());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
127	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  	27	None	replace
128	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
129	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
130	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
131	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
132	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
133	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    subtree);    	non-compiled	[CE]  orphaned  case	71	None	replace
134	[BUG]  [BUGGY]  return  tryFoldUnknownOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownOperator(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownOperator(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left,    subtree);    	non-compiled	[CE]  orphaned  case	71	None	replace
135	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldLocalOperator(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left,    subtree);    	non-compiled	[CE]  orphaned  case	71	None	replace
136	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
137	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
138	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  result.restrictByNotNullOrUndefined());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
139	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.getRestrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.getRestrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.getRestrictByNotNullOrUndefined());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
140	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
141	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  max_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
142	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
143	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	24	None	replace
144	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  0);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
145	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
146	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type  -  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
147	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result.type);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  result.type);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
148	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.value);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
149	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  reverse);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
150	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  reverse);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.cloneTree(),  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
151	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  right,  left,  reverse);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  right,  left,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  right,  left,  reverse);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
152	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  false);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
153	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	72	None	replace
154	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	72	None	replace
155	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	72	None	replace
156	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
157	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
158	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
159	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
160	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.value);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
161	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.cloneTree(),  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
162	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  default);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  default);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
163	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  reverse);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  reverse);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
164	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	56	None	replace
165	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	56	None	replace
166	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	56	None	replace
167	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree(),  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree(),  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree(),  right);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
168	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
169	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
170	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtreeType);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtreeType);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  subtreeType);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
171	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  false);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
172	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  reverse);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  right,  reverse);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
173	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	30	None	replace
174	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	48	None	replace
175	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	48	None	replace
176	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	48	None	replace
177	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  0);	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	48	None	replace
178	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	48	None	replace
179	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
180	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
181	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result.type);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  result.type);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
182	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  default);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type,  default);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
183	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.value);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
184	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  orphaned  case	45	None	replace
185	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  null);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  orphaned  case	45	None	replace
186	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  default  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
187	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  default);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
188	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  null);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  null);	  return    tryFoldBinaryOperator(null,    subtree);    	non-compiled	[CE]  orphaned  case	55	None	replace
189	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(null,  left,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(null,  left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(null,  left,  subtree);	  return    tryFoldBinaryOperator(null,    subtree);    	non-compiled	[CE]  orphaned  case	55	None	replace
190	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree);	  return    tryFoldBinaryOperator(null,    subtree);    	non-compiled	[CE]  orphaned  case	55	None	replace
191	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
192	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
193	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
194	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
195	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneComparison());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneComparison());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneComparison());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
196	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
197	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
198	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
199	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneComparison());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneComparison());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneComparison());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
200	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  second);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  second);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  second);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
201	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  second);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  second);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  second);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
202	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(second,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(second,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(second,  left);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
203	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(second,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(second,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(second,  subtree);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
204	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(second,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(second,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(second,  right);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
205	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.getParent(),  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.getParent(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.getParent(),  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
206	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(null,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(null,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(null,  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
207	[BUG]  [BUGGY]  return  tryFoldComparison(subtrae,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtrae,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtrae,  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
208	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	54	None	replace
209	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.result);	  return    tryFoldDeclaration(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	54	None	replace
210	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
211	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  subtree.cloneTree());	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
212	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
213	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  subtree.type);	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
214	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  subtree);	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
215	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
216	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
217	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
218	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
219	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
220	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
221	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
222	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
223	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  max_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  max_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  max_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
224	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	34	None	replace
225	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left);	  return    tryFoldAssignmentOperator(subtree);    	non-compiled	[CE]  orphaned  case	82	None	replace
226	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left,  right);	  return    tryFoldAssignmentOperator(subtree);    	non-compiled	[CE]  orphaned  case	82	None	replace
227	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(left,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(left,  subtree);	  return    tryFoldAssignmentOperator(subtree);    	non-compiled	[CE]  orphaned  case	82	None	replace
228	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(right,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(right,  subtree);	  return    tryFoldAssignmentOperator(subtree);    	non-compiled	[CE]  orphaned  case	82	None	replace
229	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    result);    	non-compiled	[CE]  orphaned  case	65	None	replace
230	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  result);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    result);    	non-compiled	[CE]  orphaned  case	65	None	replace
231	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    result);    	non-compiled	[CE]  orphaned  case	65	None	replace
232	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  result);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  right,  result);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
233	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldLocalOperator(subtree,  left,  result);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
234	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  wrong);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  wrong);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  wrong);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
235	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
236	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  default  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
237	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  default  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
238	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  default  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
239	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  BITWISE_OPERAND);	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
240	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
241	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.cloneTree(),  default);	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
242	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneBinaryOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.cloneBinaryOperator());	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
243	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneComparison());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.cloneComparison());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.cloneComparison());	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
244	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clonePosition());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.clonePosition());	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
245	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
246	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getLastChild(),  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getLastChild(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getLastChild(),  left,  right);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
247	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.getFirstChild(),  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.getFirstChild(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.getFirstChild(),  left,  right);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
248	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getType(),  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getType(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getType(),  left,  right);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
249	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
250	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
251	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.type);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree.type);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
252	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
253	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  0);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
254	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
255	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER;	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	43	None	replace
256	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
257	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
258	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  default);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  default);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
259	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
260	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  second);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  second);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  second);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
261	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  false);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
262	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrae,  left);	  return    tryFoldBinaryOperator(left,    subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
263	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  default);	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
264	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
265	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
266	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  false);	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
267	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
268	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  	32	None	replace
269	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
270	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
271	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  default);	  return    tryFoldBinaryOperator(subtree,    subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
272	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	6	None	replace
273	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  default);	  return    tryFoldBinaryOperand(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
274	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
275	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  subtree);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right,  subtree);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
276	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  default  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined());	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
277	[BUG]  [BUGGY]  default:  return  tryFoldConstantsComparison(subtree,  left,  right);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldConstantsComparison(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldConstantsComparison(subtree,  left,  right);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
278	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right  +  1);  [CE]  orphaned  default  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right  +  1);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
279	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  right,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  right,  left);	  return    tryFoldBinaryOperator(subtree,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
280	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(left,  right);	  return    tryFoldBinaryOperator(subtree,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
281	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  INVALID_GETELEM_INDEX_ERROR);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
282	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
283	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
284	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
285	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	73	None	replace
286	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	28	None	replace
287	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.type);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  result.type);	  return    tryFoldComparison(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	28	None	replace
288	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.value);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.value);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.value);	  return    tryFoldComparison(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	28	None	replace
289	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left);	  return    tryFoldComparison(left,    subtree);    	non-compiled	[CE]  orphaned  case	59	None	replace
290	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  result,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	75	None	replace
291	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldDeclaration(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
292	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
293	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.result);	  return    tryFoldUnknownComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	67	None	replace
294	[BUG]  [BUGGY]  tryFoldConstants(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldConstants(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldConstants(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);	  tryFoldBinaryOperator(subtree,    left,    right);    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	85	None	replace
295	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	39	None	replace
296	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  max_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  max_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	39	None	replace
297	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  0);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	39	None	replace
298	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  double  MAX_FOLD_NUMBER);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  double  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  double  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  	39	None	replace
299	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  reverse);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree,    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	46	None	replace
300	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  reverse);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  reverse);	  return    tryFoldBinaryOperator(subtree,    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	46	None	replace
301	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.reverse);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.reverse);	  return    tryFoldBinaryOperator(subtree,    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	46	None	replace
302	[BUG]  [BUGGY]  return  tryFoldComparison(right,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(right,  subtree);	  return    tryFoldComparison(subtree,    left);    	non-compiled	[CE]  orphaned  case	2	None	replace
303	[BUG]  [BUGGY]  return  tryFoldComparison(null,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(null,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(null,  left);	  return    tryFoldComparison(subtree,    left);    	non-compiled	[CE]  orphaned  case	2	None	replace
304	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.result);	  return    tryFoldBinaryOperator(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	57	None	replace
305	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  right);	  return    tryFoldComparison(left,    subtree);    	non-compiled	[CE]  orphaned  case	59	None	replace
306	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneNode());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneNode());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneNode());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
307	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneApply());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneApply());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneApply());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
308	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneNode());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneNode());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.cloneNode());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
309	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_OPERAND);	  return    tryFoldConstants(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	78	None	replace
310	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  subtree);	  return    tryFoldBinaryOperator(left,    subtree);    	non-compiled	[CE]  orphaned  case	19	None	replace
311	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	28	None	replace
312	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	28	None	replace
313	[BUG]  [BUGGY]  tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldComparison(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
314	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	52	None	replace
315	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
316	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	33	None	replace
317	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left  +  1);	  return    tryFoldBinaryOperator(subtree,    right);    	non-compiled	[CE]  orphaned  case	20	None	replace
318	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  0);	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
319	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldConstant(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	34	None	replace
320	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    subtree);    	non-compiled	[CE]  orphaned  case	71	None	replace
321	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right  +  1);	  return    tryFoldBinaryOperator(subtree,    subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
322	[BUG]  [BUGGY]  return  tryFoldComparison(second,  left,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(second,  left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(second,  left,  subtree);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
323	[BUG]  [BUGGY]  return  tryFoldComparison(second,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(second,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(second,  left,  right);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
324	[BUG]  [BUGGY]  return  tryFoldComparison(second,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(second,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(second,  left);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
325	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.getFirstChild(),  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.getFirstChild(),  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.getFirstChild(),  right);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
326	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getFirstChild(),  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
327	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.getNext(),  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.getNext(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.getNext(),  left,  right);	  return    tryFoldBinaryOperator(subtree.getFirstChild(),    left,    right);    	non-compiled	[CE]  orphaned  case	86	None	replace
328	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree  +  1);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
329	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  cloneTree(),  left,  right,  subtree);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  cloneTree(),  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  cloneTree(),  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	18	None	replace
330	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  null);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  null);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    result);    	non-compiled	[CE]  orphaned  case	65	None	replace
331	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  bottom);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  bottom);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  bottom);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
332	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree  +  1);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
333	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  0);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  0);	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
334	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldConstants(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	29	None	replace
335	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
336	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  1);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
337	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	39	None	replace
338	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  1);	  return    tryFoldUnknownComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	39	None	replace
339	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneComparison());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneComparison());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.cloneComparison());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
340	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  result);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right,  result);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
341	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  right,  left);  [CE]  orphaned  default  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  right,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  right,  left);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
342	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.default);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.default);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
343	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
344	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree.next);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  subtree.next);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  subtree.next);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
345	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.result);	  return    tryFoldBinaryOperand(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	75	None	replace
346	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  false);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  false);	  return    tryFoldBinaryOperator(null,    subtree);    	non-compiled	[CE]  orphaned  case	55	None	replace
347	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_OPERAND);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  MAX_FOLD_OPERAND);	  return    tryFoldComparison(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	79	None	replace
348	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  right);	  return    tryFoldAssignmentOperator(subtree);    	non-compiled	[CE]  orphaned  case	82	None	replace
349	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.cloneTree(),  subtree);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
350	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.clonePosition(),  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.clonePosition(),  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.clonePosition(),  right);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
351	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
352	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this.type);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this.type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  this.type);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
353	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrae,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtrae,    left,    right);    	non-compiled	[CE]  orphaned  case	23	None	replace
354	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneNode());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
355	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.cloneOperator());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
356	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	6	None	replace
357	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
358	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  result);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
359	[BUG]  [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	case  Token.BLOCK:  return  tryFoldBinaryOperator(subtree,  left,  right,  this);	  case    Token.BLOCK:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	84	None	replace
360	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  result.restrictByNotNullOrUndefined());	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
361	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  node.restrictByNotNullOrUndefined());	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
362	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  result);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  result);	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
363	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
364	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right,  subtree);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  right,  subtree);	  return    tryFoldBinaryOperator(right,    subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
365	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  INDEX_OUT_OF_RANGE);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
366	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
367	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  MAX_FOLD_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
368	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree  +  1);	  return    tryFoldComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	25	None	replace
369	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
370	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldOperator(subtree,  left,  right,  result);	  return    tryFoldOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	22	None	replace
371	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
372	[BUG]  [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  default:    return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	12	None	replace
373	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrat,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtrat,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrat,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
374	[BUG]  [BUGGY]  return  tryFoldUniqueOperator(subtree,  left);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUniqueOperator(subtree,  left);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUniqueOperator(subtree,  left);	  return    tryFoldBinaryOperator(right,    left);    	non-compiled	[CE]  orphaned  case	80	None	replace
375	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree  +  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
376	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.result);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.result);	  return    tryFoldComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	73	None	replace
377	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  result.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  result.restrictByNotNullOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
378	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
379	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  node.restrictByNotNullOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
380	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined()  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined()  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined()  +  1);	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
381	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
382	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  right,  left,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  right,  left,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  right,  left,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
383	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
384	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  FACTIONAL_BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
385	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  FIREAL_BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	63	None	replace
386	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldDeclaration(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	48	None	replace
387	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree  +  1);	  return    tryFoldConstant(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
388	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotNullOrUndefined(),  this);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
389	[BUG]  [BUGGY]  return  tryFoldComparison(subtrat,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtrat,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtrat,  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
390	[BUG]  [BUGGY]  return  tryFoldComparison(null,  subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(null,  subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(null,  subtree,  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
391	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  result,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
392	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  result,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  result,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
393	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  result);  return  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  result);  return  tryFoldComparison(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  result);  return  tryFoldComparison(subtree,  left,  right);	  tryFoldBinaryOperator(subtree,    left,    right);    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	85	None	replace
394	[BUG]  [BUGGY]  tryFoldOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldOperator(subtree,  left,  right);  return  tryFoldComparison(subtree,  left,  right);	  tryFoldBinaryOperator(subtree,    left,    right);    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	85	None	replace
395	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
396	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  result);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
397	[BUG]  [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	tryFoldBinaryOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
398	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
399	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	38	None	replace
400	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  bottom);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  bottom);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  bottom);	  return    tryFoldComparison(subtree,    left);    	non-compiled	[CE]  orphaned  case	2	None	replace
401	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
402	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
403	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND_OUT_OF_RANGE);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
404	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  node.restrictByNotNullOrUndefined());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
405	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
406	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  reverse,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  reverse,  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  reverse,  left,  right);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
407	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  result);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left,  result);	  return    tryFoldBinaryOperator(subtree,    left,    result);    	non-compiled	[CE]  orphaned  case	70	None	replace
408	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  reverse,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	16	None	replace
409	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
410	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	61	None	replace
411	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  result);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  result);	  return    tryFoldBinaryOperator(null,    subtree);    	non-compiled	[CE]  orphaned  case	55	None	replace
412	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
413	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	53	None	replace
414	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
415	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  2);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  2);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
416	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  1);	  return    tryFoldBinaryOperand(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	4	None	replace
417	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  2);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  2);	  return    tryFoldComparison(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	24	None	replace
418	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldConstant(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
419	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  end);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  end);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  subtree.cloneTree(),  left,  right,  end);	  return    tryFoldBinaryOperator(subtree,    subtree.cloneTree(),    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
420	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.clone(),  right,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left.clone(),  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left.clone(),  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left.cloneTree(),    right);    	non-compiled	[CE]  orphaned  case	17	None	replace
421	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  false,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  false,  subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  false,  subtree.cloneTree());	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
422	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	8	None	replace
423	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldConstants(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	30	None	replace
424	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  subtree);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    subtree);    	non-compiled	[CE]  orphaned  case	71	None	replace
425	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
426	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result.cloneTree());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  result.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  result.cloneTree());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	42	None	replace
427	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  default);	  return    tryFoldDeclaration(subtree,    left,    right,    result);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
428	[BUG]  [BUGGY]  return  tryFoldComparison(subtree.getNext(),  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree.getNext(),  left,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree.getNext(),  left,  right);	  return    tryFoldComparison(null,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
429	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
430	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	5	None	replace
431	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  last);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  last);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  last);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
432	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  seconds);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  seconds);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  seconds);	  return    tryFoldComparison(second,    subtree);    	non-compiled	[CE]  orphaned  case	60	None	replace
433	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	7	None	replace
434	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	47	None	replace
435	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  default);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.type,  default);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.type);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
436	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  MISSING_BITWISE_OPERAND);	  return    tryFoldBinaryOperand(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	6	None	replace
437	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(subtree,  left,  right,  inDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperand(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	74	None	replace
438	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
439	[BUG]  [BUGGY]  return  tryFoldShortBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldShortBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldShortBinaryOperator(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
440	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldLocalOperator(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
441	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	69	None	replace
442	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
443	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  	51	None	replace
444	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
445	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  this.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  this.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  this.restrictByNotNullOrUndefined());	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	51	None	replace
446	[BUG]  [BUGGY]  return  tryFoldUnknownOperator(subtree,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownOperator(subtree,  right);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownOperator(subtree,  right);	  return    tryFoldBinaryOperator(right,    subtree);    	non-compiled	[CE]  orphaned  case	21	None	replace
447	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
448	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  reverse);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  reverse);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree(),  reverse);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	81	None	replace
449	[BUG]  [BUGGY]  return  tryFoldConstants(result,  left,  right,  subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(result,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(result,  left,  right,  subtree);	  return    tryFoldConstants(subtree,    left,    right,    result);    	non-compiled	[CE]  orphaned  case	77	None	replace
450	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	49	None	replace
451	[BUG]  [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  default  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  default:  return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	default:  return  tryFoldComparison(subtree,  left,  right,  BITWISE_OPERAND);	  default:    return    tryFoldComparison(subtree,    left,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
452	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  token.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  token.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  token.restrictByNotNullOrUndefined());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
453	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
454	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrE	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  	41	None	replace
455	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	41	None	replace
456	[BUG]  [BUGGY]  return  tryFoldRawBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldRawBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldRawBinaryOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
457	[BUG]  [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldAssignmentOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldAssignmentOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
458	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right  -  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
459	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldLocalOperator(subtree,  left,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	68	None	replace
460	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  this);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  this);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
461	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  type);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  type);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree.cloneTree(),  left,  right,  subtree.type,  type);	  return    tryFoldBinaryOperator(subtree.cloneTree(),    left,    right,    subtree.type);    	non-compiled	[CE]  orphaned  case	13	None	replace
462	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  default);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  default);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  default);	  return    tryFoldUnknownComparison(subtree,    left,    right,    result);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
463	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
464	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  result.cloneTree());	  return    tryFoldComparison(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	26	None	replace
465	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
466	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  this.subtree.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  this.subtree.cloneTree());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  this.subtree.cloneTree());	  return    tryFoldConstant(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	36	None	replace
467	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	46	None	replace
468	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  reverse,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    reverse);    	non-compiled	[CE]  orphaned  case	46	None	replace
469	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  inDEX_OUT_OF_RANGE);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	56	None	replace
470	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);	  return    tryFoldBinaryOperator(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	56	None	replace
471	[BUG]  [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldDeclaration(subtree,  left,  right,  subtree.clone(),  MAX_FOLD_NUMBER);	  return    tryFoldDeclaration(subtree,    left,    right,    subtree.cloneTree());    	non-compiled	[CE]  orphaned  case	50	None	replace
472	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  false,  subtree.restrictByNotNullOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
473	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  token.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  token.restrictByNotNullOrUndefined());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  token.restrictByNotNullOrUndefined());	  return    tryFoldConstants(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	32	None	replace
474	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  ||  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
475	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  2);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  2);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
476	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  1);	  return    tryFoldBinaryOperator(subtree,    left,    right,    MAX_FOLD_NUMBER);    	non-compiled	[CE]  orphaned  case	43	None	replace
477	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);	  return    tryFoldComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	72	None	replace
478	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  inDEX_OUT_OF_RANGE);	  return    tryFoldUnknownComparison(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	66	None	replace
479	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
480	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
481	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstants(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND,  inDEX_OUT_OF_RANGE);	  return    tryFoldConstants(subtree,    left,    right,    FRACTIONAL_BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	76	None	replace
482	[BUG]  [BUGGY]  return  tryFoldBinaryOperand(left,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperand(left,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperand(left,  subtree);	  return    tryFoldBinaryOperand(subtree);    	non-compiled	[CE]  orphaned  case	83	None	replace
483	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldConstant(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldConstant(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	35	None	replace
484	[BUG]  [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree  +  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldUnknownComparison(subtree,  left,  right,  subtree  +  1);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldUnknownComparison(subtree,  left,  right,  subtree  +  1);	  return    tryFoldUnknownComparison(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	40	None	replace
485	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree,  BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
486	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MISSING_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	58	None	replace
487	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
488	[BUG]  [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldComparison(subtree,  left,  right,  subtree.restrictByNotEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrElement());	  return    tryFoldComparison(subtree,    left,    right,    subtree.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	27	None	replace
489	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default,  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  default,  MAX_FOLD_NUMBER);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  default,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right,    default);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
490	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.GT:  case  Token.LE:  case  Token.GE:  case  Token.EQ:  case  Token.NE:  case  Token.SHEQ:  case  Token.SHNE:  return  tryFoldComparison(subtree,  left,  right);  default:      [BUGGY]  return  tryFoldBinaryOperator(subtrae,  left,  right,  subtree);  [BUGGY]      }  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	return  tryFoldBinaryOperator(subtrae,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtrae,    left,    right);    	non-compiled	[CE]  orphaned  case	23	None	replace
