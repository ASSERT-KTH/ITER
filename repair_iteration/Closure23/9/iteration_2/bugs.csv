bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(elem!=  null  ||!elem.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  ||!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  ||!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  if(n  ==  null  ||!n.isEmpty())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||!n.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||!n.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  if(current  ==  null  ||!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current  ==  null  ||!right.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current  ==  null  ||!right.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right  ==  null  ||!right.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  if(n!=  null  ||!n.isEmpty())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||!n.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||!n.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  if(current!=  null  ||!right.isEmpty())  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current!=  null  ||!right.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current!=  null  ||!right.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  if(current!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  if(n!=  null  ||  right!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  right!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  right!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  if(current  ==  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current  ==  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current  ==  null)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(n!=  left.getFirstChild())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  left.getFirstChild())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  left.getFirstChild())  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  if(current.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  right.getType()  ==  Token.RETURN)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  if(n  ==  null  ||  right!=  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  right!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  right!=  null)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  if(n!=  null  ||  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  n.getType()  ==  Token.NAME)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if(n!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if(right  ==  null  ||  elem.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right  ==  null  ||  elem.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right  ==  null  ||  elem.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  right.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  if(right!=  null  ||  elem.getType()  ==  Token.RETURN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  elem.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  elem.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
30	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right  ==  null  ||  right.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  left.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  if(n!=  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  ||  right.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  if(right  ==  null  ||  elem.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right  ==  null  ||  elem.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right  ==  null  ||  elem.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
35	[BUG]  [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  if(right!=  null  ||  elem.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  elem.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  elem.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  Node  right  =  current.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  current.getLastChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  current.getLastChild();	      	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  Node  right  =  current.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  current.getNext();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  current.getNext();	      	non-compiled	[CE]  	6	None	replace
43	[BUG]  [BUGGY]  Node  right  =  current.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  current.getFirstChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  current.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  n.getNext();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  n.removeChild(current);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  n.removeChild(current);  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	n.removeChild(current);	      	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  if(RIGHT!=  null  ||  right.isEmpty())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  ||  right.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  ||  right.isEmpty())  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  ||  right.getType()  ==  Token.STRING)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  if(elem!=  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  ||  right.getType()  ==  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  &&  right!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  &&  right!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  if(left!=  null  ||  right!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  ||  right!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  ||  right!=  null)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
54	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  &&  right!=  null  &&  right.getType()  ==  Token.GETELEM)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  if(left!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  if(elem!=  null  &&!elem.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  if(current  ==  null  ||!elem.isEmpty())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(current  ==  null  ||!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(current  ==  null  ||!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  if(em  ==  null  ||!elem.isEmpty())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(em  ==  null  ||!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(em  ==  null  ||!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  if(!elem.isEmpty())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  left.getType()  ==  Token.NAME)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.GETELEM)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.FUNCTION)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  left.getLastChild();	      	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  	6	None	replace
66	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left  ==  null  ||  right!=  null)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
71	[BUG]  [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  ||  right  ==  null)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
72	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  right.getType()  ==  Token.GETELEM)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
73	[BUG]  [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
74	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
75	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.RETURN)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.BLOCK)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.VAR)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.STRING)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(RIGHT!=  null  &&  right.getType()  ==  Token.STRING)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(RIGHT!=  null  &&  right.getType()  ==  Token.STRING)  {	  if(RIGHT!=    null)    {    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||  right.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||  right.getType()  ==  Token.BLOCK)  {	  if(n    ==    null)    {    	non-compiled	[CE]  	2	None	replace
80	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }	      	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.EXPR_RESULT)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }	      	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.RETURN)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.RETURN)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  null;  }	      	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  if(n.getType()!=  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()!=  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()!=  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n.getType()  ==  Token.EMPTY)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n.getType()  ==  Token.EMPTY)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
85	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	5	None	replace
86	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.getType()  ==  Token.RETURN)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.getType()  ==  Token.EXPR_RESULT)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
88	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.getType()  ==  Token.NAME)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
89	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.VAR)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.getType()  ==  Token.VAR)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
90	[BUG]  [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.getType()  ==  Token.BLOCK)  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
91	[BUG]  [BUGGY]  if(n!=  null  &&  n.hasChildren())  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n!=  null  &&  n.hasChildren())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n!=  null  &&  n.hasChildren())  {	  if(n!=    null)    {    	non-compiled	[CE]  	3	None	replace
92	[BUG]  [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
93	[BUG]  [BUGGY]  if(elem!=  null  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  ||  right.getType()  ==  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  if(elem  ==  null  ||  right.getType()!=  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem  ==  null  ||  right.getType()!=  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem  ==  null  ||  right.getType()!=  Token.NAME)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	10	None	replace
95	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left!=  null  ||  right.getType()  ==  Token.RETURN)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.BLOCK)  {	  if(right    ==    null)    {    	non-compiled	[CE]  	4	None	replace
97	[BUG]  [BUGGY]  if(elem  ==  null  ||!elem.isArray())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem  ==  null  ||!elem.isArray())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem  ==  null  ||!elem.isArray())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
98	[BUG]  [BUGGY]  if(elem  ==  null  ||!elem.equals(right))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem  ==  null  ||!elem.equals(right))  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem  ==  null  ||!elem.equals(right))  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
99	[BUG]  [BUGGY]  if(n  ==  null  ||!elem.isEmpty())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(n  ==  null  ||!elem.isEmpty())  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(n  ==  null  ||!elem.isEmpty())  {	  if(elem    ==    null    ||!elem.isEmpty())    {    	non-compiled	[CE]  	9	None	replace
100	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.RETURN)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
101	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.NAME)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
102	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.EXPR_RESULT)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
103	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.VAR)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
104	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.BLOCK)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
105	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.FUNCTION)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
106	[BUG]  [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(right!=  null  &&  right.getType()  ==  Token.STRING)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(right!=  null  &&  right.getType()  ==  Token.STRING)  {	  if(right!=    null)    {    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.RETURN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  right.getType()  ==  Token.RETURN)  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
108	[BUG]  [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  n.getType()  ==  Token.NAME)  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
109	[BUG]  [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  n.getType()  ==  Token.RETURN)  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
110	[BUG]  [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  right.getType()  ==  Token.BLOCK)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  right.getType()  ==  Token.BLOCK)  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
111	[BUG]  [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem!=  null  &&  n.getType()  ==  Token.VAR)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem!=  null  &&  n.getType()  ==  Token.VAR)  {	  if(elem!=    null)    {    	non-compiled	[CE]  	7	None	replace
112	[BUG]  [BUGGY]  if(elem  ==  null  ||  right.getType()!=  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }    [BUGGY]  if(elem  ==  null  ||  right.getType()!=  Token.RETURN)  {  [BUGGY]    error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	if(elem  ==  null  ||  right.getType()!=  Token.RETURN)  {	  if(elem    ==    null    ||    right.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	11	None	replace
