bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
2	[BUG]  [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
3	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
4	[BUG]  [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
5	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
6	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  i);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
7	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
8	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
9	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
10	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
11	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
12	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
13	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
14	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
15	[BUG]  [BUGGY]  error(RIGHT,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
16	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
17	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  right);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
18	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
19	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
20	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(n,  TEXT_OUT_OF_RANGE);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_RANGE);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
21	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
22	[BUG]  [BUGGY]  error(RIGHT,  TEXT_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  TEXT_OUT_OF_RANGE);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  TEXT_OUT_OF_RANGE);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
23	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_RANGE,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
24	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  right);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
25	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_RANGE,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
26	[BUG]  [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  case	3	None	replace
27	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  case	3	None	replace
28	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  case	3	None	replace
29	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  case	3	None	replace
30	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  i  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  i  +  1);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  i  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  case	3	None	replace
31	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
32	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
33	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
35	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
36	[BUG]  [BUGGY]  error(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(n,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
37	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
38	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  left.getNext();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
39	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
40	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  n  =  left.getNext();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
41	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
42	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  right.getNext();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  Node  elem  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  elem  =  left.getNext();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
44	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	15	None	replace
45	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
46	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
47	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
48	[BUG]  [BUGGY]  error(left,  left.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
49	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
50	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  case	4	None	replace
51	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
52	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  RIGHT);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  RIGHT);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  RIGHT);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
53	[BUG]  [BUGGY]  error(RIGHT,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
54	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
55	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
56	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
57	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
59	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
60	[BUG]  [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  default	1	None	replace
61	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  default	1	None	replace
62	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  default	1	None	replace
63	[BUG]  [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
64	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
65	[BUG]  [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
66	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
67	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i);  [CE]  orphaned  default  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
68	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  right);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
69	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  right);  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  right);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
70	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  i);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
71	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i);  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
72	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
73	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  n);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
74	[BUG]  [BUGGY]  error(RIGHT,  ID_GETELEM_INDEX_ERROR);  [CE]  orphaned  default  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  ID_GETELEM_INDEX_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
75	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_RANGE,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	13	None	replace
76	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right);  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  default	6	None	replace
77	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right);  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  default	6	None	replace
78	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  default	6	None	replace
79	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n);  [CE]  orphaned  default  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	8	None	replace
80	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	8	None	replace
81	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  i);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  orphaned  default	3	None	replace
82	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString());  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
83	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString());  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
84	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString());  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
85	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
86	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
87	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	10	None	replace
88	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  right);  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_RANGE,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  right);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	10	None	replace
89	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	10	None	replace
90	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	2	None	replace
91	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	2	None	replace
92	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	2	None	replace
93	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  RIGHT);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_RANGE,  RIGHT);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  RIGHT);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  default	2	None	replace
94	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  default  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  default	12	None	replace
95	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  default	12	None	replace
96	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  default	12	None	replace
97	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  default	12	None	replace
98	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  default	12	None	replace
99	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  orphaned  default	11	None	replace
100	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i++);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i++);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  orphaned  default	11	None	replace
101	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right);  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
102	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left);  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
103	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left);  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
104	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
105	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  right);  [CE]  orphaned  default  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  default	5	None	replace
106	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n);  [CE]  orphaned  default  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
107	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  default	9	None	replace
108	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS);  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  default	15	None	replace
109	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left);  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
110	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString());  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString());	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  default	14	None	replace
111	[BUG]  [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS);  [CE]  orphaned  default  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  INDEX_OUT_OF_BOUNDS);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  default	1	None	replace
112	[BUG]  [BUGGY]  Node  elem  =  left.getFirstChild();  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  elem  =  left.getFirstChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  default	7	None	replace
113	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left);  [CE]  orphaned  default  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(left);	      	non-compiled	[CE]  orphaned  default	7	None	replace
114	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  orphaned  default  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeFirstChild();	      	non-compiled	[CE]  orphaned  default	7	None	replace
115	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  orphaned  default  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
116	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString());  [CE]  orphaned  default  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
117	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  orphaned  default  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
118	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString());  [CE]  orphaned  default  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString());  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  orphaned  default	4	None	replace
119	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  i);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  	13	None	replace
120	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  i);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  	3	None	replace
121	[BUG]  [BUGGY]  Node  n  =  left.removeChild(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  left.removeChild(right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeChild(right);	      	non-compiled	[CE]  	7	None	replace
122	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
123	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	15	None	replace
124	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
125	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
126	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	12	None	replace
127	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
128	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
129	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_OUT_OF_RANGE,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  right);	  error(TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
130	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  right);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  right);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
131	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  left);	  error(ID_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
132	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	2	None	replace
133	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
134	[BUG]  [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
135	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {    [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left);  [BUGGY]    return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	1	None	replace
