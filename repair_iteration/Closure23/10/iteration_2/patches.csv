bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  n  =  current.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  current.getFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  current.getFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
2	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  right.getLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
3	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  i);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  i);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  orphaned  case	95	None	replace
4	[BUG]  [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  orphaned  case	95	None	replace
5	[BUG]  [BUGGY]  error(RIGHT,  n,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  	95	None	replace
6	[BUG]  [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  	95	None	replace
7	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  n);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  	95	None	replace
8	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  i);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  i);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  	95	None	replace
9	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  left);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  not  a  statement	95	None	replace
10	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
11	[BUG]  [BUGGY]  error(i,  TEXT_OUT_OF_BOUNDS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  TEXT_OUT_OF_BOUNDS);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
12	[BUG]  [BUGGY]  error(intIndex,  TEXT_OUT_OF_BOUNDS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(intIndex,  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(intIndex,  TEXT_OUT_OF_BOUNDS);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
13	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  TEXT_OUT_OF_BOUNDS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  TEXT_OUT_OF_BOUNDS);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
14	[BUG]  [BUGGY]  error(left,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  n);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
15	[BUG]  [BUGGY]  error(NumberFormat.format(i,  left),  TEXT_OUT_OF_BOUNDS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i,  left),  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i,  left),  TEXT_OUT_OF_BOUNDS);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  not  a  statement	108	None	replace
16	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  RIGHT);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  RIGHT);	  error(NEGATING_A_NON_NUMBER_ERROR,    RIGHT);    	non-compiled	[CE]  not  a  statement	52	None	replace
17	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INVALID_GETELEM_INDEX_ERROR);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  INVALID_GETELEM_INDEX_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    RIGHT);    	non-compiled	[CE]  not  a  statement	52	None	replace
18	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  RIGHT);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  RIGHT);	  error(NEGATING_A_NON_NUMBER_ERROR,    RIGHT);    	non-compiled	[CE]  not  a  statement	52	None	replace
19	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR,  i);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR,  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    RIGHT);    	non-compiled	[CE]  not  a  statement	52	None	replace
20	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  i  +  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  i  +  1);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
21	[BUG]  [BUGGY]  error(i,  FIELD_OUT_OF_BOUNDS_ERROR);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  FIELD_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  FIELD_OUT_OF_BOUNDS_ERROR);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
22	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  intIndex);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  intIndex);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
23	[BUG]  [BUGGY]  error(IDebugLogConstants.FIELD_OUT_OF_BOUNDS_ERROR,  i);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.FIELD_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.FIELD_OUT_OF_BOUNDS_ERROR,  i);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
24	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
25	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	120	None	replace
26	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i  +  1);	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
27	[BUG]  [BUGGY]  error(i,  INVALID_GETELEM_INDEX_ERROR);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INVALID_GETELEM_INDEX_ERROR);	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
28	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  intIndex);	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
29	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  i);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left,  i);	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
30	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
31	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);	  error(INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  not  a  statement	29	None	replace
32	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
33	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
34	[BUG]  [BUGGY]  error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
35	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i  +  1);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  i  +  1);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
36	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right,  i);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
37	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  not  a  statement	66	None	replace
38	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left);	  error(NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  not  a  statement	3	None	replace
39	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  n);	  error(NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  not  a  statement	3	None	replace
40	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  left,  right);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  left,  right);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
41	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  right);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  i,  right);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
42	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  left.getLastChild());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  left.getLastChild());	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
43	[BUG]  [BUGGY]  error(i,  TEXT_OUT_OF_RANGE,  right);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  TEXT_OUT_OF_RANGE,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  TEXT_OUT_OF_RANGE,  right);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
44	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  right,  left.getLastChild());  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  right,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  right,  left.getLastChild());	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
45	[BUG]  [BUGGY]  error(n,  i,  right);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  i,  right);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  not  a  statement	24	None	replace
46	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
47	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
48	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  right);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
49	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
50	[BUG]  [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
51	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
52	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  not  a  statement	125	None	replace
53	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  i  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  i  +  1);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  not  a  statement	119	None	replace
54	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  intIndex);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  intIndex);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  	119	None	replace
55	[BUG]  [BUGGY]  error(i,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  	119	None	replace
56	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
57	[BUG]  [BUGGY]  error(i,  BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  BITWISE_OPERAND_OUT_OF_RANGE);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
58	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
59	[BUG]  [BUGGY]  error(FIELD_NAME,  i);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
60	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  intIndex);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
61	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  i);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  	81	None	replace
62	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER,  NEGATING_A_NON_NUMBER_ERROR);	  error(LEFT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  error(i,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  NEGATING_A_NON_NUMBER_ERROR);	  error(LEFT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_RANGE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_RANGE);	  error(TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  	75	None	replace
65	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  i);	  error(TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  	75	None	replace
66	[BUG]  [BUGGY]  error(LEFT,  ID_GETELEM_INDEX_ERROR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  ID_GETELEM_INDEX_ERROR);	  error(RIGHT,    ID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  	74	None	replace
67	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getLastChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getLastChild());	  error(RIGHT,    ID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  orphaned  case	74	None	replace
68	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
69	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
70	[BUG]  [BUGGY]  n  =  current.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  current.getFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  current.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
71	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
72	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	41	None	replace
73	[BUG]  [BUGGY]  Node  n  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  right.removeFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.removeFirstChild();	  Node    n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	114	None	replace
74	[BUG]  [BUGGY]  Node  n  =  left.removeLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.removeLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeLastChild();	  Node    n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	114	None	replace
75	[BUG]  [BUGGY]  Node  n  =  current.removeFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  current.removeFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  current.removeFirstChild();	  Node    n    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	114	None	replace
76	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_RANGE);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_RANGE);	  error(INDEX_OUT_OF_RANGE,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	92	None	replace
77	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);	  error(INDEX_OUT_OF_RANGE,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	92	None	replace
78	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);	  error(INDEX_OUT_OF_RANGE,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  orphaned  case	92	None	replace
79	[BUG]  [BUGGY]  error(n,  INVALID_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INVALID_GETELEM_INDEX_ERROR);	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	51	None	replace
80	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	51	None	replace
81	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  orphaned  case	51	None	replace
82	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left);	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  	51	None	replace
83	[BUG]  [BUGGY]  Error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(n,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  	51	None	replace
84	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  	8	None	replace
85	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(left,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  	44	None	replace
88	[BUG]  [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INDEX_OUT_OF_BOUNDS_ERROR  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  	30	None	replace
89	[BUG]  [BUGGY]  error(i  +  1,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i  +  1,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i  +  1,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  	30	None	replace
90	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  i  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  i  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  	30	None	replace
91	[BUG]  [BUGGY]  error(n,  left.getString(),  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
92	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
93	[BUG]  [BUGGY]  error(Locale.getDefault(),  left.getString(),  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.getDefault(),  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.getDefault(),  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
94	[BUG]  [BUGGY]  error(NumberFormat.format(i,  left.getString(),  right));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i,  left.getString(),  right));  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i,  left.getString(),  right));	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
95	[BUG]  [BUGGY]  error(left,  left.getString(),  right);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
96	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right,  i);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  	49	None	replace
97	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  	135	None	replace
98	[BUG]  [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  	135	None	replace
99	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  	135	None	replace
100	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  	135	None	replace
101	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  	135	None	replace
102	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
103	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  left);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
104	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
105	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  n,  INVALID_GETELEM_INDEX_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
106	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
107	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  i,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
108	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left,  right);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
109	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  i);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
110	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  i,  right);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
111	[BUG]  [BUGGY]  error(n,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  MAX_FOLD_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
112	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left,  i);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
113	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  n);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  n);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
114	[BUG]  [BUGGY]  error(RIGHT,  n,  left.getLastChild());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  n,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
115	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
116	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
117	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
118	[BUG]  [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
119	[BUG]  [BUGGY]  error(RIGHT,  left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
120	[BUG]  [BUGGY]  error(RIGHT,  left.getFirstChild(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left.getFirstChild(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left.getFirstChild(),  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
121	[BUG]  [BUGGY]  error(intIndex,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(intIndex,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(intIndex,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    intIndex);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
122	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  right.getString());	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
123	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
124	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right.getString());	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
125	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
126	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
127	[BUG]  [BUGGY]  error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
128	[BUG]  [BUGGY]  error(NumberFormat.format(i),  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i),  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i),  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
129	[BUG]  [BUGGY]  error(n,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left.getString(),  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
130	[BUG]  [BUGGY]  error(NumberFormat.format(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR));  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i,  left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR));	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
131	[BUG]  [BUGGY]  error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left.getString(),  INDEX_OUT_OF_BOUNDS);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
132	[BUG]  [BUGGY]  error(Locale.getDefault(),  left.getString(),  i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.getDefault(),  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.getDefault(),  left.getString(),  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
133	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  left,  right);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
134	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_OUT_OF_RANGE,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  n);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
135	[BUG]  [BUGGY]  error(RIGHT,  LEFT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  LEFT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  LEFT_OUT_OF_RANGE);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
136	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  i);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
137	[BUG]  [BUGGY]  error(n,  LEFT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  LEFT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  LEFT_OUT_OF_RANGE);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
138	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  right,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_OUT_OF_RANGE,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  right,  i);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
139	[BUG]  [BUGGY]  error(LEFT_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_OUT_OF_RANGE,  left);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
140	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
141	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
142	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
143	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
144	[BUG]  [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  left.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
145	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
146	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
147	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
148	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
149	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
150	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
151	[BUG]  [BUGGY]  error(left,  FIELD_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  FIELD_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  FIELD_OUT_OF_BOUNDS_ERROR);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
152	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  right);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
153	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  n);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  n);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
154	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
155	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  i  +  1);	  error(NEGATING_A_NON_NUMBER_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
156	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  intIndex);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  intIndex);	  error(NEGATING_A_NON_NUMBER_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
157	[BUG]  [BUGGY]  Node  elem  =  current.getNext();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  current.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  current.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
158	[BUG]  [BUGGY]  Node  elem  =  right.getNext();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  right.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  right.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
159	[BUG]  [BUGGY]  Node  elem  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.getLastChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
160	[BUG]  [BUGGY]  Node  elem  =  left.getParent();  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.getParent();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.getParent();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
161	[BUG]  [BUGGY]  Node  elem  =  left.getNext()  +  1;  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.getNext()  +  1;	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
162	[BUG]  [BUGGY]  error(left,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  INVALID_GETELEM_INDEX_ERROR);	  error(INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
163	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  right);	  error(INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
164	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left,  right);	  error(INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
165	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i,  left);	  error(INVALID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	72	None	replace
166	[BUG]  [BUGGY]  error(n,  ID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	73	None	replace
167	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  n);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  n);	  error(ID_GETELEM_INDEX_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	73	None	replace
168	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
169	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  n);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
170	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  i);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
171	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  n,  right);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
172	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  n);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  n);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
173	[BUG]  [BUGGY]  error(i,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
174	[BUG]  [BUGGY]  error(intIndex,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(intIndex,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(intIndex,  left,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
175	[BUG]  [BUGGY]  error(left,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  i);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
176	[BUG]  [BUGGY]  Node  elem  =  right.getFirstChild();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  right.getFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  right.getFirstChild();	  Node    elem    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	112	None	replace
177	[BUG]  [BUGGY]  Node  elem  =  current.getFirstChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  current.getFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  current.getFirstChild();	  Node    elem    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	112	None	replace
178	[BUG]  [BUGGY]  Node  elem  =  left.removeFirstChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.removeFirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.removeFirstChild();	  Node    elem    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	112	None	replace
179	[BUG]  [BUGGY]  Node  elem  =  left.removeChild(i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.removeChild(i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.removeChild(i);	  Node    elem    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	112	None	replace
180	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  left,  i);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
181	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  n);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
182	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  left,  right);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
183	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  i,  left);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
184	[BUG]  [BUGGY]  error(left,  TEXT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_GETELEM_INDEX_ERROR);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
185	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex  +  1);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
186	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
187	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
188	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
189	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n  +  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
190	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
191	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	103	None	replace
192	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  i);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	103	None	replace
193	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  n);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	103	None	replace
194	[BUG]  [BUGGY]  error(left,  ID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
195	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  left);	  error(ID_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	109	None	replace
196	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
197	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right.getString());	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
198	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n.getString());	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
199	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
200	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
201	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString()  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
202	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  intIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
203	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
204	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
205	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left.getLastChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  1,  left.getLastChild());	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
206	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  right.getString());	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
207	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  i);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
208	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  n.getString());	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
209	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  right);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
210	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_RANGE.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_RANGE.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_RANGE.getString());	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
211	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString()  +  1);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
212	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
213	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
214	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
215	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
216	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
217	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  INVALID_GETELEM_INDEX_ERROR);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
218	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  BITWISE_OPERAND);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  BITWISE_OPERAND);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  BITWISE_OPERAND);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
219	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  FRACTIONAL_BITWISE_OPERAND);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
220	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_RANGE);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
221	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
222	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
223	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
224	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
225	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
226	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  intIndex);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
227	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
228	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
229	[BUG]  [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
230	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  i);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
231	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
232	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i  +  1);	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
233	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  intIndex);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  intIndex);	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
234	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i);	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
235	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
236	[BUG]  [BUGGY]  error(i,  ID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
237	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  INVALID_GETELEM_INDEX_ERROR,  i  +  1);	  error(ID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	71	None	replace
238	[BUG]  [BUGGY]  error(RIGHT,  INDEX_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  INDEX_OUT_OF_BOUNDS);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
239	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
240	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  left);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
241	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  i);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  i);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
242	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  right,  i);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  right,  i);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
243	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left.getLastChild());  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  left.getLastChild());	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
244	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
245	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
246	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
247	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
248	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  rightLiteral);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  rightLiteral);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
249	[BUG]  [BUGGY]  error(RIGHT,  right.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  right.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    right.getString());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
250	[BUG]  [BUGGY]  error(n,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  right.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    right.getString());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
251	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString(),  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString(),  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    right.getString());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
252	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i++);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
253	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i++);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
254	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i++);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
255	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex++);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  intIndex++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
256	[BUG]  [BUGGY]  error(n,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  SHIFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  SHIFT_AMOUNT_OUT_OF_BOUNDS);	  error(n,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
257	[BUG]  [BUGGY]  Error(n,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(n,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(n,  INVALID_GETELEM_INDEX_ERROR);	  error(n,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
258	[BUG]  [BUGGY]  error(n,  SHIFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  SHIFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  SHIFT_AMOUNT_OUT_OF_RANGE);	  error(n,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
259	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  intIndex);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  intIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
260	[BUG]  [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
261	[BUG]  [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
262	[BUG]  [BUGGY]  error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
263	[BUG]  [BUGGY]  error(n.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n.getString(),  INDEX_OUT_OF_BOUNDS_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
264	[BUG]  [BUGGY]  error(left.getString(),  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  n);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
265	[BUG]  [BUGGY]  error(left.getString(),  i);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  i);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
266	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
267	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  i);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  i);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
268	[BUG]  [BUGGY]  error(left.getString(),  n,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  n,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  n,  INVALID_GETELEM_INDEX_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
269	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
270	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  n);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  n);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
271	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  n);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
272	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  right,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    left);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
273	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    left);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
274	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    left);    	non-compiled	[CE]  case,  default,  or  	13	None	replace
275	[BUG]  [BUGGY]  Node  n  =  current.getLastChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  current.getLastChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  current.getLastChild();	  Node    n    =    left.getLastChild();    	non-compiled	[CE]  case,  default,  or  	39	None	replace
276	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
277	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
278	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  n,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
279	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  right,  MAX_FOLD_NUMBER);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
280	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  n,  left);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
281	[BUG]  [BUGGY]  error(n,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	78	None	replace
282	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left,  n);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	78	None	replace
283	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  n,  left);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	78	None	replace
284	[BUG]  [BUGGY]  error(left,  n,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  n,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  n,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	78	None	replace
285	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
286	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_RANGE);	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
287	[BUG]  [BUGGY]  error(LEFT,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  TEXT_OUT_OF_RANGE);	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
288	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getLastChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left.getLastChild());	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
289	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left.getString());	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
290	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left.getLastChild());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_RANGE,  left.getLastChild());	  error(n,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
291	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_RANGE);	  error(n,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
292	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_RANGE,  left.getString());	  error(n,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
293	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_RANGE,  left);	  error(n,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
294	[BUG]  [BUGGY]  error(i,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  TEXT_OUT_OF_RANGE);	  error(n,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	20	None	replace
295	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_A_NON_NUMBER_ERROR);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
296	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  i);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  i);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
297	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
298	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
299	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
300	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  NEGATING_A_NON_NUMBER_ERROR,  right);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
301	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  i);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
302	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  right);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
303	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  n);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
304	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
305	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  n);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
306	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  intIndex);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  intIndex);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
307	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  i,  right);	  error(TEXT_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	130	None	replace
308	[BUG]  [BUGGY]  error(n,  TEXT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_GETELEM_INDEX_ERROR);	  error(TEXT_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	130	None	replace
309	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  i);	  error(TEXT_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	130	None	replace
310	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  intIndex);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  intIndex);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
311	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
312	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
313	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  false);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  false);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  false);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
314	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  i);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
315	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  n,  left);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
316	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  n,  right);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
317	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  i,  left);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  i,  left);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
318	[BUG]  [BUGGY]  error(RIGHT,  n,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  n,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
319	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
320	[BUG]  [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
321	[BUG]  [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
322	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  left.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
323	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  right.getString());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
324	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  elem);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
325	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
326	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  elem);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
327	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  elem);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
328	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  elem);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    elem);    	non-compiled	[CE]  case,  default,  or  	127	None	replace
329	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    elem);    	non-compiled	[CE]  case,  default,  or  	127	None	replace
330	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	19	None	replace
331	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  left);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	19	None	replace
332	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  left,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
333	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
334	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  intIndex,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
335	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  intIndex);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  intIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
336	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i  +  1);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i  +  1);	  error(TEXT_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
337	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left.getString(),  i);	  error(TEXT_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
338	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
339	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  elem);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  n,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
340	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  elem);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
341	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  elem);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  right,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
342	[BUG]  [BUGGY]  Node  n  =  left.removeChild(current);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.removeChild(current);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeChild(current);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
343	[BUG]  [BUGGY]  Node  n  =  right.removeChild(left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  right.removeChild(left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.removeChild(left);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
344	[BUG]  [BUGGY]  Node  n  =  left.removeChild(parent);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.removeChild(parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeChild(parent);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
345	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(current,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.replaceChild(current,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.replaceChild(current,  right);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
346	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
347	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  intIndex);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  intIndex);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
348	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
349	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
350	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
351	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
352	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getLastChild());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getLastChild());	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
353	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);	  error(INVALID_GETELEM_INDEX_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	126	None	replace
354	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i,  NEGATING_A_NON_NUMBER_ERROR);	  error(INVALID_GETELEM_INDEX_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	126	None	replace
355	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  i  +  1);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
356	[BUG]  [BUGGY]  error(i,  left,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
357	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
358	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  right,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  right,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
359	[BUG]  [BUGGY]  Node  n  =  current.getNext();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  current.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  current.getNext();	  Node    n    =    right.getNext();    	non-compiled	[CE]  case,  default,  or  	42	None	replace
360	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  parent.getNext();	  Node    n    =    right.getNext();    	non-compiled	[CE]  case,  default,  or  	42	None	replace
361	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.getParent();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getParent();	  Node    n    =    right.getNext();    	non-compiled	[CE]  case,  default,  or  	42	None	replace
362	[BUG]  [BUGGY]  Node  n  =  right.getParent();  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  right.getParent();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  right.getParent();	  Node    n    =    right.getNext();    	non-compiled	[CE]  case,  default,  or  	42	None	replace
363	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i,  right);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
364	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  right,  i);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
365	[BUG]  [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(i,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
366	[BUG]  [BUGGY]  error(i,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  right,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(i,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
367	[BUG]  [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(i,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
368	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n.getString());	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	118	None	replace
369	[BUG]  [BUGGY]  error(left.getString(),  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	118	None	replace
370	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	118	None	replace
371	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString()  +  1);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	118	None	replace
372	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
373	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  n,  right);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
374	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
375	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
376	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
377	[BUG]  [BUGGY]  error(left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getLastChild(),  NEGATING_A_NON_NUMBER_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
378	[BUG]  [BUGGY]  error(n,  left.getLastChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
379	[BUG]  [BUGGY]  error(left,  left.getLastChild());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  left.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
380	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right.getLastChild());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  right.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
381	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild(),  i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild(),  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
382	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
383	[BUG]  [BUGGY]  error(left.getLastChild(),  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getLastChild(),  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getLastChild(),  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
384	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
385	[BUG]  [BUGGY]  error(LEFT,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
386	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  left.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n,  left.getLastChild());	  error(TEXT_OUT_OF_RANGE,    n);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
387	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  n);	  error(TEXT_OUT_OF_RANGE,    n);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
388	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  error(left,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
389	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
390	[BUG]  [BUGGY]  n  =  current.getNext();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  current.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  current.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	40	None	replace
391	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  right.getNext();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	40	None	replace
392	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.getParent();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	40	None	replace
393	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	40	None	replace
394	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  parent);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  parent);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
395	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  intIndex);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  intIndex);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
396	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right,  i);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
397	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right,  n);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
398	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n,  left);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
399	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n,  right);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
400	[BUG]  [BUGGY]  error(n,  left,  right,  i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right,  i);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
401	[BUG]  [BUGGY]  error(left,  n,  right);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  n,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
402	[BUG]  [BUGGY]  error(n,  left,  right,  null);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  right,  null);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right,  null);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
403	[BUG]  [BUGGY]  error(current,  left,  right);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(current,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(current,  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
404	[BUG]  [BUGGY]  error(i,  left,  right);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
405	[BUG]  [BUGGY]  error(n,  left,  right,  false);  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  right,  false);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right,  false);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
406	[BUG]  [BUGGY]  error(n,  left,  right,  parent);  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  right,  parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right,  parent);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
407	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
408	[BUG]  [BUGGY]  error(i,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
409	[BUG]  [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
410	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  intIndex);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  intIndex);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
411	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1,  left.getLastChild());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i  +  1,  left.getLastChild());	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
412	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	102	None	replace
413	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	102	None	replace
414	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	102	None	replace
415	[BUG]  [BUGGY]  error(i,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right,    i);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
416	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right,    i);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
417	[BUG]  [BUGGY]  error(NumberFormat.format(i),  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i),  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i),  left,  right,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right,    i);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
418	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS_ERROR.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS_ERROR.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    n.getString());    	non-compiled	[CE]  case,  default,  or  	50	None	replace
419	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  n.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    n.getString());    	non-compiled	[CE]  case,  default,  or  	50	None	replace
420	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    n.getString());    	non-compiled	[CE]  case,  default,  or  	50	None	replace
421	[BUG]  [BUGGY]  error(RIGHT,  n,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n,  i);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
422	[BUG]  [BUGGY]  error(RIGHT,  n,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  n,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  n,  left.getFirstChild());	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
423	[BUG]  [BUGGY]  error(n,  RIGHT);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  RIGHT);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
424	[BUG]  [BUGGY]  error(LEFT,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
425	[BUG]  [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left,    i);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
426	[BUG]  [BUGGY]  error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left,    i);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
427	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right,  i);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left,    i);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
428	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  left);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  left);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left,    i);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
429	[BUG]  [BUGGY]  error(i,  left,  ID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  left,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  left,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
430	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1);	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
431	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  right,  i);	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
432	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  right,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  right,  i);	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
433	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  n);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
434	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  n,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
435	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  parent);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
436	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
437	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  false);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  false);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,  left,  right,  false);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
438	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  n,  left);	  error(ID_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
439	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  n,  right);	  error(ID_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	68	None	replace
440	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  i,  right);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
441	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  left,  right);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
442	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  intIndex);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  intIndex);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
443	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  right);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
444	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
445	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left.getLastChild());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  left.getLastChild());	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
446	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  right,  parent);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  right,  parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  right,  parent);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
447	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
448	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getString());	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
449	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left);	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
450	[BUG]  [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  TEXT_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
451	[BUG]  [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  LEFT_AMOUNT_OUT_OF_BOUNDS,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
452	[BUG]  [BUGGY]  error(i,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
453	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i  +  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  right,  i  +  1);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
454	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  n,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
455	[BUG]  [BUGGY]  error(RIGHT,  right,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
456	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  i,  right);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
457	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  right.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
458	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  n.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
459	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  i);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
460	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  left.getString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
461	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
462	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString()  +  1);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
463	[BUG]  [BUGGY]  error(RIGHT,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  INDEX_OUT_OF_RANGE);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
464	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  right,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  right,  i);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
465	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  left);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
466	[BUG]  [BUGGY]  error(LEFT_IN_OF_RANGE,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_IN_OF_RANGE,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_IN_OF_RANGE,  right);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
467	[BUG]  [BUGGY]  error(NumberFormat.format(i,  right));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NumberFormat.format(i,  right));  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NumberFormat.format(i,  right));	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
468	[BUG]  [BUGGY]  Node  n  =  left.getNext()  +  1;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getNext()  +  1;	  Node    n    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	38	None	replace
469	[BUG]  [BUGGY]  error(current,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(current,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(current,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(right,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	134	None	replace
470	[BUG]  [BUGGY]  error(right,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  n);	  error(right,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	134	None	replace
471	[BUG]  [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  LEFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  LEFT_AMOUNT_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	101	None	replace
472	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	101	None	replace
473	[BUG]  [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  LEFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  LEFT_AMOUNT_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	101	None	replace
474	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right.getString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
475	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
476	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n.getString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
477	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
478	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
479	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left.getString());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left.getString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
480	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  n);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
481	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
482	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  right.getString());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
483	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left.getString());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
484	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  INVALID_GETELEM_INDEX_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
485	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
486	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  intIndex);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
487	[BUG]  [BUGGY]  error(left,  right.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
488	[BUG]  [BUGGY]  error(n,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
489	[BUG]  [BUGGY]  error(left,  n.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  n.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
490	[BUG]  [BUGGY]  error(left,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  left.getString(),  i);	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
491	[BUG]  [BUGGY]  Error(left,  right.getString());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(left,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(left,  right.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
492	[BUG]  [BUGGY]  error(right,  right.getString());  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  right.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
493	[BUG]  [BUGGY]  errors(left,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(left,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(left,  left.getString(),  i);	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
494	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(n);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
495	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(i);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
496	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  i);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(left,  i);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
497	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n,  left);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(n,  left);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
498	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(i,  left);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(i,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(i,  left);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
499	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  i);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(right,  i);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
500	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n,  right);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(n,  right);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
501	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  right.getString());	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
502	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
503	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  n.getString());	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
504	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  right);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
505	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
506	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  right,  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right,    i);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
507	[BUG]  [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right,    i);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
508	[BUG]  [BUGGY]  Error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right,    i);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
509	[BUG]  [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  INDEX_OUT_OF_BOUNDS);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
510	[BUG]  [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  INDEX_OUT_OF_BOUNDS);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
511	[BUG]  [BUGGY]  error(intIndex,  INDEX_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(intIndex,  INDEX_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(intIndex,  INDEX_OUT_OF_BOUNDS);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
512	[BUG]  [BUGGY]  error(intIndex,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(intIndex,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(intIndex,  left);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
513	[BUG]  [BUGGY]  Error(left,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(left,  i);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
514	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
515	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  left);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
516	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
517	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right,  intIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
518	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  right);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  n,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
519	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  RIGHT);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  RIGHT);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
520	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  i);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
521	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  left,  i);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
522	[BUG]  [BUGGY]  error(i,  RIGHT);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(i,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(i,  RIGHT);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
523	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
524	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
525	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
526	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
527	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
528	[BUG]  [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
529	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n,  left  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
530	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
531	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right,  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
532	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
533	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right  +  1);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
534	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i);	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
535	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  right.getString());	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
536	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  n.getString());	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
537	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString(),  right);	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
538	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString(),  intIndex);	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
539	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  left.getString());	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
540	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
541	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  RIGHT);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  RIGHT);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
542	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  left);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
543	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
544	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
545	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
546	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
547	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
548	[BUG]  [BUGGY]  error(left,  elem);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  elem);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
549	[BUG]  [BUGGY]  error(left,  0);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  0);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  0);	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
550	[BUG]  [BUGGY]  error(left,  n.getLastChild());  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  n.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  n.getLastChild());	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
551	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left  +  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left  +  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left  +  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	62	None	replace
552	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
553	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
554	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
555	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
556	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left.getString(),  n);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	45	None	replace
557	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
558	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  MISSING_A_NON_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
559	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
560	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getString(),  n);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	82	None	replace
561	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
562	[BUG]  [BUGGY]  error(left,  right,  LEFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right,  LEFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right,  LEFT_AMOUNT_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
563	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  elem);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
564	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
565	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	16	None	replace
566	[BUG]  [BUGGY]  error(left,  i,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  i,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  i,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	66	None	replace
567	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  n  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
568	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(parent);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(parent);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(parent);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
569	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  n);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(left,  n);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
570	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(right,  n);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
571	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
572	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
573	[BUG]  [BUGGY]  error(RIGHT,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  i);	  error(RIGHT,    ID_GETELEM_INDEX_ERROR);    	non-compiled	[CE]  case,  default,  or  	74	None	replace
574	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  leftIndex);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  leftIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  leftIndex);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    intIndex);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
575	[BUG]  [BUGGY]  error(RIGHT,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  MAX_FOLD_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
576	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left);	  error(NEGATING_A_NON_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
577	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	17	None	replace
578	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(left,  n);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.replaceChild(left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.replaceChild(left,  n);	  Node    n    =    left.removeFirstChild();    	non-compiled	[CE]  case,  default,  or  	114	None	replace
579	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left.getLastChild());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
580	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getLastChild());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
581	[BUG]  [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
582	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n  +  1);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  n  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    n);    	non-compiled	[CE]  case,  default,  or  	106	None	replace
583	[BUG]  [BUGGY]  Node  n  =  left.getfirstChild();  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.getfirstChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getfirstChild();	  Node    n    =    left.getLastChild();    	non-compiled	[CE]  case,  default,  or  	39	None	replace
584	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  undefinedRight);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  undefinedRight);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
585	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  valueUndefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  valueUndefined);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right,  valueUndefined);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	32	None	replace
586	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  left,  n);	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
587	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  left.getString());	  error(TEXT_GETELEM_INDEX_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	131	None	replace
588	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);	  error(INDEX_OUT_OF_RANGE,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
589	[BUG]  [BUGGY]  error(FIELD_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_RANGE,  left,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
590	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  i);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  i);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
591	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  FIELD_NAME);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
592	[BUG]  [BUGGY]  error(IDebugLogConstants.FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.FIELD_NAME,  NEGATING_A_NON_NUMBER_ERROR);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
593	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  right);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
594	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right,  MAX_FOLD_NUMBER_ERROR);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
595	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right,  NEGATING_A_NON_NUMBER_ERROR);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
596	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  left,  right);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
597	[BUG]  [BUGGY]  error(RIGHT,  TEXT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  TEXT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  TEXT_GETELEM_INDEX_ERROR);	  error(TEXT_GETELEM_INDEX_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	130	None	replace
598	[BUG]  [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    elem);    	non-compiled	[CE]  case,  default,  or  	127	None	replace
599	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  RIGHT);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  RIGHT);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
600	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  TEXT_OUT_OF_BOUNDS);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
601	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  0);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  0);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  0);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
602	[BUG]  [BUGGY]  error(right,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
603	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_RANGE,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_RANGE,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_RANGE,  left.getString());	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
604	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
605	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
606	[BUG]  [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(IDebugLogConstants.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	85	None	replace
607	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
608	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
609	[BUG]  [BUGGY]  error(RIGHT,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
610	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  i);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
611	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i  +  1);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  i  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right,    i);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
612	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  n);	  error(ID_GETELEM_INDEX_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	73	None	replace
613	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i  +  1,  left.getLastChild());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i  +  1,  left.getLastChild());	  error(TEXT_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
614	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_BOUNDS_ERROR,  n);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    n);    	non-compiled	[CE]  case,  default,  or  	19	None	replace
615	[BUG]  [BUGGY]  Error(TEXT_OUT_OF_BOUNDS_ERROR,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(TEXT_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(TEXT_OUT_OF_BOUNDS_ERROR,  left);	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
616	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
617	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
618	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left,  NEGATING_A_NON_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
619	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
620	[BUG]  [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(BITWISE_OPERAND_OUT_OF_RANGE,  RIGHT);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
621	[BUG]  [BUGGY]  error(right,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  INDEX_OUT_OF_RANGE);	  error(INDEX_OUT_OF_RANGE,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	93	None	replace
622	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
623	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  MAX_FOLD_NUMBER);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
624	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  leftIndex);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
625	[BUG]  [BUGGY]  error(left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right);	  error(right,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	134	None	replace
626	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  left);	  error(left,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
627	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);	  error(left,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	96	None	replace
628	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getString(),  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
629	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
630	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left.getString()  +  1);	  error(ID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	110	None	replace
631	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
632	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
633	[BUG]  [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	79	None	replace
634	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
635	[BUG]  [BUGGY]  error(IDebugLog.NAMESPACE_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.NAMESPACE_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.NAMESPACE_OUT_OF_RANGE,  left);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
636	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
637	[BUG]  [BUGGY]  Node  elem  =  left.cloneTree();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.cloneTree();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.cloneTree();	  Node    elem    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	112	None	replace
638	[BUG]  [BUGGY]  error(RIGHT,  i,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  i,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  i,  TEXT_OUT_OF_RANGE);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
639	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  n);	  error(n,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
640	[BUG]  [BUGGY]  error(n,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  FRACTIONAL_BITWISE_OPERAND_OUT_OF_RANGE);	  error(n,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	4	None	replace
641	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  RIGHT);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  RIGHT);	  error(NEGATING_A_NON_NUMBER_ERROR,    RIGHT);    	non-compiled	[CE]  case,  default,  or  	52	None	replace
642	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
643	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
644	[BUG]  [BUGGY]  error(INDEX_OUT_OF_RANGE,  n);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_RANGE,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_RANGE,  n);	  error(TEXT_OUT_OF_RANGE,    n);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
645	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  n,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_RANGE,    n);    	non-compiled	[CE]  case,  default,  or  	23	None	replace
646	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
647	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i,  elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i,  elem);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
648	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  i);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
649	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.toString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.toString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.toString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
650	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
651	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString(),  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
652	[BUG]  [BUGGY]  error(FIELD_NAME,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  TEXT_OUT_OF_RANGE);	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
653	[BUG]  [BUGGY]  Error(TEXT_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(TEXT_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(TEXT_OUT_OF_RANGE,  left);	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
654	[BUG]  [BUGGY]  error(left,  right,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
655	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
656	[BUG]  [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
657	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  i  +  1,  right);	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
658	[BUG]  [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(LEFT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
659	[BUG]  [BUGGY]  error(LEFT,  left,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT,  left,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT,  left,  NEGATING_A_NON_NUMBER_ERROR);	  error(LEFT,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	2	None	replace
660	[BUG]  [BUGGY]  errors(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(left,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	102	None	replace
661	[BUG]  [BUGGY]  error(RIGHT,  left);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	102	None	replace
662	[BUG]  [BUGGY]  error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
663	[BUG]  [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  right);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
664	[BUG]  [BUGGY]  error(IDebugLogConstants.FIELD_NAME,  left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.FIELD_NAME,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.FIELD_NAME,  left,  right);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
665	[BUG]  [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
666	[BUG]  [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
667	[BUG]  [BUGGY]  Fehler(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Fehler(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Fehler(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
668	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(parent,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.replaceChild(parent,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.replaceChild(parent,  right);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
669	[BUG]  [BUGGY]  Node  n  =  left.removeChild(left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.removeChild(left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.removeChild(left);	  Node    n    =    left.removeChild(right);    	non-compiled	[CE]  case,  default,  or  	121	None	replace
670	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_RANGE,  left,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	125	None	replace
671	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	125	None	replace
672	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  elem);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	125	None	replace
673	[BUG]  [BUGGY]  error(left,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
674	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  left,  n);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
675	[BUG]  [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	errors(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
676	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
677	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
678	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND,  right);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
679	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
680	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  RIGHT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
681	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
682	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  left,  elem);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
683	[BUG]  [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.NEGATING_A_NON_NUMBER_ERROR,  left);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	87	None	replace
684	[BUG]  [BUGGY]  Node  elem  =  left.removeChild(right);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  elem  =  left.removeChild(right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  elem  =  left.removeChild(right);	  Node    elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	43	None	replace
685	[BUG]  [BUGGY]  n  =  left.removeChild(right);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.removeChild(right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.removeChild(right);	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	41	None	replace
686	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
687	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.toString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.toString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.toString());	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
688	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  elem);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
689	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left.getString());    	non-compiled	[CE]  case,  default,  or  	84	None	replace
690	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i++);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  n,  i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
691	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex++);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.itemIndex++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
692	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	97	None	replace
693	[BUG]  [BUGGY]  error(FIELD_OUT_OF_RANGE,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_RANGE,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_RANGE,  i);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	120	None	replace
694	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1,  right);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  1,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
695	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  2);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  2);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  i  +  2);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
696	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
697	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  NEGATING_A_NON_NUMBER_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
698	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
699	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  MAX_FOLD_NUMBER_ERROR);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left);    	non-compiled	[CE]  case,  default,  or  	103	None	replace
700	[BUG]  [BUGGY]  error(left,  right,  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  right,  n);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
701	[BUG]  [BUGGY]  error(Math.abs(i),  left,  right);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Math.abs(i),  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Math.abs(i),  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
702	[BUG]  [BUGGY]  error(NodeUtil.newUndefinedNode(n,  left,  right));  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NodeUtil.newUndefinedNode(n,  left,  right));  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NodeUtil.newUndefinedNode(n,  left,  right));	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
703	[BUG]  [BUGGY]  error(NodeUtil.newNumber(left,  right),  left);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NodeUtil.newNumber(left,  right),  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NodeUtil.newNumber(left,  right),  left);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
704	[BUG]  [BUGGY]  error(NodeUtil.newNumber(left),  left,  right);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NodeUtil.newNumber(left),  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NodeUtil.newNumber(left),  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
705	[BUG]  [BUGGY]  error(FIELD_OUT_OF_RANGE,  left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_RANGE,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_RANGE,  left);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
706	[BUG]  [BUGGY]  error(left,  FIELD_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  FIELD_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  FIELD_OUT_OF_BOUNDS);	  error(FIELD_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	123	None	replace
707	[BUG]  [BUGGY]  error(left.getString(),  INDEX_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_GETELEM_INDEX_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
708	[BUG]  [BUGGY]  error(left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  DEFAULT_GETELEM_INDEX_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
709	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_RANGE);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
710	[BUG]  [BUGGY]  Error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(left.getString(),  NEGATING_A_NON_NUMBER_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
711	[BUG]  [BUGGY]  error(left.getString(),  FRACTIONAL_BITWISE_OPERAND);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  FRACTIONAL_BITWISE_OPERAND);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
712	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	37	None	replace
713	[BUG]  [BUGGY]  Node  n  =  left.getPreviousChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Node  n  =  left.getPreviousChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Node  n  =  left.getPreviousChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	37	None	replace
714	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  i);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
715	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  n);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
716	[BUG]  [BUGGY]  error(LEFT_GETELEM_INDEX_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_GETELEM_INDEX_ERROR,  left,  right);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
717	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  RIGHT);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ERROR,  RIGHT);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ERROR,  RIGHT);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	95	None	replace
718	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  MAX_FOLD_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	95	None	replace
719	[BUG]  [BUGGY]  error(RIGHT,  left,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left,  NEGATING_A_NON_NUMBER_ERROR);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	95	None	replace
720	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left,  i);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	95	None	replace
721	[BUG]  [BUGGY]  error(left,  left.getString(),  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  left.getString(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  left.getString(),  n);	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
722	[BUG]  [BUGGY]  Error(left,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(left,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(left,  left.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
723	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i  +  1);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  i  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
724	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left  +  1);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
725	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  NEGATING_A_NON_NUMBER_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
726	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
727	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  i);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
728	[BUG]  [BUGGY]  error(ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(INVALID_GETELEM_INDEX_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	126	None	replace
729	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left,  n);	  error(INVALID_GETELEM_INDEX_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	126	None	replace
730	[BUG]  [BUGGY]  Error(left,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(left,  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
731	[BUG]  [BUGGY]  Augmentations.checkState(i!=  left.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Augmentations.checkState(i!=  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Augmentations.checkState(i!=  left.getFirstChild());	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
732	[BUG]  [BUGGY]  Augmentations.checkState(i!=  left.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Augmentations.checkState(i!=  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Augmentations.checkState(i!=  left.getLastChild());	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
733	[BUG]  [BUGGY]  Augmentations.checkState(i!=  left.getFirstChild(),  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Augmentations.checkState(i!=  left.getFirstChild(),  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Augmentations.checkState(i!=  left.getFirstChild(),  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
734	[BUG]  [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS_ERROR,  i);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  INDEX_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  INDEX_OUT_OF_BOUNDS_ERROR,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	61	None	replace
735	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_EX_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_EX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_EX_ERROR);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
736	[BUG]  [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ErROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  NEGATING_A_NON_NUMBER_ErROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  NEGATING_A_NON_NUMBER_ErROR);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
737	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left  +  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  left  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  left  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
738	[BUG]  [BUGGY]  error(INSTANCE_OUT_OF_BOUNDS_ERROR,  i  +  1);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INSTANCE_OUT_OF_BOUNDS_ERROR,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INSTANCE_OUT_OF_BOUNDS_ERROR,  i  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
739	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
740	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
741	[BUG]  [BUGGY]  error(RIGHT,  left.getLastChild());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
742	[BUG]  [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  LEFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  LEFT_AMOUNT_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	101	None	replace
743	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  right,  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    right,    i);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
744	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left.getString());	  error(MAX_FOLD_NUMBER_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	104	None	replace
745	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  MAX_FOLD_NUMBER_ERROR);	  error(MAX_FOLD_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	1	None	replace
746	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getLastChild());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
747	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  left.getString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	12	None	replace
748	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
749	[BUG]  [BUGGY]  error(FIELD_NAMES_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAMES_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAMES_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	65	None	replace
750	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  undefinedRight);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  left,  right,  undefinedRight);	  error(LEFT_AMOUNT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	77	None	replace
751	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right.getType());  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right.getType());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  right.getType());	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    i);    	non-compiled	[CE]  case,  default,  or  	55	None	replace
752	[BUG]  [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);	  error(RIGHT,    NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	98	None	replace
753	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(right);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
754	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(left,  right);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
755	[BUG]  [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  elem  =  NodeUtil.newUndefinedNode(right,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	elem  =  NodeUtil.newUndefinedNode(right,  right);	  elem    =    NodeUtil.newUndefinedNode(left);    	non-compiled	[CE]  case,  default,  or  	113	None	replace
756	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER,  TEXT_OUT_OF_RANGE);	  error(RIGHT,    TEXT_OUT_OF_RANGE);    	non-compiled	[CE]  case,  default,  or  	22	None	replace
757	[BUG]  [BUGGY]  error(FIELD_NAME,  TEXT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAME,  TEXT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAME,  TEXT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
758	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  TEXT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  TEXT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  TEXT_OUT_OF_RANGE);	  error(RIGHT,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	15	None	replace
759	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS,  right);	  error(INDEX_OUT_OF_BOUNDS,    right);    	non-compiled	[CE]  case,  default,  or  	105	None	replace
760	[BUG]  [BUGGY]  error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  right,  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  right,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT_AMOUNT_OUT_OF_BOUNDS,  right,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    right,    i);    	non-compiled	[CE]  case,  default,  or  	133	None	replace
761	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  INDEX_OUT_OF_RANGE);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	119	None	replace
762	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  elem,  left);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    elem);    	non-compiled	[CE]  case,  default,  or  	127	None	replace
763	[BUG]  [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  i);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INVALID_GETELEM_INDEX_ERROR,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
764	[BUG]  [BUGGY]  error(FIELD_NAMES_ERROR,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_NAMES_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_NAMES_ERROR,  i);	  error(BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	81	None	replace
765	[BUG]  [BUGGY]  error(IDebugUIPlugin.ID_UNKNOWN_EXPR_ERROR,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugUIPlugin.ID_UNKNOWN_EXPR_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugUIPlugin.ID_UNKNOWN_EXPR_ERROR,  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
766	[BUG]  [BUGGY]  error(ID_UNKNOWN_EXPR_ERROR,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_UNKNOWN_EXPR_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_UNKNOWN_EXPR_ERROR,  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
767	[BUG]  [BUGGY]  error(ID_UNKNOWN_EXPR_DESERIOR,  n);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_UNKNOWN_EXPR_DESERIOR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_UNKNOWN_EXPR_DESERIOR,  n);	  error(RIGHT,    n);    	non-compiled	[CE]  case,  default,  or  	53	None	replace
768	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  rightLiteral);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  i  +  1,  rightLiteral);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
769	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
770	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  left  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	99	None	replace
771	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);	  error(RIGHT,    LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	63	None	replace
772	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left.getString());  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  left.getString());	  error(left,    INDEX_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	111	None	replace
773	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  right);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left,  right);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left);    	non-compiled	[CE]  case,  default,  or  	135	None	replace
774	[BUG]  [BUGGY]  error(Locale.ENGLISH,  left.getString(),  i);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.ENGLISH,  left.getString(),  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.ENGLISH,  left.getString(),  i);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    i);    	non-compiled	[CE]  case,  default,  or  	46	None	replace
775	[BUG]  [BUGGY]  error(IDebugUIPlugin.ID_DEFAULT_EXPR_RESULT,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugUIPlugin.ID_DEFAULT_EXPR_RESULT,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugUIPlugin.ID_DEFAULT_EXPR_RESULT,  right);	  error(INDEX_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	88	None	replace
776	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  rightLiteral);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  rightLiteral);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	9	None	replace
777	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_RANGE,  NEGATING_A_NON_NUMBER_ERROR);	  error(INDEX_OUT_OF_RANGE,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	92	None	replace
778	[BUG]  [BUGGY]  error(right,  left.getString());  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  left.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  left.getString());	  error(left,    left.getString());    	non-compiled	[CE]  case,  default,  or  	48	None	replace
779	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right.getString());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  right.getString());	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
780	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  left,  right.getType());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  left,  right.getType());	  error(ID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	70	None	replace
781	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  rightLiteral);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  elem,  rightLiteral);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	80	None	replace
782	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  left,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
783	[BUG]  [BUGGY]  error(SWT_INVALID_GETELEM_INDEX_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(SWT_INVALID_GETELEM_INDEX_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(SWT_INVALID_GETELEM_INDEX_ERROR,  left,  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	124	None	replace
784	[BUG]  [BUGGY]  error(n,  FRACTIONAL_BITWISE_OPERAND);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  FRACTIONAL_BITWISE_OPERAND);	  error(n,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
785	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  INVALID_GETELEM_INDEX_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
786	[BUG]  [BUGGY]  n  =  left.removeChild();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  n  =  left.removeChild();  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	n  =  left.removeChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	41	None	replace
787	[BUG]  [BUGGY]  error(right,  LEFT_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(right,  LEFT_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(right,  LEFT_OUT_OF_RANGE);	  error(LEFT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	129	None	replace
788	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  n.getString());  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  n.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  n.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    n.getString());    	non-compiled	[CE]  case,  default,  or  	50	None	replace
789	[BUG]  [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(ID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
790	[BUG]  [BUGGY]  error(RIGHT,  i,  ID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  i,  ID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  i,  ID_GETELEM_INDEX_ERROR);	  error(ID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	69	None	replace
791	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS,  left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS,  left);	  error(n,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	14	None	replace
792	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS,  left,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS,  left,  i);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    left,    i);    	non-compiled	[CE]  case,  default,  or  	67	None	replace
793	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right.getType());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left,  right.getType());	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	18	None	replace
794	[BUG]  [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(NEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right);	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	7	None	replace
795	[BUG]  [BUGGY]  error(Locale.ENGLISH,  left,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.ENGLISH,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.ENGLISH,  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
796	[BUG]  [BUGGY]  error(n,  left,  right,  undefined);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(n,  left,  right,  undefined);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(n,  left,  right,  undefined);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
797	[BUG]  [BUGGY]  error(Locale.US,  n,  left,  right);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.US,  n,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.US,  n,  left,  right);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
798	[BUG]  [BUGGY]  error(Locale.US,  n,  left);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.US,  n,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.US,  n,  left);	  error(n,    left,    right);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
799	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  rightLiteral);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  rightLiteral);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
800	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  elem);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
801	[BUG]  [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	Error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  right);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
802	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
803	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getString());  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getString());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i);    	non-compiled	[CE]  case,  default,  or  	8	None	replace
804	[BUG]  [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_GETELEM_INDEX_ERROR,  NEGATING_A_NON_NUMBER_ERROR);	  error(FRACTIONAL_BITWISE_OPERAND,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	132	None	replace
805	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  right);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i  +  1,  right);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    right,    i);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
806	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right.getString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  right.getString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  right.getString());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    right.getString());    	non-compiled	[CE]  case,  default,  or  	47	None	replace
807	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
808	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  undefinedRight);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  left,  right,  undefinedRight);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  left,  right,  undefinedRight);	  error(TEXT_OUT_OF_RANGE,    left,    right);    	non-compiled	[CE]  case,  default,  or  	21	None	replace
809	[BUG]  [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  INDEX_OUT_OF_BOUNDS_ERROR,  DEFAULT_GETELEM_INDEX_ERROR);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
810	[BUG]  [BUGGY]  error(left.getString(),  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left.getString(),  right);	  error(left.getString(),    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	86	None	replace
811	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  inDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  inDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  NEGATING_A_NON_NUMBER_ERROR,  inDEX_OUT_OF_BOUNDS_ERROR);	  error(NEGATING_A_NON_NUMBER_ERROR,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	90	None	replace
812	[BUG]  [BUGGY]  error(RIGHT,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(RIGHT,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(RIGHT,  left,  LEFT_AMOUNT_OUT_OF_BOUNDS);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
813	[BUG]  [BUGGY]  error(Locale.ENGLISH,  left.getString(),  right);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(Locale.ENGLISH,  left.getString(),  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(Locale.ENGLISH,  left.getString(),  right);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString(),    right);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
814	[BUG]  [BUGGY]  error(left,  elem,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  elem,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  elem,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(left,    INDEX_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	60	None	replace
815	[BUG]  [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex  +  1);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(INDEX_OUT_OF_BOUNDS_ERROR,  intIndex  +  1);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
816	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.toString());	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	117	None	replace
817	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString()  +  1);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
818	[BUG]  [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  em);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  em);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_BOUNDS_ERROR,  left.getString(),  em);	  error(TEXT_OUT_OF_BOUNDS_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	115	None	replace
819	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_RANGE,    i);    	non-compiled	[CE]  case,  default,  or  	25	None	replace
820	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS_ERROR,  n);	  error(left,    TEXT_OUT_OF_BOUNDS_ERROR);    	non-compiled	[CE]  case,  default,  or  	44	None	replace
821	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  INDEX_OUT_OF_BOUNDS_ERROR);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
822	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  INVALID_GETELEM_INDEX_ERROR);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
823	[BUG]  [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  intIndex);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(TEXT_OUT_OF_RANGE,  i,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(TEXT_OUT_OF_RANGE,  i,  intIndex);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
824	[BUG]  [BUGGY]  error(FIELD_OUT_OF_RANGE,  i,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_RANGE,  i,  right);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_RANGE,  i,  right);	  error(TEXT_OUT_OF_RANGE,    i,    right);    	non-compiled	[CE]  case,  default,  or  	24	None	replace
825	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  elem);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS,  left.getString(),  elem);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS,    left.getString());    	non-compiled	[CE]  case,  default,  or  	116	None	replace
826	[BUG]  [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FIELD_OUT_OF_BOUNDS_ERROR,  left,  n);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left,    n);    	non-compiled	[CE]  case,  default,  or  	78	None	replace
827	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  FIELD_NAME);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  FIELD_NAME);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  FIELD_NAME);	  error(FIELD_NAME,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	91	None	replace
828	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  i,  INVALID_GETELEM_INDEX_ERROR,  left);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    i,    right);    	non-compiled	[CE]  case,  default,  or  	10	None	replace
829	[BUG]  [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_A_NON_NUMBER_ERROR,  MAX_FOLD_NUMBER_ERROR);	  error(LEFT_A_NON_NUMBER_ERROR,    NEGATING_A_NON_NUMBER_ERROR);    	non-compiled	[CE]  case,  default,  or  	94	None	replace
830	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  elem);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  elem);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  elem);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
831	[BUG]  [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.TEXT_OUT_OF_RANGE,  i  +  1);	  error(IDebugLogConstants.TEXT_OUT_OF_RANGE,    right);    	non-compiled	[CE]  case,  default,  or  	89	None	replace
832	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
833	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());	  error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	54	None	replace
834	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i++);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i++);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.i++);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
835	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getType());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getType());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left,  right.getType());	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left,    i++);    	non-compiled	[CE]  case,  default,  or  	100	None	replace
836	[BUG]  [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(MAX_FOLD_NUMBER_ERROR,  left.getLastChild());  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(MAX_FOLD_NUMBER_ERROR,  left.getLastChild());	  error(NEGATING_A_NON_NUMBER_ERROR,    left.getLastChild());    	non-compiled	[CE]  case,  default,  or  	5	None	replace
837	[BUG]  [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  INDEX_OUT_OF_RANGE);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(LEFT_AMOUNT_OUT_OF_BOUNDS,  INDEX_OUT_OF_RANGE);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(LEFT_AMOUNT_OUT_OF_BOUNDS,  INDEX_OUT_OF_RANGE);	  error(LEFT_AMOUNT_OUT_OF_BOUNDS,    i);    	non-compiled	[CE]  case,  default,  or  	64	None	replace
838	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  DEFAULT_GETELEM_INDEX_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
839	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER_ERROR);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  MAX_FOLD_NUMBER_ERROR);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    intIndex);    	non-compiled	[CE]  case,  default,  or  	59	None	replace
840	[BUG]  [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  undefined);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  undefined);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,  left,  right,  undefined);	  error(IDebugLog.INDEX_OUT_OF_BOUNDS_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	125	None	replace
841	[BUG]  [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  intIndex);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(FRACTIONAL_BITWISE_OPERAND,  intIndex);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(FRACTIONAL_BITWISE_OPERAND,  intIndex);	  error(INDEX_OUT_OF_BOUNDS_ERROR,    intIndex);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
842	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  undefined);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  undefined);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  undefined);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
843	[BUG]  [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  n);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(DEFAULT_GETELEM_INDEX_ERROR,  left,  right,  n);	  error(DEFAULT_GETELEM_INDEX_ERROR,    left,    right);    	non-compiled	[CE]  case,  default,  or  	76	None	replace
844	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  2);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  2);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  i  +  2);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    i    +    1);    	non-compiled	[CE]  case,  default,  or  	128	None	replace
845	[BUG]  [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  rightLiteral);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  rightLiteral);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,  left,  elem,  rightLiteral);	  error(IDebugLogConstants.BITWISE_OPERAND_OUT_OF_RANGE,    left,    elem);    	non-compiled	[CE]  case,  default,  or  	107	None	replace
846	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS,  i);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS,  i);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	108	None	replace
847	[BUG]  [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS,  n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(left,  TEXT_OUT_OF_BOUNDS,  n);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(left,  TEXT_OUT_OF_BOUNDS,  n);	  error(left,    TEXT_OUT_OF_BOUNDS);    	non-compiled	[CE]  case,  default,  or  	108	None	replace
848	[BUG]  [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString()  +  1);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString()  +  1);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,  left.getString()  +  1);	  error(IDebugLogConstants.INVALID_GETELEM_INDEX_ERROR,    left.getString());    	non-compiled	[CE]  case,  default,  or  	83	None	replace
849	[BUG]  [BUGGY]  error(SWT_INVALID_GETELEM_INDEX_ERROR,  i);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {      [BUGGY]  error(SWT_INVALID_GETELEM_INDEX_ERROR,  i);  [BUGGY]      return  n;  }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	error(SWT_INVALID_GETELEM_INDEX_ERROR,  i);	  error(NEGATING_A_NON_NUMBER_ERROR,    i);    	non-compiled	[CE]  case,  default,  or  	6	None	replace
