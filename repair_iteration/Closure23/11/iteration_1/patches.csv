bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  current.cloneTree();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.cloneTree();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
2	[BUG]  [BUGGY]  return  left.cloneTree();  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.cloneTree();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
3	[BUG]  [BUGGY]  return  parent.cloneTree();  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  parent.cloneTree();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
4	[BUG]  [BUGGY]  return  n.clone();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.clone();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
5	[BUG]  [BUGGY]  return  current.getLastChild();  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getLastChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
6	[BUG]  [BUGGY]  return  left.getLastChild();  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.getLastChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
7	[BUG]  [BUGGY]  return  left.getFirstChild();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.getFirstChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getFirstChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
8	[BUG]  [BUGGY]  return  current.getFirstChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getFirstChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getFirstChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
9	[BUG]  [BUGGY]  return  parent.getLastChild();  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  parent.getLastChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
10	[BUG]  [BUGGY]  return  current.getNext();  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getNext();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getNext();	  return    n.getNext();    	non-compiled	[CE]  case,  default,  or  	4	None	replace
11	[BUG]  [BUGGY]  return  current.getParent();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getParent();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getParent();	  return    n.getNext();    	non-compiled	[CE]  case,  default,  or  	4	None	replace
12	[BUG]  [BUGGY]  return  n.getNext()  +  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getNext()  +  1;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getNext()  +  1;	  return    n.getNext();    	non-compiled	[CE]  case,  default,  or  	4	None	replace
13	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  parent.getFirstChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	2	None	replace
14	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
15	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
16	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
17	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
18	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
19	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
20	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getType()  ==  Token.RETURN;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
21	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.getType()  ==  Token.RETURN;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
22	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()!=  Token.RETURN;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
23	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
24	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
25	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
26	[BUG]  [BUGGY]  return  current.removeChild(n);  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.removeChild(n);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeChild(n);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
27	[BUG]  [BUGGY]  return  left.removeChild(current);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.removeChild(current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.removeChild(current);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
28	[BUG]  [BUGGY]  parent.replaceChild(n,  elem);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  parent.replaceChild(n,  elem);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  elem);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
29	[BUG]  [BUGGY]  n.removeChild(current);  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  n.removeChild(current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(current);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
30	[BUG]  [BUGGY]  parent.replaceChild(n,  current);  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  parent.replaceChild(n,  current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  current);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
31	[BUG]  [BUGGY]  parent.removeChild(current);  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  parent.removeChild(current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.removeChild(current);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
32	[BUG]  [BUGGY]  return  left.getNext();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.getNext();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext();	  return    n.getParent();    	non-compiled	[CE]  case,  default,  or  	5	None	replace
33	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  elem);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  NodeUtil.removeChild(left,  elem);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  elem);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
34	[BUG]  [BUGGY]  n.getParent().removeChild(parent);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  n.getParent().removeChild(parent);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().removeChild(parent);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
35	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  n);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
36	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  NodeUtil.removeChild(parent,  elem);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  elem);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
37	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
38	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
39	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  left.getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
40	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
41	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getType()!=  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
42	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
43	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR;	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
44	[BUG]  [BUGGY]  return  elem.cloneTree();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem.cloneTree();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.cloneTree();	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
45	[BUG]  [BUGGY]  return  elem.removeChild(current);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem.removeChild(current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.removeChild(current);	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
46	[BUG]  [BUGGY]  return  elem.removeFirstChild();  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem.removeFirstChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.removeFirstChild();	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
47	[BUG]  [BUGGY]  return  right.getLastChild();  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  right.getLastChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
48	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  right.getType()  ==  Token.RETURN;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	6	None	replace
49	[BUG]  [BUGGY]  return  n.getParent().removeChild(current);  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getParent().removeChild(current);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().removeChild(current);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
50	[BUG]  [BUGGY]  return  n.getParent().removeChild(parent);  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getParent().removeChild(parent);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().removeChild(parent);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
51	[BUG]  [BUGGY]  return  n.getParent().removeChild(left);  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getParent().removeChild(left);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().removeChild(left);	  return    n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	11	None	replace
52	[BUG]  [BUGGY]  return  n.cloneNode();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.cloneNode();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
53	[BUG]  [BUGGY]  return  right.cloneTree();  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  right.cloneTree();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
54	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                    AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  right.getType()  ==  Token.GETELEM;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	7	None	replace
55	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT;	  return    current;    	non-compiled	[CE]  case,  default,  or  	1	None	replace
56	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  right.getFirstChild();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	2	None	replace
57	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left);  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
58	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right);  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  right);	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
59	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
60	[BUG]  [BUGGY]  elem  =  left.getNext();  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  elem  =  left.getNext();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.getNext();	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
61	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
62	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
63	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
64	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
65	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
66	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
67	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	      	non-compiled	[CE]  case,  default,  or  	8	None	replace
68	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;  [CE]  case,  default,  or  [FE]        AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
69	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;  [CE]  case,  default,  or  [FE]          AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  elem;	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
70	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;  [CE]  case,  default,  or  [FE]            AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
71	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;  [CE]  case,  default,  or  [FE]              AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  elem;	  return    elem;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
72	[BUG]  [BUGGY]  return  n.getPrevious();  [CE]  case,  default,  or  [FE]                AssertionFailedError    [CONTEXT]    Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);    [BUGGY]  return  n.getPrevious();  [BUGGY]    }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getPrevious();	  return    n.getParent();    	non-compiled	[CE]  case,  default,  or  	5	None	replace
