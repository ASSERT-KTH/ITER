bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  current.getLastChild()  +  1;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getLastChild()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getLastChild()  +  1;	  return    current.getLastChild();    	non-compiled	[CE]  case,  default,  or  	5	None	replace
2	[BUG]  [BUGGY]  return  next.cloneTree();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  next.cloneTree();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  next.cloneTree();	  return    right.cloneTree();    	non-compiled	[CE]  case,  default,  or  	53	None	replace
3	[BUG]  [BUGGY]  return  current.getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()!=  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
4	[BUG]  [BUGGY]  return  left.getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()!=  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
5	[BUG]  [BUGGY]  return  right.getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()!=  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
6	[BUG]  [BUGGY]  return  parent.getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getType()!=  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
7	[BUG]  [BUGGY]  return  n.getType()  >=  Token.RETURN;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  >=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  >=  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
8	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
9	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
10	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
11	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
12	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
13	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
14	[BUG]  [BUGGY]  return  parent.cloneTree(),  elem);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.cloneTree(),  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.cloneTree(),  elem);	  return    parent.cloneTree();    	non-compiled	[CE]  case,  default,  or  	3	None	replace
15	[BUG]  [BUGGY]  return  current.getParent().removeChild(n);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getParent().removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getParent().removeChild(n);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
16	[BUG]  [BUGGY]  return  left.getParent().removeChild(current);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getParent().removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getParent().removeChild(current);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
17	[BUG]  [BUGGY]  return  n.getNext().removeChild(current);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getNext().removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getNext().removeChild(current);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
18	[BUG]  [BUGGY]  return  left.getNext().removeChild(current);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext().removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext().removeChild(current);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
19	[BUG]  [BUGGY]  return  n.getParent().replaceChild(n,  current);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(n,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(n,  current);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  case,  default,  or  	49	None	replace
20	[BUG]  [BUGGY]  return  current.removeChild(elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.removeChild(elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeChild(elem);	  return    elem.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	45	None	replace
21	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
22	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
23	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
24	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	14	None	replace
25	[BUG]  [BUGGY]  return  elem.clone();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.clone();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.clone();	  return    elem.cloneTree();    	non-compiled	[CE]  case,  default,  or  	44	None	replace
26	[BUG]  [BUGGY]  n.getParent().removeChild(current);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().removeChild(current);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
27	[BUG]  [BUGGY]  n.removeChild(current.getFirstChild());  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(current.getFirstChild());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(current.getFirstChild());	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
28	[BUG]  [BUGGY]  n.removeChild(current.getLastChild());  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(current.getLastChild());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(current.getLastChild());	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
29	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(parent);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
30	[BUG]  [BUGGY]  n.removeChild(current.getString());  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(current.getString());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(current.getString());	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
31	[BUG]  [BUGGY]  n.removeChild(current  +  1);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(current  +  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(current  +  1);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
32	[BUG]  [BUGGY]  return  elem.getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.getType()  ==  Token.RETURN;	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
33	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getType()  ==  Token.RETURN;	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
34	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  right;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  right;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  right;	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
35	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  right;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  right;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  right;	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
36	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  n;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  n;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  n;	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
37	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left;	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
38	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
39	[BUG]  [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	70	None	replace
40	[BUG]  [BUGGY]  return  current.getType()  ==  Token.FUNCTION?  null  :  current.getLastChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.FUNCTION?  null  :  current.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.FUNCTION?  null  :  current.getLastChild();	  return    current.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	8	None	replace
41	[BUG]  [BUGGY]  parent.replaceChild(n,  elem,  left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  elem,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  elem,  left);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
42	[BUG]  [BUGGY]  parent.replaceChild(n,  elem,  current);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  elem,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  elem,  current);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
43	[BUG]  [BUGGY]  parent.replaceChild(n,  left);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  left);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
44	[BUG]  [BUGGY]  parent.replaceChild(n,  right);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  right);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
45	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
46	[BUG]  [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
47	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
48	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
49	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left;	  return    elem!=    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	71	None	replace
50	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  n;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  n;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  n;	  return    elem!=    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	71	None	replace
51	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getNext();	  return    elem!=    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	71	None	replace
52	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  left.getFirstChild();	  return    elem!=    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	71	None	replace
53	[BUG]  [BUGGY]  return  current.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
54	[BUG]  [BUGGY]  return  left.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
55	[BUG]  [BUGGY]  return  right.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
56	[BUG]  [BUGGY]  return  parent.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
57	[BUG]  [BUGGY]  return  current.getType()  >>  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  >>  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  >>  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
58	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
59	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
60	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ "));	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
61	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ "));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ "));	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
62	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ ")));  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ ")));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  &&  right.getLastChild().getString().endsWith( "__ ")||  right.getLastChild().getString().endsWith( "__ ")));	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
63	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ ")];  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ ")];  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  &&  right.getLastChild().getString().equals( "__ ")||  right.getLastChild().getString().equals( "__ ")];	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
64	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
65	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
66	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  right;	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
67	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
68	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
69	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getLastChild();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getLastChild();	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	69	None	replace
70	[BUG]  [BUGGY]  elem  =  current.getNext();  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  current.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  current.getNext();	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
71	[BUG]  [BUGGY]  elem  =  right.getNext();  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  right.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  right.getNext();	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
72	[BUG]  [BUGGY]  elem  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  left.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.getLastChild();	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
73	[BUG]  [BUGGY]  elem  =  left.getParent();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  left.getParent();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.getParent();	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
74	[BUG]  [BUGGY]  elem  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.getFirstChild();	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
75	[BUG]  [BUGGY]  elem  =  left.getNext()  +  1;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  left.getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.getNext()  +  1;	  elem    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  	60	None	replace
76	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left;	  return    elem    ==    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	68	None	replace
77	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getNext();	  return    elem    ==    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	68	None	replace
78	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  left.getFirstChild();	  return    elem    ==    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  case,  default,  or  	68	None	replace
79	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  elem);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(n,  elem);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
80	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  i);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(parent,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  i);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
81	[BUG]  [BUGGY]  NodeUtil.removeChild(current,  elem);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(current,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(current,  elem);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(right,  elem);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(right,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(right,  elem);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
83	[BUG]  [BUGGY]  return  current.getNext()  -  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getNext()  -  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getNext()  -  1;	  return    current.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
84	[BUG]  [BUGGY]  return  current.getNext()  -  intIndex;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getNext()  -  intIndex;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getNext()  -  intIndex;	  return    current.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
85	[BUG]  [BUGGY]  return  current.getNext()  +  1;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getNext()  +  1;	  return    current.getNext();    	non-compiled	[CE]  case,  default,  or  	10	None	replace
86	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
87	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
88	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
89	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
90	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
91	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
92	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  current.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  current.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  ||  current.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
93	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
94	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	38	None	replace
95	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    left.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
96	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    left.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
97	[BUG]  [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  left);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(NEGATING_A_NON_NUMBER_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
98	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  i);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
99	[BUG]  [BUGGY]  result(RETURN_INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RETURN_INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RETURN_INVALID_GETELEM_INDEX_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
100	[BUG]  [BUGGY]  result(NUMBER_IN_OF_BOUNDS_ERROR,  left);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(NUMBER_IN_OF_BOUNDS_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(NUMBER_IN_OF_BOUNDS_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
101	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
102	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
103	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
104	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
105	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  case,  default,  or  	17	None	replace
106	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  parent.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
107	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.removeFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.removeFirstChild();	  return    elem.removeFirstChild();    	non-compiled	[CE]  case,  default,  or  	46	None	replace
108	[BUG]  [BUGGY]  return  left.removeFirstChild();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.removeFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.removeFirstChild();	  return    elem.removeFirstChild();    	non-compiled	[CE]  case,  default,  or  	46	None	replace
109	[BUG]  [BUGGY]  return  current.removeFirstChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.removeFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeFirstChild();	  return    elem.removeFirstChild();    	non-compiled	[CE]  case,  default,  or  	46	None	replace
110	[BUG]  [BUGGY]  return  elem.getLastChild();  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.getLastChild();	  return    elem.removeFirstChild();    	non-compiled	[CE]  case,  default,  or  	46	None	replace
111	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
112	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
113	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getLastChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getLastChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
114	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
115	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()!=  Token.FUNCTION;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
116	[BUG]  [BUGGY]  return  current.getPrevious();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getPrevious();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getPrevious();	  return    n.getPrevious();    	non-compiled	[CE]  case,  default,  or  	72	None	replace
117	[BUG]  [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
118	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
119	[BUG]  [BUGGY]  return  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
120	[BUG]  [BUGGY]  return  n.getLastChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getLastChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getLastChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
121	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getLastChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
122	[BUG]  [BUGGY]  return  current.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
123	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
124	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.GETELEM  ||  n.getNext().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
125	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
126	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
127	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
128	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  elem.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  elem.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  ||  elem.getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
129	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
130	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
131	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  n);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(left,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
132	[BUG]  [BUGGY]  NodeUtil.removeChild(current,  n);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(current,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(current,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
133	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  left);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(parent,  n,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  n,  left);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
134	[BUG]  [BUGGY]  NodeUtil.removeChild(right,  n);  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(right,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(right,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
135	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Node  right  =  left.getFirstChild();	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
136	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Node  right  =  left.getNext();	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
137	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Context.reportCodeChange();	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
138	[BUG]  [BUGGY]  return  left.clone();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.clone();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.clone();	  return    left.cloneTree();    	non-compiled	[CE]  case,  default,  or  	2	None	replace
139	[BUG]  [BUGGY]  return  left.cloneChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneChild();	  return    left.cloneTree();    	non-compiled	[CE]  case,  default,  or  	2	None	replace
140	[BUG]  [BUGGY]  result(RIGHT,  left.getNext());  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RIGHT,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RIGHT,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
141	[BUG]  [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  left.getNext());  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(NEGATING_A_NON_NUMBER_ERROR,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
142	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
143	[BUG]  [BUGGY]  result(current,  left.getNext());  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(current,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(current,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
144	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
145	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  case,  default,  or  	59	None	replace
146	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
147	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
149	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  current);  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  current);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  current);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
152	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
153	[BUG]  [BUGGY]  return  current.cloneNode();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneNode();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  case,  default,  or  	52	None	replace
154	[BUG]  [BUGGY]  return  left.cloneNode();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneNode();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  case,  default,  or  	52	None	replace
155	[BUG]  [BUGGY]  return  parent.cloneNode();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.cloneNode();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  case,  default,  or  	52	None	replace
156	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Node  right  =  left.getLastChild();	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
157	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETELEM,  right));  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETELEM,  right));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.GETELEM,  right));	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
158	[BUG]  [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  right);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(NEGATING_A_NON_NUMBER_ERROR,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(NEGATING_A_NON_NUMBER_ERROR,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
159	[BUG]  [BUGGY]  result(RIGHT,  INDEX_OUT_OF_BOUNDS_ERROR);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RIGHT,  INDEX_OUT_OF_BOUNDS_ERROR);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RIGHT,  INDEX_OUT_OF_BOUNDS_ERROR);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
160	[BUG]  [BUGGY]  result(RETURN_INVALID_GETELEM_INDEX_ERROR,  right);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RETURN_INVALID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RETURN_INVALID_GETELEM_INDEX_ERROR,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
161	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right,  i);  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  right,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  right,  i);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
162	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  i);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  i);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  case,  default,  or  	58	None	replace
163	[BUG]  [BUGGY]  return  INVALID_GETELEM_INDEX_ERROR;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  INVALID_GETELEM_INDEX_ERROR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  INVALID_GETELEM_INDEX_ERROR;	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
164	[BUG]  [BUGGY]  return  SHIFT_AMOUNT_OUT_OF_BOUNDS;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  SHIFT_AMOUNT_OUT_OF_BOUNDS;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  SHIFT_AMOUNT_OUT_OF_BOUNDS;	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
165	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getString();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getString();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getString();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
166	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR  +  1;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR  +  1;	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
167	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.cloneTree();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.cloneTree();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR.cloneTree();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
168	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getNext();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild().getNext();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
169	[BUG]  [BUGGY]  Node  elem  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Node  elem  =  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Node  elem  =  left.getFirstChild();	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
170	[BUG]  [BUGGY]  return  left.getFirstChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getFirstChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getFirstChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
171	[BUG]  [BUGGY]  return  n.getLastChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getLastChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getLastChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
172	[BUG]  [BUGGY]  return  current.getFirstChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getFirstChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getFirstChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
173	[BUG]  [BUGGY]  return  right.getFirstChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getFirstChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getFirstChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
174	[BUG]  [BUGGY]  return  left.getLastChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getLastChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getLastChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
175	[BUG]  [BUGGY]  return  parent.getFirstChild().getType()  ==  Token.RETURN;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getFirstChild().getType()  ==  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getFirstChild().getType()  ==  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
176	[BUG]  [BUGGY]  return  current.removeChild(left);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeChild(left);	  return    left.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
177	[BUG]  [BUGGY]  result  =  left.removeChild(current);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result  =  left.removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result  =  left.removeChild(current);	  return    left.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
178	[BUG]  [BUGGY]  return  left.removeChild(current  -  1);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.removeChild(current  -  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.removeChild(current  -  1);	  return    left.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
179	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
180	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
181	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  ||  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
182	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
183	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  ||  right.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	40	None	replace
184	[BUG]  [BUGGY]  AssertionFailedError.checkState(right.getType()  ==  Token.NAME);  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  AssertionFailedError.checkState(right.getType()  ==  Token.NAME);  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	AssertionFailedError.checkState(right.getType()  ==  Token.NAME);  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
185	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
186	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  parent);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  parent);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  parent);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
187	[BUG]  [BUGGY]  return  parent.getParent().removeChild(n);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getParent().removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getParent().removeChild(n);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
188	[BUG]  [BUGGY]  return  left.getParent().removeChild(parent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getParent().removeChild(parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getParent().removeChild(parent);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
189	[BUG]  [BUGGY]  return  parent.getParent().removeChild(parent);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getParent().removeChild(parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getParent().removeChild(parent);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
190	[BUG]  [BUGGY]  return  current.getParent().removeChild(parent);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getParent().removeChild(parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getParent().removeChild(parent);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
191	[BUG]  [BUGGY]  return  left.getParent().removeChild(n);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getParent().removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getParent().removeChild(n);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
192	[BUG]  [BUGGY]  return  left.getParent().removeChild(left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getParent().removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getParent().removeChild(left);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
193	[BUG]  [BUGGY]  return  left.getNext().removeChild(n);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext().removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext().removeChild(n);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
194	[BUG]  [BUGGY]  return  left.getParent().removeChild(right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getParent().removeChild(right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getParent().removeChild(right);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  orphaned  case	51	None	replace
195	[BUG]  [BUGGY]  return  n.getParent().replaceChild(n,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(n,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(n,  right);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  orphaned  case	51	None	replace
196	[BUG]  [BUGGY]  n.getParent().removeChild(parent,  i);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().removeChild(parent,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().removeChild(parent,  i);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	34	None	replace
197	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  elem);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(parent,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(parent,  elem);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	34	None	replace
198	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(n,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(n,  right);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	34	None	replace
199	[BUG]  [BUGGY]  n.getParent().removeChild(left);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().removeChild(left);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	34	None	replace
200	[BUG]  [BUGGY]  n.getParent().removeChild(parent,  elem);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().removeChild(parent,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().removeChild(parent,  elem);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	34	None	replace
201	[BUG]  [BUGGY]  parent.replaceChild(n,  current  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  current  -  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  current  -  1);	  parent.replaceChild(n,    current);    	non-compiled	[CE]  orphaned  case	30	None	replace
202	[BUG]  [BUGGY]  parent.replaceChild(n,  current  +  1);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  current  +  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  current  +  1);	  parent.replaceChild(n,    current);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
203	[BUG]  [BUGGY]  return  n.getParent()  +  1;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
204	[BUG]  [BUGGY]  return  left.getNext()  +  1;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
205	[BUG]  [BUGGY]  return  parent.getNext()  +  1;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
206	[BUG]  [BUGGY]  return  right.getNext()  +  1;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  case,  default,  or  	12	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
210	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  right.getType();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  right.getType();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  right.getType();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  left.getFirstChild();  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
214	[BUG]  [BUGGY]  return  current.clone();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.clone();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.clone();	  return    n.clone();    	non-compiled	[CE]  case,  default,  or  	4	None	replace
215	[BUG]  [BUGGY]  return  parent.clone();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.clone();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.clone();	  return    n.clone();    	non-compiled	[CE]  case,  default,  or  	4	None	replace
216	[BUG]  [BUGGY]  return  left.removeChild(n);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.removeChild(n);	  return    current.removeChild(n);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
217	[BUG]  [BUGGY]  return  elem.getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.getType()  ==  Token.GETELEM;	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
218	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
219	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  n.getLastChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
220	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
221	[BUG]  [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent!=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
222	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
223	[BUG]  [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
224	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
225	[BUG]  [BUGGY]  Node  left  =  current.getFirstChild();  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  Node  left  =  current.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	Node  left  =  current.getFirstChild();	  return    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	7	None	replace
226	[BUG]  [BUGGY]  result  =  left.getFirstChild();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result  =  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result  =  left.getFirstChild();	  return    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  	7	None	replace
227	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
228	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
229	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild().getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
230	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
231	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
232	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
233	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
234	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
235	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.RETURN  ||  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
236	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  ||  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
237	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
238	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  right.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
239	[BUG]  [BUGGY]  return  current.getType()!=  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()!=  Token.EXPR_RESULT;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
240	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
241	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
242	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.NAME;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
243	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.VAR;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.VAR;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
244	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.EXPR_RESULT;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
245	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  elem,  current);  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(left,  elem,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  elem,  current);	  NodeUtil.removeChild(left,    elem);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
246	[BUG]  [BUGGY]  NodeUtil.removeChild(last,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(last,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(last,  elem);	  NodeUtil.removeChild(left,    elem);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
247	[BUG]  [BUGGY]  return  current.replaceChild(n,  elem);  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.replaceChild(n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.replaceChild(n,  elem);	  return    current.removeChild(n);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
248	[BUG]  [BUGGY]  return  left.replaceChild(n,  elem);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.replaceChild(n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.replaceChild(n,  elem);	  return    current.removeChild(n);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
249	[BUG]  [BUGGY]  return  current.removeChild(parent);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.removeChild(parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeChild(parent);	  return    current.removeChild(n);    	non-compiled	[CE]  case,  default,  or  	26	None	replace
250	[BUG]  [BUGGY]  elem.setType(Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem.setType(Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem.setType(Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
251	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
252	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
253	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  case,  default,  or  	62	None	replace
254	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.EXPR_RESULT;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
255	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
256	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild()!=  right;  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild()!=  right;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild()!=  right;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	55	None	replace
257	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELM  &&  n.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELM  &&  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELM  &&  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	38	None	replace
258	[BUG]  [BUGGY]  result(ID_GETELEM_INDEX_ERROR,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(ID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(ID_GETELEM_INDEX_ERROR,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	58	None	replace
259	[BUG]  [BUGGY]  result(INSTANCE_GETELEM_INDEX_ERROR,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INSTANCE_GETELEM_INDEX_ERROR,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INSTANCE_GETELEM_INDEX_ERROR,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	58	None	replace
260	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	54	None	replace
261	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().equals( "n ");  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().equals( "n ");  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  left.getLastChild().getString().equals( "n ");	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	54	None	replace
262	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  left.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	40	None	replace
263	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  right.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	40	None	replace
264	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  orphaned  case	69	None	replace
265	[BUG]  [BUGGY]  result(RIGHT,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RIGHT,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RIGHT,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	57	None	replace
266	[BUG]  [BUGGY]  result(INSTANCE_GETELEM_INDEX_ERROR,  left);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INSTANCE_GETELEM_INDEX_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INSTANCE_GETELEM_INDEX_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
267	[BUG]  [BUGGY]  result(ID_GETELEM_INDEX_ERROR,  left);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(ID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(ID_GETELEM_INDEX_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  case,  default,  or  	57	None	replace
268	[BUG]  [BUGGY]  return  elem.getNext();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.getNext();	  return    elem.cloneTree();    	non-compiled	[CE]  case,  default,  or  	44	None	replace
269	[BUG]  [BUGGY]  return  elem.cloneNode();  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.cloneNode();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.cloneNode();	  return    elem.cloneTree();    	non-compiled	[CE]  case,  default,  or  	44	None	replace
270	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  parent);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.replaceChild(n,  parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.replaceChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  case,  default,  or  	35	None	replace
271	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
272	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(right);  }  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
273	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(left);  }  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
274	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(left);  }  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
275	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(right);  }  [CE]  case,  default,  or  [FE]                                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  case,  default,  or  	67	None	replace
276	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETELEM_INDEX_ERROR));  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETELEM_INDEX_ERROR));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.GETELEM_INDEX_ERROR));	  parent.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	31	None	replace
277	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  this);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  this);	  parent.replaceChild(n,    current);    	non-compiled	[CE]  case,  default,  or  	30	None	replace
278	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
279	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    }    	non-compiled	[CE]  case,  default,  or  	16	None	replace
280	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
281	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
282	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
283	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
284	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	64	None	replace
285	[BUG]  [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
286	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
287	[BUG]  [BUGGY]  if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	15	None	replace
288	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
289	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	48	None	replace
290	[BUG]  [BUGGY]  return  left.getNext()  -  1;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext()  -  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext()  -  1;	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
291	[BUG]  [BUGGY]  return  right.getNext();  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getNext();	  return    left.getNext();    	non-compiled	[CE]  case,  default,  or  	32	None	replace
292	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
293	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	20	None	replace
294	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    left.getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	21	None	replace
295	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  elem);  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(left,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(left,  elem);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
296	[BUG]  [BUGGY]  n.getParent().replaceChild(left,  n);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(left,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(left,  n);	  n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	34	None	replace
297	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(left);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
298	[BUG]  [BUGGY]  n.replaceChild(left,  current);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.replaceChild(left,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.replaceChild(left,  current);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
299	[BUG]  [BUGGY]  n.replaceChild(left,  elem);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.replaceChild(left,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.replaceChild(left,  elem);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
300	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.removeChild(right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.removeChild(right);	  n.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	29	None	replace
301	[BUG]  [BUGGY]  parent.replaceChild(n,  0);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  0);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  0);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  case,  default,  or  	28	None	replace
302	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  current);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(left,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  current);	  NodeUtil.removeChild(left,    elem);    	non-compiled	[CE]  orphaned  case	33	None	replace
303	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  i);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(left,  i);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  i);	  NodeUtil.removeChild(left,    elem);    	non-compiled	[CE]  orphaned  case	33	None	replace
304	[BUG]  [BUGGY]  NodeUtil.removeChild(left,  elem,  right);  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(left,  elem,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(left,  elem,  right);	  NodeUtil.removeChild(left,    elem);    	non-compiled	[CE]  case,  default,  or  	33	None	replace
305	[BUG]  [BUGGY]  return  left.getType()  >>  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  >>  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  >>  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	41	None	replace
306	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
307	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
308	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
309	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
310	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETELEM)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  case,  default,  or  	61	None	replace
311	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  left.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  case,  default,  or  	24	None	replace
312	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()!=  Token.GETELEM;	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	37	None	replace
313	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
314	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(n);  }  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
315	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(n);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
316	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
317	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(old);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(old);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(old);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  case,  default,  or  	63	None	replace
318	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  case,  default,  or  	19	None	replace
319	[BUG]  [BUGGY]  return  left.getFirstChild().getType()!=  Token.RETURN;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getFirstChild().getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getFirstChild().getType()!=  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
320	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
321	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	39	None	replace
322	[BUG]  [BUGGY]  return  current.getType()  >>  Token.RETURN;  [CE]  case,  default,  or  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  >>  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  >>  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
323	[BUG]  [BUGGY]  return  left.getType()  >>  Token.RETURN;  [CE]  case,  default,  or  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  >>  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  >>  Token.RETURN;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  case,  default,  or  	22	None	replace
324	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  elem);  [CE]  case,  default,  or  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.replaceChild(n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.replaceChild(n,  elem);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  case,  default,  or  	36	None	replace
325	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
326	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
327	[BUG]  [BUGGY]  return  parent.removeChild(n);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  parent.removeChild(n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  parent.removeChild(n);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
328	[BUG]  [BUGGY]  return  n.getNext().removeChild(left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getNext().removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getNext().removeChild(left);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
329	[BUG]  [BUGGY]  return  n.getParent().replaceChild(left,  n);  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(left,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(left,  n);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
330	[BUG]  [BUGGY]  return  n.getParent().replaceChild(parent,  elem);  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(parent,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(parent,  elem);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
331	[BUG]  [BUGGY]  return  n.getParent().replaceChild(left,  elem);  [CE]  case,  default,  or  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(left,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(left,  elem);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  case,  default,  or  	50	None	replace
332	[BUG]  [BUGGY]  return  current.cloneChild();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneChild();	  return    current.cloneTree();    	non-compiled	[CE]  case,  default,  or  	1	None	replace
333	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
334	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
335	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
336	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	for(int  i  =  0;  i  <  rightIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  case,  default,  or  	65	None	replace
337	[BUG]  [BUGGY]  return  right.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
338	[BUG]  [BUGGY]  return  left.getLastChild().getType()  ==  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getLastChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getLastChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
339	[BUG]  [BUGGY]  return  left.getFirstChild().getType()!=  Token.GETELEM;  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getFirstChild().getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getFirstChild().getType()!=  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  case,  default,  or  	42	None	replace
340	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
341	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  rightIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
342	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  leftIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
343	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
344	[BUG]  [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  right.removeChild(i);  }  [CE]  case,  default,  or  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  right.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	node.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  right.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  case,  default,  or  	66	None	replace
345	[BUG]  [BUGGY]  return  left.getNext().removeChild(left);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getNext().removeChild(left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getNext().removeChild(left);	  return    n.getParent().removeChild(left);    	non-compiled	[CE]  case,  default,  or  	51	None	replace
346	[BUG]  [BUGGY]  result(right,  left.getNext());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(right,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(right,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
347	[BUG]  [BUGGY]  result(LEFT_AMOUNT_OUT_OF_RANGE,  left.getNext());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(LEFT_AMOUNT_OUT_OF_RANGE,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(LEFT_AMOUNT_OUT_OF_RANGE,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
348	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
349	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  right;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
350	[BUG]  [BUGGY]  return  elem.removeChild(current  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.removeChild(current  +  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.removeChild(current  +  1);	  return    elem.removeChild(current);    	non-compiled	[CE]  orphaned  case	45	None	replace
351	[BUG]  [BUGGY]  return  elem.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem.getFirstChild();	  return    elem.removeChild(current);    	non-compiled	[CE]  orphaned  case	45	None	replace
352	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  current;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
353	[BUG]  [BUGGY]  if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >=  intIndex)  {  return  left;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
354	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getNext();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	43	None	replace
355	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left;	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	43	None	replace
356	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	43	None	replace
357	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild();  [CE]  case,  default,  or  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getLastChild();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
358	[BUG]  [BUGGY]  return  MAX_FOLD_NUMBER_ERROR;  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  MAX_FOLD_NUMBER_ERROR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  MAX_FOLD_NUMBER_ERROR;	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  case,  default,  or  	43	None	replace
359	[BUG]  [BUGGY]  return  right.cloneTree(),  elem);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.cloneTree(),  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.cloneTree(),  elem);	  return    right.cloneTree();    	non-compiled	[CE]  case,  default,  or  	53	None	replace
360	[BUG]  [BUGGY]  return  left.replaceChild(current,  elem);  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.replaceChild(current,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.replaceChild(current,  elem);	  return    left.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
361	[BUG]  [BUGGY]  return  left.removeChild(current  +  1);  [CE]  case,  default,  or  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.removeChild(current  +  1);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.removeChild(current  +  1);	  return    left.removeChild(current);    	non-compiled	[CE]  case,  default,  or  	27	None	replace
362	[BUG]  [BUGGY]  return  n.getFirstChild().cloneTree();  [CE]  case,  default,  or  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().cloneTree();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().cloneTree();	  return    elem.cloneTree();    	non-compiled	[CE]  case,  default,  or  	44	None	replace
363	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  case,  default,  or  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  case,  default,  or  	18	None	replace
364	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	18	None	replace
365	[BUG]  [BUGGY]  if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	18	None	replace
366	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(current);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().removeChild(current);	  return    elem.removeChild(current);    	non-compiled	[CE]  orphaned  case	45	None	replace
367	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	20	None	replace
368	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	20	None	replace
369	[BUG]  [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	20	None	replace
370	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  em;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  em;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  em;	  return    elem    ==    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  orphaned  case	70	None	replace
371	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    left.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	21	None	replace
372	[BUG]  [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    left.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	21	None	replace
373	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  >  1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  >  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  >  1;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	55	None	replace
374	[BUG]  [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    current.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	55	None	replace
375	[BUG]  [BUGGY]  return  current.removeChild(current);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.removeChild(current);	  return    current.removeChild(n);    	non-compiled	[CE]  orphaned  case	26	None	replace
376	[BUG]  [BUGGY]  return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    left.cloneTree();    	non-compiled	[CE]  orphaned  case	2	None	replace
377	[BUG]  [BUGGY]  return  left.cloneTree()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneTree()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneTree()  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    left.cloneTree();    	non-compiled	[CE]  orphaned  case	2	None	replace
378	[BUG]  [BUGGY]  return  left.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    left.cloneTree();    	non-compiled	[CE]  orphaned  case	2	None	replace
379	[BUG]  [BUGGY]  return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {	  return    left.cloneTree();    	non-compiled	[CE]  orphaned  case	2	None	replace
380	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  orphaned  case	65	None	replace
381	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  orphaned  case	65	None	replace
382	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  orphaned  case	65	None	replace
383	[BUG]  [BUGGY]  return  n.getParent().replaceChild(parent,  n);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().replaceChild(parent,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().replaceChild(parent,  n);	  return    n.getParent().removeChild(current);    	non-compiled	[CE]  orphaned  case	49	None	replace
384	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  left));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  left));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  left));	  parent.replaceChild(n,    current);    	non-compiled	[CE]  orphaned  case	30	None	replace
385	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  n));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  n));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  n));	  parent.replaceChild(n,    current);    	non-compiled	[CE]  orphaned  case	30	None	replace
386	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  elem));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  elem));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT,  elem));	  parent.replaceChild(n,    current);    	non-compiled	[CE]  orphaned  case	30	None	replace
387	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.RETURN));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.RETURN));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.RETURN));	  parent.replaceChild(n,    current);    	non-compiled	[CE]  orphaned  case	30	None	replace
388	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(tokenBuffer));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(tokenBuffer));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(tokenBuffer));	  parent.removeChild(current);    	non-compiled	[CE]  orphaned  case	31	None	replace
389	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(left.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  orphaned  case	62	None	replace
390	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getLastChild())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  orphaned  case	62	None	replace
391	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  elem  =  current.getNext();  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    elem    =    current.getNext();    }    	non-compiled	[CE]  orphaned  case	62	None	replace
392	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  elem);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  elem);	  parent.replaceChild(n,    elem);    	non-compiled	[CE]  orphaned  case	28	None	replace
393	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	23	None	replace
394	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()  ==  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	23	None	replace
395	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.RETURN;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()!=  Token.RETURN;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()!=  Token.RETURN;	  return    n.getFirstChild().getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	23	None	replace
396	[BUG]  [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left.getNext());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
397	[BUG]  [BUGGY]  result(ELEMENT_OUT_OF_BOUNDS_ERROR,  left.getNext());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(ELEMENT_OUT_OF_BOUNDS_ERROR,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(ELEMENT_OUT_OF_BOUNDS_ERROR,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
398	[BUG]  [BUGGY]  result(RETURN_EXPECTED,  left.getNext());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RETURN_EXPECTED,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RETURN_EXPECTED,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
399	[BUG]  [BUGGY]  result(ERROR,  left.getNext());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(ERROR,  left.getNext());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(ERROR,  left.getNext());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
400	[BUG]  [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getParent());  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getParent());  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INDEX_OUT_OF_BOUNDS_ERROR,  left.getParent());	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    	non-compiled	[CE]  orphaned  case	59	None	replace
401	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	39	None	replace
402	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	39	None	replace
403	[BUG]  [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  left.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {	  return    left.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	39	None	replace
404	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  current);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(parent,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  current);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  orphaned  case	35	None	replace
405	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  orphaned  case	35	None	replace
406	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  elem);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.removeChild(parent,  n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.removeChild(parent,  n,  elem);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  orphaned  case	35	None	replace
407	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	38	None	replace
408	[BUG]  [BUGGY]  return  current.getChildCount()  >  1?  left.removeChild(current):  0;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getChildCount()  >  1?  left.removeChild(current):  0;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getChildCount()  >  1?  left.removeChild(current):  0;	  return    left.removeChild(current);    	non-compiled	[CE]  orphaned  case	27	None	replace
409	[BUG]  [BUGGY]  return  current.getChildCount()  >  1?  left.removeChild(current):  n;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getChildCount()  >  1?  left.removeChild(current):  n;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getChildCount()  >  1?  left.removeChild(current):  n;	  return    left.removeChild(current);    	non-compiled	[CE]  orphaned  case	27	None	replace
410	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	61	None	replace
411	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	61	None	replace
412	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	61	None	replace
413	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	61	None	replace
414	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	61	None	replace
415	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	54	None	replace
416	[BUG]  [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	54	None	replace
417	[BUG]  [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INSTANCE_OUT_OF_BOUNDS_ERROR,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	57	None	replace
418	[BUG]  [BUGGY]  result(RETURN_EXPECTED,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RETURN_EXPECTED,  left);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RETURN_EXPECTED,  left);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    left);    	non-compiled	[CE]  orphaned  case	57	None	replace
419	[BUG]  [BUGGY]  return  current.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.VAR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.VAR;	  return    current.getFirstChild();    	non-compiled	[CE]  orphaned  case	8	None	replace
420	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	64	None	replace
421	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	64	None	replace
422	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	64	None	replace
423	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getNext());  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getNext());    }    	non-compiled	[CE]  orphaned  case	64	None	replace
424	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  orphaned  case	19	None	replace
425	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  orphaned  case	19	None	replace
426	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getFirstChild());  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getFirstChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getFirstChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getFirstChild());    }    	non-compiled	[CE]  orphaned  case	19	None	replace
427	[BUG]  [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    current.cloneTree();    	non-compiled	[CE]  orphaned  case	1	None	replace
428	[BUG]  [BUGGY]  return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    current.cloneTree();    	non-compiled	[CE]  orphaned  case	1	None	replace
429	[BUG]  [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  {	  return    current.cloneTree();    	non-compiled	[CE]  orphaned  case	1	None	replace
430	[BUG]  [BUGGY]  return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree()  &&  n.getFirstChild().getNext().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))	  return    current.cloneTree();    	non-compiled	[CE]  orphaned  case	1	None	replace
431	[BUG]  [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.cloneTree()  &&  n.getLastChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "))	  return    current.cloneTree();    	non-compiled	[CE]  orphaned  case	1	None	replace
432	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getLastChild());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getLastChild());    }    	non-compiled	[CE]  orphaned  case	16	None	replace
433	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	37	None	replace
434	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	37	None	replace
435	[BUG]  [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  current.getType()  ==  Token.GETELEM  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "))  {	  return    current.getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	37	None	replace
436	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.GETELEM  ||  n.getFirstChild().getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETELEM    ||    n.getFirstChild().getType()    ==    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	40	None	replace
437	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.clone();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR.clone();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR.clone();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	43	None	replace
438	[BUG]  [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild().getNext();  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  NEGATING_A_NON_NUMBER_ERROR,  left.getFirstChild().getNext();	  return    NEGATING_A_NON_NUMBER_ERROR;    	non-compiled	[CE]  orphaned  case	43	None	replace
439	[BUG]  [BUGGY]  n.replaceChild(current,  elem);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.replaceChild(current,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.replaceChild(current,  elem);	  n.removeChild(current);    	non-compiled	[CE]  orphaned  case	29	None	replace
440	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(parent,  n);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(parent,  n);	  n.removeChild(current);    	non-compiled	[CE]  orphaned  case	29	None	replace
441	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  current);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.getParent().replaceChild(n,  current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.getParent().replaceChild(n,  current);	  n.removeChild(current);    	non-compiled	[CE]  orphaned  case	29	None	replace
442	[BUG]  [BUGGY]  n.addChildToFront(current);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  n.addChildToFront(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	n.addChildToFront(current);	  n.removeChild(current);    	non-compiled	[CE]  orphaned  case	29	None	replace
443	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getType()!=  Token.RETURN  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()!=    Token.RETURN;    	non-compiled	[CE]  orphaned  case	22	None	replace
444	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getType()!=  Token.GETELEM;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getType()!=  Token.GETELEM;	  return    n.getType()!=    Token.GETELEM;    	non-compiled	[CE]  orphaned  case	41	None	replace
445	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
446	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
447	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
448	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
449	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getNext())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getNext())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right.getNext())  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
450	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(i);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(i);    }    	non-compiled	[CE]  orphaned  case	66	None	replace
451	[BUG]  [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(INSTANCE_OUT_OF_BOUNDS_ERROR,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(INSTANCE_OUT_OF_BOUNDS_ERROR,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	58	None	replace
452	[BUG]  [BUGGY]  result(RETURN_EXPECTED,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  result(RETURN_EXPECTED,  right);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	result(RETURN_EXPECTED,  right);	  result(INDEX_OUT_OF_BOUNDS_ERROR,    right);    	non-compiled	[CE]  orphaned  case	58	None	replace
453	[BUG]  [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INVALID_GETELEM_INDEX_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;	  return    elem!=    null?    INVALID_GETELEM_INDEX_ERROR    :    elem;    	non-compiled	[CE]  orphaned  case	71	None	replace
454	[BUG]  [BUGGY]  elem  =  left.removeChild(current);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  elem  =  left.removeChild(current);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	elem  =  left.removeChild(current);	  elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	60	None	replace
455	[BUG]  [BUGGY]  return  n.getParent().removeChild(parent,  elem);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getParent().removeChild(parent,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getParent().removeChild(parent,  elem);	  return    n.getParent().removeChild(parent);    	non-compiled	[CE]  orphaned  case	50	None	replace
456	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
457	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
458	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
459	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().endsWith( "__ "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().endsWith( "__ "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getString().endsWith( "__ "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
460	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
461	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
462	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(n);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(n);    }    	non-compiled	[CE]  orphaned  case	63	None	replace
463	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getFirstChild()!=  left)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
464	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getChildCount()  >  1)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
465	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
466	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  null)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
467	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  left.getFirstChild()!=  right)  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
468	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [CE]  orphaned  case  [FE]                                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(right.getType()  ==  Token.NAME  &&  right.getString().equals( "node "))  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  left.removeChild(left);  }	  if(right.getType()    ==    Token.NAME)    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    left.removeChild(left);    }    	non-compiled	[CE]  orphaned  case	67	None	replace
469	[BUG]  [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem!=  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  NEGATING_A_NON_NUMBER_ERROR;	  return    elem!=    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  orphaned  case	69	None	replace
470	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
471	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
472	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
473	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  n.getFirstChild()  +  1;	  return    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	12	None	replace
474	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getLastChild().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	48	None	replace
475	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().endsWith( "__ ")||  n.getNext().getString().endsWith( "__ "));	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	48	None	replace
476	[BUG]  [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().equals( "string ")||  n.getLastChild().getString().equals( "string "));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().equals( "string ")||  n.getLastChild().getString().equals( "string "));  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  right.getType()  ==  Token.RETURN  &&  n.getFirstChild().getString().equals( "string ")||  n.getLastChild().getString().equals( "string "));	  return    right.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	48	None	replace
477	[BUG]  [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	return  elem  ==  null?  INDEX_OUT_OF_BOUNDS_ERROR  :  n;	  return    elem    ==    null?    INDEX_OUT_OF_BOUNDS_ERROR    :    elem;    	non-compiled	[CE]  orphaned  case	68	None	replace
478	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
479	[BUG]  [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
480	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
481	[BUG]  [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(RIGHT,  left.getString());  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(RIGHT,  left.getString());  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  ==  intIndex)  {  return  INDEX_OUT_OF_BOUNDS_ERROR;  }  else  {  error(RIGHT,  left.getString());  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    left.getString());    }    	non-compiled	[CE]  orphaned  case	17	None	replace
482	[BUG]  [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
483	[BUG]  [BUGGY]  if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	if(i  >=  intIndex)  {  return  elem;  }  else  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  }	  if(i    ==    intIndex)    {    return    elem;    }    else    {    error(INDEX_OUT_OF_BOUNDS_ERROR,    right);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
484	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  elem);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  elem);  [BUGGY]      }  if  (elem.isEmpty())  {  elem  =  NodeUtil.newUndefinedNode(elem);  }  else  {  left.removeChild(elem);  }  n.getParent().replaceChild(n,  elem);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  elem);	  NodeUtil.removeChild(parent,    elem);    	non-compiled	[CE]  orphaned  case	36	None	replace
