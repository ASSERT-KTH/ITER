bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  parent  =  left.getParent()  +  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getParent()  +  1;  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParent()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
2	[BUG]  [BUGGY]  Node  parent  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getNext()  +  1;  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getNext()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
3	[BUG]  [BUGGY]  Node  parent  =  right.getParent()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  right.getParent()  +  1;  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getParent()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
4	[BUG]  [BUGGY]  Node  parent  =  n.getNext()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  n.getNext()  +  1;  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getNext()  +  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
5	[BUG]  [BUGGY]  Node  parent  =  left.getFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getFirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
6	[BUG]  [BUGGY]  Node  parent  =  left.getLastChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getLastChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
7	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getFirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  right.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  right.getLastChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
9	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  left.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getNext();	  Node    parent    =    right.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  left.getParentNode();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getParentNode();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParentNode();	  Node    parent    =    right.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
11	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
12	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
13	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
14	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
15	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  right.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  right.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
16	[BUG]  [BUGGY]  Node  next  =  left.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  next  =  left.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
17	[BUG]  [BUGGY]  Node  parent  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.removeFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.removeFirstChild();	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
18	[BUG]  [BUGGY]  Node  parent  =  right.removeFirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  right.removeFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.removeFirstChild();	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
19	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.replaceChild(n,  right);  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  right);	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
20	[BUG]  [BUGGY]  Node  parent  =  right.getParentNode();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  right.getParentNode();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getParentNode();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  orphaned  case	8	None	replace
21	[BUG]  [BUGGY]  Node  n  =  left.getParentNode();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  left.getParentNode();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getParentNode();	  Node    parent    =    n.getParentNode();    	non-compiled	[CE]  orphaned  case	8	None	replace
22	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getParent();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getParent();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  orphaned  case	3	None	replace
23	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
25	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
26	[BUG]  [BUGGY]  Node  parent  =  left.getfirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.getfirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getfirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
27	[BUG]  [BUGGY]  Node  parent  =  right.getFirstChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  right.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getFirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
28	[BUG]  [BUGGY]  Node  current  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  current  =  n.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
29	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  right.getFirstChild();	      	non-compiled	[CE]  orphaned  case	6	None	replace
30	[BUG]  [BUGGY]  Node  current  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  current  =  left.getNext();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  Node  parent  =  n.removeLastChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  n.removeLastChild();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.removeLastChild();	  Node    parent    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  node.getParent();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  node.getParent();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  orphaned  case	3	None	replace
33	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  *  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  n.getParent()  *  1;  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getParent()  *  1;	  Node    parent    =    n.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	10	None	replace
34	[BUG]  [BUGGY]  Node  parent  =  left.cloneTree();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  parent  =  left.cloneTree();  [BUGGY]        if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.cloneTree();	  Node    parent    =    left.getNext();    	non-compiled	[CE]  orphaned  case	2	None	replace
