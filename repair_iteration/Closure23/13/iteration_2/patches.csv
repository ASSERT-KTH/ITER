bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  n.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  n.getNext();	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
2	[BUG]  [BUGGY]  Node  next  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  left.getNext()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.getNext()  -  1;	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
3	[BUG]  [BUGGY]  Node  next  =  right.getNext();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  right.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  right.getNext();	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
4	[BUG]  [BUGGY]  Node  next  =  left.getNext(),  right;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  left.getNext(),  right;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.getNext(),  right;	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
5	[BUG]  [BUGGY]  Node  next  =  left.getNext(),  right);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  left.getNext(),  right);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.getNext(),  right);	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
6	[BUG]  [BUGGY]  Node  next  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  left.getNext()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.getNext()  +  1;	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
7	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
8	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  n.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.replaceChild(left,  right);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.replaceChild(left,  right);	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  right.replaceChild(n,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.replaceChild(n,  left);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.replaceChild(n,  left);	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
11	[BUG]  [BUGGY]  Node  parent  =  n.removeChild(left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.removeChild(left);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.removeChild(left);	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
12	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  right)+  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  right)+  1;	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
13	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  right)-  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  right)-  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  right)-  1;	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
14	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.replaceChild(n,  right);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.replaceChild(n,  right);	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
15	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getLastChild();	  Node    n    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	29	None	replace
16	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  right.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  right.getLastChild();	  Node    n    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	29	None	replace
17	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getParent();	  Node    n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
18	[BUG]  [BUGGY]  Node  n  =  left.getPrevious();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getPrevious();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getPrevious();	  Node    n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
19	[BUG]  [BUGGY]  Node  n  =  right.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  right.getParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  right.getParent();	  Node    n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
20	[BUG]  [BUGGY]  Node  parent  =  n.getfirstChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getfirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getfirstChild();	  Node    parent    =    left.getfirstChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
21	[BUG]  [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getNext()  ||  left.getType()  ==  Token.FUNCTION;	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
22	[BUG]  [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.GETPROP;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getNext()  ||  left.getType()  ==  Token.GETPROP;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getNext()  ||  left.getType()  ==  Token.GETPROP;	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
23	[BUG]  [BUGGY]  Node  parent  =  right.getNext()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.getNext()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getNext()  +  1;	  Node    parent    =    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
24	[BUG]  [BUGGY]  Node  current  =  n.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  n.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  n.getNext();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
25	[BUG]  [BUGGY]  Node  current  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.getNext()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getNext()  -  1;	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
26	[BUG]  [BUGGY]  Node  current  =  left.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getLastChild();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
27	[BUG]  [BUGGY]  Node  current  =  right.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  right.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  right.getNext();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
28	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  right;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.getNext(),  right;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getNext(),  right;	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
29	[BUG]  [BUGGY]  Node  current  =  left.getParent();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.getParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getParent();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
30	[BUG]  [BUGGY]  Node  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getNext()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getNext()  +  1;	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
31	[BUG]  [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  left.getParent()  *  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getParent()  *  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParent()  *  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
33	[BUG]  [BUGGY]  Node  parent  =  left.getParent()  /  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getParent()  /  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParent()  /  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
34	[BUG]  [BUGGY]  Node  parent  =  left.getNext()  *  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getNext()  *  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getNext()  *  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
35	[BUG]  [BUGGY]  Node  parent  =  left.getNext()  /  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getNext()  /  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getNext()  /  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
36	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  /  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getParent()  /  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getParent()  /  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
37	[BUG]  [BUGGY]  Node  parent  =  right.getParent()  *  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.getParent()  *  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getParent()  *  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getNext()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getNext()  -  1;	  Node    parent    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
39	[BUG]  [BUGGY]  Node  parent  =  left.getPrevious()  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getPrevious()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getPrevious()  +  1;	  Node    parent    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
40	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
41	[BUG]  [BUGGY]  Node  right  =  left.getNext()  :  null;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext()  :  null;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getNext()  :  null;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
42	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  right;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext(),  right;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getNext(),  right;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	11	None	replace
43	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
44	[BUG]  [BUGGY]  Node  parent  =  left.removeLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.removeLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.removeLastChild();	  Node    parent    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
45	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getParent();	  Node    right    =    left.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
46	[BUG]  [BUGGY]  Node  parent  =  right.cloneTree();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.cloneTree();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.cloneTree();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
47	[BUG]  [BUGGY]  Node  parent  =  n.cloneTree();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.cloneTree();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.cloneTree();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
48	[BUG]  [BUGGY]  Node  parent  =  left.cloneParent();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.cloneParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.cloneParent();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
49	[BUG]  [BUGGY]  Node  parent  =  left.cloneChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.cloneChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.cloneChild();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
50	[BUG]  [BUGGY]  Node  parent  =  left.next();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.next();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.next();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
51	[BUG]  [BUGGY]  Node  parent  =  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.replaceChild(left,  new  Node(Token.EMPTY));	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
52	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  right));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  right));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  right));	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
53	[BUG]  [BUGGY]  Node  parent  =  right.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.replaceChild(n,  new  Node(Token.EMPTY));	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
54	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  right);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  right);	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
55	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  true));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  true));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  true));	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
56	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  n);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  n);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  n);	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
57	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.getFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.getFirstChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
58	[BUG]  [BUGGY]  Node  current  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  n.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  n.getLastChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
59	[BUG]  [BUGGY]  Node  current  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  right.getFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  right.getFirstChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
60	[BUG]  [BUGGY]  Node  right  =  left.cloneTree();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.cloneTree();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.cloneTree();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
61	[BUG]  [BUGGY]  Node  n  =  right.getParentNode();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  right.getParentNode();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  right.getParentNode();	  Node    n    =    left.getParentNode();    	non-compiled	[CE]  orphaned  case	21	None	replace
62	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getParentNode();    	non-compiled	[CE]  orphaned  case	21	None	replace
63	[BUG]  [BUGGY]  Node  n  =  left.getType()  ==  Token.FUNCTION?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getType()  ==  Token.FUNCTION?  left.getLastChild()  :  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getType()  ==  Token.FUNCTION?  left.getLastChild()  :  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
64	[BUG]  [BUGGY]  Node  n  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getType()  ==  Token.NAME?  left.getLastChild()  :  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
65	[BUG]  [BUGGY]  Node  n  =  left.getType()  ==  Token.RETURN?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getType()  ==  Token.RETURN?  left.getLastChild()  :  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getType()  ==  Token.RETURN?  left.getLastChild()  :  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	12	None	replace
66	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(left,  right).removeFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(left,  right).removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(left,  right).removeFirstChild();	  Node    parent    =    right.removeFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
67	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(left,  right);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(left,  right);	  Node    parent    =    right.removeFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
68	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(right,  new  Node(Token.EMPTY));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(right,  new  Node(Token.EMPTY));	  Node    parent    =    right.removeFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
69	[BUG]  [BUGGY]  Node  parent  =  n.getPrevious();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getPrevious();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getPrevious();	  Node    parent    =    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
70	[BUG]  [BUGGY]  Node  current  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  current  =  left.removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  current  =  left.removeFirstChild();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
71	[BUG]  [BUGGY]  Node  parent  =  left.nextChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.nextChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.nextChild();	  Node    parent    =    n.removeLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
72	[BUG]  [BUGGY]  Node  right  =  left.getParentNode();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getParentNode();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getParentNode();	  Node    parent    =    right.getParentNode();    	non-compiled	[CE]  orphaned  case	20	None	replace
73	[BUG]  [BUGGY]  Node  next  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  next  =  left.removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  next  =  left.removeFirstChild();	  Node    next    =    left.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
74	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	9	None	replace
75	[BUG]  [BUGGY]  Node  parent  =  right.replaceChild(left,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.replaceChild(left,  n);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.replaceChild(left,  n);	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
76	[BUG]  [BUGGY]  Node  parent  =  left.getParent()  -  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getParent()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParent()  -  1;	  Node    parent    =    left.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	1	None	replace
77	[BUG]  [BUGGY]  Node  parent  =  left.removeParent();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.removeParent();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.removeParent();	  Node    parent    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
78	[BUG]  [BUGGY]  Node  n  =  left,  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left,  right.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left,  right.getNext();	  Node    n    =    right.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
79	[BUG]  [BUGGY]  Node  right  =  left.getlastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getlastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.getlastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	23	None	replace
80	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  left  =  left.getNext();	  Node    parent    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
81	[BUG]  [BUGGY]  Node  right  =  n.getRight();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getRight();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.getRight();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	14	None	replace
82	[BUG]  [BUGGY]  Node  parent  =  left.cloneNode();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.cloneNode();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.cloneNode();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
83	[BUG]  [BUGGY]  Node  parent  =  left.cloneChildren();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.cloneChildren();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.cloneChildren();	  Node    parent    =    left.cloneTree();    	non-compiled	[CE]  orphaned  case	34	None	replace
84	[BUG]  [BUGGY]  Node  n  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  n  =  left.getfirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  n  =  left.getfirstChild();	  Node    n    =    right.getFirstChild();    	non-compiled	[CE]  orphaned  case	29	None	replace
85	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  false);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  false);	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
86	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  this);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  this);	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
87	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  true);  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY),  true);	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
88	[BUG]  [BUGGY]  Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left!=  null?  left.getLastChild()  :  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
89	[BUG]  [BUGGY]  Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left!=  null?  left.getFirstChild()  :  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
90	[BUG]  [BUGGY]  Node  parent  =  left.removeNext();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.removeNext();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.removeNext();	  Node    parent    =    left.removeFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
91	[BUG]  [BUGGY]  Node  parent  =  right.getParent()  /  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.getParent()  /  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getParent()  /  1;	  Node    parent    =    right.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
92	[BUG]  [BUGGY]  Node  parent  =  right.getParent()  -  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  right.getParent()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  right.getParent()  -  1;	  Node    parent    =    right.getParent()    +    1;    	non-compiled	[CE]  orphaned  case	3	None	replace
93	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  n));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  n));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.EMPTY,  n));	  Node    parent    =    left.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  orphaned  case	25	None	replace
94	[BUG]  [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.ASSIGN));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.replaceChild(n,  new  Node(Token.ASSIGN));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.replaceChild(n,  new  Node(Token.ASSIGN));	  Node    parent    =    right.removeFirstChild();    	non-compiled	[CE]  orphaned  case	18	None	replace
95	[BUG]  [BUGGY]  Node  right  =  left!=  null?  left.getNext()  :  right;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left!=  null?  left.getNext()  :  right;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left!=  null?  left.getNext()  :  right;	  Node    right    =    left.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
96	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	24	None	replace
97	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode()  +  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getParentNode()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getParentNode()  +  1;	  Node    parent    =    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
98	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getFirstChild().getNext()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getFirstChild().getNext()  +  1;	  Node    parent    =    n.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	4	None	replace
99	[BUG]  [BUGGY]  Node  parent  =  left.getParentNode()  +  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getParentNode()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getParentNode()  +  1;	  Node    parent    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
100	[BUG]  [BUGGY]  Node  parent  =  left.getFirstChild().getNext()  +  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  left.getFirstChild().getNext()  +  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  left.getFirstChild().getNext()  +  1;	  Node    parent    =    left.getNext()    +    1;    	non-compiled	[CE]  orphaned  case	2	None	replace
101	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	13	None	replace
102	[BUG]  [BUGGY]  Node  parent  =  n.replaceChild(left,  new  Node(Token.NAME,  left));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.replaceChild(left,  new  Node(Token.NAME,  left));  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.replaceChild(left,  new  Node(Token.NAME,  left));	  Node    parent    =    left.replaceChild(n,    right);    	non-compiled	[CE]  orphaned  case	19	None	replace
103	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  *  2;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getParent()  *  2;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getParent()  *  2;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
104	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  -  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  parent  =  n.getParent()  -  1;  [BUGGY]          if  (isAssignmentTarget(n))  {  return  n;  }  if  (!right.isNumber())  {    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	Node  parent  =  n.getParent()  -  1;	  Node    parent    =    n.getParent()    *    1;    	non-compiled	[CE]  orphaned  case	33	None	replace
