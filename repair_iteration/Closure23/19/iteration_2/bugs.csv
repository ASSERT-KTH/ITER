bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
2	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
3	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
4	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
5	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget "));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
6	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
7	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
8	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
9	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
10	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
11	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
12	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.NEW);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
13	[BUG]  [BUGGY]  return  super.isAssignmentTarget(n);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  super.isAssignmentTarget(n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  super.isAssignmentTarget(n);	      	non-compiled	[CE]  orphaned  case	8	None	replace
14	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
15	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	      	non-compiled	[CE]  orphaned  case	8	None	replace
16	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  orphaned  case	8	None	replace
17	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      	non-compiled	[CE]  orphaned  case	8	None	replace
18	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
19	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
20	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
21	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
22	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
23	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(parent.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(parent.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
24	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
25	[BUG]  [BUGGY]  return  n.getType()!=  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
26	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
27	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
28	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
29	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.CALL;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
30	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
31	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
32	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
33	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
35	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
36	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.RETURN;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.getType()  ==  Token.RETURN;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.getType()  ==  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
37	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.RETURN;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.RETURN;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
38	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
39	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
40	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.CALL;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.CALL;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
41	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETPROP;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getType()  ==  Token.GETPROP;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
42	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
43	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
44	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
45	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
46	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignmentTarget "));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignmentTarget "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getString().equals( "assignmentTarget "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
47	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
48	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
49	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
50	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
51	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
52	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
53	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
54	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
55	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
56	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
57	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
59	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
60	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
61	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
62	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget ")));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getLastChild().getNext().getString().equals( "assignmentTarget ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
63	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
64	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
65	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
66	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
67	[BUG]  [BUGGY]  return  n.getType()!=  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
68	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
69	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
70	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CALL;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
71	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
72	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
73	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
74	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
75	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
76	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
77	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
78	[BUG]  [BUGGY]  ||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  ||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
79	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
80	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2))  {  return  true;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  2))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
81	[BUG]  [BUGGY]  |(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  |(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	|(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
82	[BUG]  [BUGGY]  (n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  (n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_N	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
83	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
85	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
86	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
87	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
88	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
89	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
90	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
91	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
92	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
93	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  parent.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
94	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
95	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.NAME;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
96	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
97	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
98	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
99	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
100	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
101	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
102	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
103	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
104	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETELEM);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETELEM);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
105	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
106	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.ASSIGN;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.getType()  ==  Token.ASSIGN;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.getType()  ==  Token.ASSIGN;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
107	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
108	[BUG]  [BUGGY]  return  n.getType()!=  Token.ASSIGN;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.ASSIGN;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.ASSIGN;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
109	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  n.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  n.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  ||  n.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
110	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild().getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
111	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  ||  parent.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
112	[BUG]  [BUGGY]  return(parent.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(parent.getType()  ==  Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(parent.getType()  ==  Token.NAME);	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
113	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()!=  n;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
114	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.FUNCTION;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
115	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()!=  Token.NAME);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()!=  Token.NAME);	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
116	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.VAR;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
117	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.GETPROP;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild().getType()  ==  Token.GETPROP;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
118	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
120	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
121	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()!=  Token.GETELEM;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getType()!=  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getType()!=  Token.GETELEM;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
122	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
123	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.GETPROP;	      	non-compiled	[CE]  orphaned  case	8	None	replace
124	[BUG]  [BUGGY]  return  parent.isAssignmentTarget();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  parent.isAssignmentTarget();  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  parent.isAssignmentTarget();	      	non-compiled	[CE]  orphaned  case	8	None	replace
125	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
126	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.hasChildren();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.hasChildren();  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.hasChildren();	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
127	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.RETURN  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
128	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&!NodeUtil.isAssignmentOp(parent);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&!NodeUtil.isAssignmentOp(parent);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&!NodeUtil.isAssignmentOp(parent);	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
129	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()!=  n);	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
130	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getChildCount()  >  MAX_FOLD_NUMBER;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getChildCount()  >  MAX_FOLD_NUMBER;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getChildCount()  >  MAX_FOLD_NUMBER;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
131	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME)&&  parent.getFirstChild()  ==  n;	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
132	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
133	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
134	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER))  {  return  true	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
135	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
136	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  2)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  1)	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
137	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
138	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
139	[BUG]  [BUGGY]  return  n.getType()!=  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.ASSIGN  ||  parent.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
140	[BUG]  [BUGGY]  return  n!=  null  &&  n.getType()  ==  Token.ASSIGN;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n!=  null  &&  n.getType()  ==  Token.ASSIGN;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n!=  null  &&  n.getType()  ==  Token.ASSIGN;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
141	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
142	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
143	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
144	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
145	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget ")));  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
146	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
147	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()!=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
148	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_NUMBER));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
149	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  false;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
150	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT)  {  return  true;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
151	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP)  {  return  true;  }	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
152	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()!=  n;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()!=  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()!=  n;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
153	[BUG]  [BUGGY]  return  n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()!=  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
154	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  parent;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  parent;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
155	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  parent;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  parent;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
156	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
157	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.VAR  ||  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  orphaned  case	20	None	replace
158	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
159	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
160	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  parent;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  orphaned  case	17	None	replace
161	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
162	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	9	None	replace
163	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
164	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.NEW);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.NEW);    	non-compiled	[CE]  orphaned  case	14	None	replace
165	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment ")));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment ")));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment ")));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   ")));    	non-compiled	[CE]  orphaned  case	6	None	replace
166	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getNext().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
167	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget "));  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getNext().getString().equals( "assignmentTarget "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getNext().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	4	None	replace
168	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getString().equals( "assignment "));  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getString().equals( "assignment "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getLastChild().getString().equals( "assignment "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
169	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignmentTarget "));  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignmentTarget "));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getFirstChild().getString().equals( "assignmentTarget "));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getLastChild().getString().equals(   "assignment   "));    	non-compiled	[CE]  orphaned  case	2	None	replace
170	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
171	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME,  n.getFirstChild());	  return(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	18	None	replace
172	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
173	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >=  MAX_FOLD_NUMBER	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER    	non-compiled	[CE]  orphaned  case	7	None	replace
174	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	13	None	replace
175	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.GETPROP);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.GETPROP);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	10	None	replace
176	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  &&  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
177	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&!NodeUtil.isAssignmentOp(n);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&!NodeUtil.isAssignmentOp(n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  &&!NodeUtil.isAssignmentOp(n);	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
178	[BUG]  [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()!=  parent;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()!=  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.ASSIGN  &&  n.getFirstChild()!=  parent;	  return    n.getType()    ==    Token.ASSIGN;    	non-compiled	[CE]  orphaned  case	15	None	replace
179	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  >  MAX_FOLD_	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
180	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER));  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  MAX_FOLD_NUMBER));	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER));    	non-compiled	[CE]  orphaned  case	5	None	replace
181	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()  ==  parent;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()  ==  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()  ==  parent;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
182	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
183	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()!=  parent;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()!=  parent;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||  n.getFirstChild()!=  parent;	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
184	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||!NodeUtil.isAssignmentOp(n);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.RETURN  ||!NodeUtil.isAssignmentOp(n);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.RETURN  ||!NodeUtil.isAssignmentOp(n);	  return    n.getType()    ==    Token.RETURN;    	non-compiled	[CE]  orphaned  case	19	None	replace
185	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
186	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
187	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.BLOCK);	  return    true;    	non-compiled	[CE]  orphaned  case	1	None	replace
188	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
189	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  <=  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	11	None	replace
190	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  2))  {  return  true;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  2))  {  return  true;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)||(n.getType()  ==  Token.CALL  &&  n.getChildCount()  <  2))  {  return  true;	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.CALL    &&    n.getChildCount()    >    MAX_FOLD_NUMBER))    {    return    true;    	non-compiled	[CE]  orphaned  case	3	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  false;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
192	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  parent.getFirstChild()  ==  n)  {  return  false;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  parent.getFirstChild()  ==  n)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(n)&&  parent.getFirstChild()  ==  n)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  n)  {  return  false;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  n)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  n)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  parent.getFirstChild()  ==  n)  {  return  false;  }  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  parent.getFirstChild()  ==  n)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(n)||  parent.getFirstChild()  ==  n)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  true;  }  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  true;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(parent)&&  n.getFirstChild()  ==  n)  {  return  true;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  parent)  {  return  false;  }  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  parent)  {  return  false;  }  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	if(NodeUtil.isAssignmentOp(n)&&  n.getFirstChild()  ==  parent)  {  return  false;  }	      	non-compiled	[CE]  orphaned  case	8	None	replace
197	[BUG]  [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  MAX_FOLD_NUMBER)&&(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
198	[BUG]  [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return(n.getType()!=  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return(n.getType()!=  Token.NAME  &&  n.getChildCount()  >  MAX_FOLD_NUMBER)||(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  return(n.getType()    ==    Token.NAME    &&    n.getChildCount()    >    MAX_FOLD_NUMBER)||(n.getType()    ==    Token.FUNCTION    ||    n.getType()!=    Token.VAR);    	non-compiled	[CE]  orphaned  case	12	None	replace
199	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  &&  parent.getFirstChild()  ==  n;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
200	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isAssignmentTarget(Node  n)  {  Node  parent  =  n.getParent();  if  ((NodeUtil.isAssignmentOp(parent)  &&  parent.getFirstChild()  ==  n)  ||  parent.isInc()  ||  parent.isDec())  {    return  true;  }    [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeFoldConstants  [METHOD]  isAssignmentTarget  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  n  parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  orphaned  case	16	None	replace
