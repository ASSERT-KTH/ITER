bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {	  if(intIndex    <    0    ||    index!=    right.getLastChild())    {    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  index  >=  right.getLength())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  index  >=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  index  >=  right.getLength())  {	  if(intIndex    <    0    ||    index    >=    right.getLength())    {    	non-compiled	[CE]  	38	None	replace
3	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	27	None	replace
4	[BUG]  [BUGGY]  n  =  right.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  right.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  right.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	27	None	replace
5	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getParent();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getParent();	  n    =    left.getFirstChild();    	non-compiled	[CE]  	27	None	replace
6	[BUG]  [BUGGY]  if(intIndex!=  -1)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  -1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	45	None	replace
7	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  right.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  >=  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    right.getFirstChild())    {    	non-compiled	[CE]  	57	None	replace
8	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    right.getFirstChild())    {    	non-compiled	[CE]  	57	None	replace
9	[BUG]  [BUGGY]  n  =  left.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getLastChild().getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getLastChild().getNext();	  n    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	69	None	replace
10	[BUG]  [BUGGY]  n  =  right.getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  right.getFirstChild().getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  right.getFirstChild().getNext();	  n    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	69	None	replace
11	[BUG]  [BUGGY]  n  =  left.getFirstChild().getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getFirstChild().getParent();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getFirstChild().getParent();	  n    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	69	None	replace
12	[BUG]  [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getFirstChild().getNext()  +  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getFirstChild().getNext()  +  1;	  n    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	69	None	replace
13	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  <  right.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  intIndex  <  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  intIndex  <  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    <    right.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  <  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    <    right.getLastChild())    {    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  if(index  >=  0  ||  index  ==  left.getFirstChild().getIndex())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  ==  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  ==  left.getFirstChild().getIndex())  {	  if(index!=    0)    {    	non-compiled	[CE]  	56	None	replace
16	[BUG]  [BUGGY]  if(index  >=  0  ||  index  ==  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  ==  left.getLastChild())  {	  if(index!=    0)    {    	non-compiled	[CE]  	56	None	replace
17	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild().getIndex())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  left.getFirstChild().getIndex())  {	  if(index    >=    0)    {    	non-compiled	[CE]  	33	None	replace
18	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getLength())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  ==  left.getLength())  {	  if(intIndex    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	48	None	replace
19	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getLength())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  index  >=  left.getLength())  {	  if(intIndex    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	48	None	replace
20	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index!=  left.getLength())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index!=  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index!=  left.getLength())  {	  if(intIndex    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	48	None	replace
21	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getFirstChild())    {    	non-compiled	[CE]  	49	None	replace
22	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  intIndex  >=  left.getFirstChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <=  0  ||  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <=  0  ||  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getFirstChild())    {    	non-compiled	[CE]  	49	None	replace
23	[BUG]  [BUGGY]  if(index  >=  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  >=  left.getLastChild())  {	  if(index    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	21	None	replace
24	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  left.getFirstChild())  {	  if(index    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	21	None	replace
25	[BUG]  [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  if(index  >=  intIndex)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  intIndex)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  intIndex)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  if(intIndex  >=  index  +  1)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  index  +  1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  index  +  1)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  if(index  >  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
30	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  <=  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
31	[BUG]  [BUGGY]  if(intIndex  >  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  0  &&  index  <  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
32	[BUG]  [BUGGY]  if(intIndex  >  0  &&  index  <  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  0  &&  index  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  0  &&  index  <  left.getFirstChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
33	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  <=  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
34	[BUG]  [BUGGY]  if(index  >  0  &&  index  <=  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
35	[BUG]  [BUGGY]  if(index  >=  0  &&  index  <=  left.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
36	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  >  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
37	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  <  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
38	[BUG]  [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  left.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  &&  intIndex  >  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
39	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  left.getFirstChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  <  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
40	[BUG]  [BUGGY]  if(intIndex!=  0  &&  intIndex  >  left.getLastChild())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  0  &&  intIndex  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  0  &&  intIndex  >  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
41	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  left.getLastChild())  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  ==  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
42	[BUG]  [BUGGY]  if(index  ==  intIndex)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  ==  intIndex)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  ==  intIndex)  {	  if(intIndex    ==    index)    {    	non-compiled	[CE]  	15	None	replace
43	[BUG]  [BUGGY]  if(intIndex  <  index)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  index)  {	  if(intIndex    ==    index)    {    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  if(intIndex  <=  index)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <=  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <=  index)  {	  if(intIndex    ==    index)    {    	non-compiled	[CE]  	15	None	replace
45	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
46	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
47	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  n.getLastChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
48	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  n.getFirstChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
49	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  intIndex  ==  left.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <=  0  ||  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <=  0  ||  intIndex  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    ==    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
50	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getFirstChild().getIndex())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  right.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  right.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
51	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild().getIndex())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  right.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
52	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  left.getFirstChild().getIndex())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >  left.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
53	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild().getIndex())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  right.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild().getIndex())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  right.getLastChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
55	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild().getIndex())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  >=  right.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
56	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  right.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  intIndex  ==  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getFirstChild())    {    	non-compiled	[CE]  	66	None	replace
57	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >  right.getFirstChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  >  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getFirstChild())    {    	non-compiled	[CE]  	66	None	replace
58	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  left.getLength())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  left.getLength())  {	  if(index    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	47	None	replace
59	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  left.getLength())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  left.getLength())  {	  if(index    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	47	None	replace
60	[BUG]  [BUGGY]  if(index  >=  0  ||  index  >=  left.getLength())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  >=  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  >=  left.getLength())  {	  if(index    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  	47	None	replace
61	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  >  right.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  right.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  &&  intIndex  >  right.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
63	[BUG]  [BUGGY]  if(intIndex!=  0  &&  intIndex  >  right.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  0  &&  intIndex  >  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  0  &&  intIndex  >  right.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  right.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  ==  right.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  right.getFirstChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  <  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  <  right.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
66	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  right.getFirstChild())  {	  if(index    <    0    ||    index    >    right.getFirstChild())    {    	non-compiled	[CE]  	68	None	replace
67	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  right.getFirstChild())  {	  if(index    <    0    ||    index    >    right.getFirstChild())    {    	non-compiled	[CE]  	68	None	replace
68	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {	  if(intIndex    <    0    ||    index!=    left.getLastChild())    {    	non-compiled	[CE]  	23	None	replace
69	[BUG]  [BUGGY]  int  parentIndex  =  left.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getNext();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
70	[BUG]  [BUGGY]  int  parentIndex  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getLastChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
71	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getParent()  -  1;	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
72	[BUG]  [BUGGY]  int  parentIndex  =  right.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  right.getNext();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
73	[BUG]  [BUGGY]  int  parentIndex  =  left.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getFirstChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
74	[BUG]  [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
75	[BUG]  [BUGGY]  if(index!=  intIndex)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index!=  intIndex)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index!=  intIndex)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
76	[BUG]  [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex!=  index)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex!=  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex!=  index)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
77	[BUG]  [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  >=  index)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
78	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  right.getLength())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  right.getLength())  {	  if(index    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	41	None	replace
79	[BUG]  [BUGGY]  if(left  <  0  ||  index  >=  right.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(left  <  0  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(left  <  0  ||  index  >=  right.getLastChild())  {	  if(left    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	55	None	replace
80	[BUG]  [BUGGY]  if(left  <  0  ||  index  >=  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(left  <  0  ||  index  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(left  <  0  ||  index  >=  left.getFirstChild())  {	  if(left    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	55	None	replace
81	[BUG]  [BUGGY]  if(n  <  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(n  <  0  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(n  <  0  ||  index  >=  left.getLastChild())  {	  if(left    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	55	None	replace
82	[BUG]  [BUGGY]  if(index  <  0  ||  index  <  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
83	[BUG]  [BUGGY]  if(index  <  0  ||  index  <  left.getFirstChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  <  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
84	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  <  left.getFirstChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  <  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
85	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLastChild())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  <  right.getLastChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
86	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  index  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >=    left.getFirstChild())    {    	non-compiled	[CE]  	53	None	replace
87	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index!=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index!=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index!=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	67	None	replace
88	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  index  >  left.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  index  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  index  >  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	67	None	replace
89	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  right.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  	32	None	replace
90	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  n.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  	32	None	replace
91	[BUG]  [BUGGY]  Node  left  =  current.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  current.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  current.getNext();	  Node    left    =    left.getNext();    	non-compiled	[CE]  	32	None	replace
92	[BUG]  [BUGGY]  Node  left  =  left.getNext()  -  1;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getNext()  -  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  left.getNext()  -  1;	  Node    left    =    left.getNext();    	non-compiled	[CE]  	32	None	replace
93	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  index  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	20	None	replace
94	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
95	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
96	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
97	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
98	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
99	[BUG]  [BUGGY]  Node  right  =  right.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  right.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  right.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
100	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  left.getFirstChild())  {	  if(index    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	65	None	replace
101	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  <  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  <  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
102	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
103	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  <  left.getFirstChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  <  left.getFirstChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
104	[BUG]  [BUGGY]  if(intIndex  <=  0  &&  intIndex  >  left.getLastChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <=  0  &&  intIndex  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <=  0  &&  intIndex  >  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
105	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  <  right.getLastChild())  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  <  right.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
106	[BUG]  [BUGGY]  if(index  ==  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  ==  0  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  ==  0  ||  index  >=  left.getLastChild())  {	  if(index    ==    0)    {    	non-compiled	[CE]  	34	None	replace
107	[BUG]  [BUGGY]  if(i  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  ==  0)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  ==  0)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
108	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.FUNCTION)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
109	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.NAME)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
110	[BUG]  [BUGGY]  if(index  >  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  	63	None	replace
111	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  	63	None	replace
112	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  	63	None	replace
113	[BUG]  [BUGGY]  if(intIndex  ==  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  	63	None	replace
114	[BUG]  [BUGGY]  if(index  >  0  &&  index  <  right.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <  right.getFirstChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  	63	None	replace
115	[BUG]  [BUGGY]  if(index  ==  -1)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  ==  -1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  ==  -1)  {	  if(intIndex    ==    -1)    {    	non-compiled	[CE]  	46	None	replace
116	[BUG]  [BUGGY]  Node  left  =  current.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  current.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  current.getFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  	31	None	replace
117	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getFirstChild().getNext())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  right.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  right.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
118	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild().getNext())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  right.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  right.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
119	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  left.getFirstChild().getNext())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >  left.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >  left.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
120	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild().getNext())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  left.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
121	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild().getNext())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  right.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  right.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
122	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild().getNext())  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  left.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
123	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild().getNext())  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  >=  right.getFirstChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  orphaned  case	36	None	replace
124	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
125	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  intIndex  >=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <=  0  ||  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <=  0  ||  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	12	None	replace
126	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  right.getLastChild())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  right.getLastChild())  {	  if(index    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
127	[BUG]  [BUGGY]  if(index  <  0  ||  index  <  right.getLastChild())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  <  right.getLastChild())  {	  if(index    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
128	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  right.getNext();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	28	None	replace
129	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	28	None	replace
130	[BUG]  [BUGGY]  n  =  left.getNext()  +  intIndex;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getNext()  +  intIndex;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getNext()  +  intIndex;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	28	None	replace
131	[BUG]  [BUGGY]  if(index  <  0  ||  index!=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index!=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index!=  left.getLastChild())  {	  if(index    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	5	None	replace
132	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  >  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
133	[BUG]  [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  &&  intIndex  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  &&  intIndex  >  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
134	[BUG]  [BUGGY]  if(intIndex!=  0  &&  intIndex  >  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  0  &&  intIndex  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  0  &&  intIndex  >  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
135	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  ==  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  ==  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	51	None	replace
136	[BUG]  [BUGGY]  if(index  >=  0  ||  index  ==  right.getLength())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  ==  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  ==  right.getLength())  {	  if(index    <    0    ||    index    ==    right.getLength())    {    	non-compiled	[CE]  orphaned  case	43	None	replace
137	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  right.getLastChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  ||  intIndex  >=  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
138	[BUG]  [BUGGY]  int  parentIndex  =  n.getParent();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getParent();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  n.getParent();	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  orphaned  case	29	None	replace
139	[BUG]  [BUGGY]  int  parentIndex  =  right.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  right.getLastChild();	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	29	None	replace
140	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  right.getParent()  -  1;	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	29	None	replace
141	[BUG]  [BUGGY]  if(index  <=  0  ||  index  >  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <=  0  ||  index  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <=  0  ||  index  >  left.getFirstChild())  {	  if(index    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	65	None	replace
142	[BUG]  [BUGGY]  if(index!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index!=  INDEX_OUT_OF_BOUNDS_ERROR)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
143	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
144	[BUG]  [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  MAX_FOLD_NUMBER)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
145	[BUG]  [BUGGY]  if(intIndex  ==  MAX_FOLD_NUMBER)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  MAX_FOLD_NUMBER)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
146	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  >=  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	12	None	replace
147	[BUG]  [BUGGY]  if(index  >=  0  ||  index  >=  right.getLength())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  >=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  >=  right.getLength())  {	  if(index    <    0    ||    index    >=    right.getLength())    {    	non-compiled	[CE]  	39	None	replace
148	[BUG]  [BUGGY]  Node  left  =  left.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  left.removeFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  left.removeFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  	31	None	replace
149	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  ==  left.getLastChild())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    index    ==    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	22	None	replace
150	[BUG]  [BUGGY]  if(index  <  0  ||  left.getFirstChild()!=  right.getLastChild())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  left.getFirstChild()!=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  left.getFirstChild()!=  right.getLastChild())  {	  if(left    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	55	None	replace
151	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  <  left.getLastChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  <  left.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	17	None	replace
152	[BUG]  [BUGGY]  int  parentIndex  =  left.getPrevious();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getPrevious();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getPrevious();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  orphaned  case	26	None	replace
153	[BUG]  [BUGGY]  n  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getfirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getfirstChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  orphaned  case	30	None	replace
154	[BUG]  [BUGGY]  if(index  >  0  &&  index  <  left.getFirstChild())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <  left.getFirstChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	64	None	replace
155	[BUG]  [BUGGY]  if(intIndex  ==  0  &&  index  <=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	64	None	replace
156	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  >=  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	49	None	replace
157	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	49	None	replace
158	[BUG]  [BUGGY]  if(index  >=  0  ||  index  ==  right.getLastChild())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  ==  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  ==  right.getLastChild())  {	  if(index    <    0    ||    index    ==    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
159	[BUG]  [BUGGY]  Node  left  =  left.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getParent();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  left.getParent();	  Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	32	None	replace
160	[BUG]  [BUGGY]  if(intIndex  <  0  &&  right.getLastChild()  >  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  right.getLastChild()  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  right.getLastChild()  >  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
161	[BUG]  [BUGGY]  if(intIndex  <  0  &&  right.getFirstChild()  >  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  right.getFirstChild()  >  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  right.getFirstChild()  >  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
162	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >=  left.getLastChild())  {	  if(intIndex    <    0    &&    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	50	None	replace
163	[BUG]  [BUGGY]  n  =  left.getNext()  +  index;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getNext()  +  index;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getNext()  +  index;	  n    =    left.getNext();    	non-compiled	[CE]  	28	None	replace
164	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  <  left.getFirstChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  <  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  <  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    <    left.getFirstChild())    {    	non-compiled	[CE]  	18	None	replace
165	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.BLOCK)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
166	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.GETPROP)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.GETPROP)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.GETPROP)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
167	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
168	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    <    left.getLastChild())    {    	non-compiled	[CE]  	25	None	replace
169	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >=  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >=    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
170	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild().getNext())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  right.getLastChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
171	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild().getNext())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  left.getLastChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
172	[BUG]  [BUGGY]  if(index  <  0  ||  intIndex  >=  right.getLength())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  intIndex  >=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  intIndex  >=  right.getLength())  {	  if(intIndex    <    0    ||    index!=    right.getLength())    {    	non-compiled	[CE]  	42	None	replace
173	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index!=  right.getLength())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index!=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index!=  right.getLength())  {	  if(intIndex    <    0    ||    index!=    right.getLength())    {    	non-compiled	[CE]  	42	None	replace
174	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild().getIndex())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  left.getLastChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
175	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild().getIndex())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  ==  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  ==  left.getFirstChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
176	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	20	None	replace
177	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	67	None	replace
178	[BUG]  [BUGGY]  n  =  left.getFirstChild().getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.getFirstChild().getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.getFirstChild().getLastChild();	  n    =    left.getFirstChild().getNext();    	non-compiled	[CE]  	69	None	replace
179	[BUG]  [BUGGY]  if(intIndex  ==  0  ||  intIndex  ==  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  ||  intIndex  ==  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  ||  intIndex  ==  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    ==    right.getLastChild())    {    	non-compiled	[CE]  	9	None	replace
180	[BUG]  [BUGGY]  if(index  >=  -1)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  -1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	45	None	replace
181	[BUG]  [BUGGY]  if(intIndex  >  -1)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  -1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	45	None	replace
182	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >=    left.getFirstChild())    {    	non-compiled	[CE]  	53	None	replace
183	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getFirstChild())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >=    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
184	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getLeastChild())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >=  left.getLeastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >=  left.getLeastChild())  {	  if(intIndex    <    0    ||    index    >=    left.getFirstChild())    {    	non-compiled	[CE]  orphaned  case	53	None	replace
185	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  ==  left.getLastChild())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  intIndex  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    ==    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
186	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  intIndex  ==  left.getLastChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  intIndex  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    ==    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	16	None	replace
187	[BUG]  [BUGGY]  if(index  >=  0  ||  index  >=  right.getLastChild())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  >=  right.getLastChild())  {	  if(index    <    0    ||    index    >=    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
188	[BUG]  [BUGGY]  if(intIndex  >=  MAX_FOLD_NUMBER)  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  MAX_FOLD_NUMBER)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
189	[BUG]  [BUGGY]  if(intIndex  >  index)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  index)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
190	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  right.getLength())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >=  right.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >=  right.getLength())  {	  if(intIndex    <    0    ||    index    >=    right.getLength())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
191	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index!=  right.getLastChild())  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index!=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index!=  right.getLastChild())  {	  if(intIndex    <    0    ||    index!=    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	7	None	replace
192	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLength())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLength())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  >=  left.getLength())  {	  if(intIndex    <    0    ||    index    >=    left.getLength())    {    	non-compiled	[CE]  orphaned  case	48	None	replace
193	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index!=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index!=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index!=  left.getLastChild())  {	  if(intIndex    <    0    ||    index!=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
194	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index!=  left.getLastChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  0  &&  index!=  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  0  &&  index!=  left.getLastChild())  {	  if(intIndex    <    0    ||    index!=    left.getLastChild())    {    	non-compiled	[CE]  orphaned  case	23	None	replace
195	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  ==  right.getLastChild())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  &&  index  ==  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  &&  index  ==  right.getLastChild())  {	  if(intIndex    <    0    ||    index    ==    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
196	[BUG]  [BUGGY]  if(index  >=  0  &&  index  <  right.getLastChild())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0    &&    index    <    right.getLastChild())    {    	non-compiled	[CE]  orphaned  case	63	None	replace
197	[BUG]  [BUGGY]  if(intIndex  <  -1)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  -1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  -1)  {	  if(intIndex    ==    -1)    {    	non-compiled	[CE]  orphaned  case	46	None	replace
198	[BUG]  [BUGGY]  if(index  >=  0  ||  index  >=  left.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  0  ||  index  >=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  0  ||  index  >=  left.getFirstChild())  {	  if(index    <    0    ||    index    >=    left.getFirstChild())    {    	non-compiled	[CE]  	54	None	replace
199	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	n  =  left.removeFirstChild();	  n    =    left.getLastChild();    	non-compiled	[CE]  	30	None	replace
200	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild().getNext())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild().getNext())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >  right.getLastChild().getNext())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getNext())    {    	non-compiled	[CE]  	36	None	replace
201	[BUG]  [BUGGY]  Node  left  =  this.left.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  this.left.getFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  this.left.getFirstChild();	  Node    left    =    left.getFirstChild();    	non-compiled	[CE]  	31	None	replace
202	[BUG]  [BUGGY]  if(index!=  0  &&  index  <=  left.getFirstChild().getIndex())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index!=  0  &&  index  <=  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index!=  0  &&  index  <=  left.getFirstChild().getIndex())  {	  if(index!=    0)    {    	non-compiled	[CE]  	56	None	replace
203	[BUG]  [BUGGY]  if(index!=  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index!=  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index!=  0  &&  index  <  right.getLastChild())  {	  if(index!=    0)    {    	non-compiled	[CE]  	56	None	replace
204	[BUG]  [BUGGY]  Node  left  =  this.left.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  this.left.getLastChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  this.left.getLastChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
205	[BUG]  [BUGGY]  Node  left  =  right.getfirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getfirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  right.getfirstChild();	  Node    left    =    left.getLastChild();    	non-compiled	[CE]  	59	None	replace
206	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.RETURN)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
207	[BUG]  [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(i  >  0  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(i  >  0  ||  left.getType()  ==  Token.VAR)  {	  if(i    >    0)    {    	non-compiled	[CE]  	58	None	replace
208	[BUG]  [BUGGY]  Node  left  =  left.getNext(),  right.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getNext(),  right.getLastChild());  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  left  =  left.getNext(),  right.getLastChild());	  Node    left    =    left.getNext();    	non-compiled	[CE]  	32	None	replace
209	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getParent()  +  1;  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	int  parentIndex  =  left.getParent()  +  1;	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	26	None	replace
210	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  left.getLength()  -  1)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >  left.getLength()  -  1)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >  left.getLength()  -  1)  {	  if(index    <    0    ||    index    >    left.getLength())    {    	non-compiled	[CE]  	44	None	replace
211	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild().getIndex())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  <  0  ||  index  >  right.getLastChild().getIndex())  {	  if(index    <    0    ||    index    >    right.getFirstChild().getIndex())    {    	non-compiled	[CE]  	35	None	replace
212	[BUG]  [BUGGY]  if(intIndex  >=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >=  INDEX_OUT_OF_BOUNDS_ERROR)  {	  if(intIndex    >=    index)    {    	non-compiled	[CE]  	14	None	replace
213	[BUG]  [BUGGY]  if(index  >  0  &&  index  <=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <=  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <=  left.getFirstChild())  {	  if(intIndex    >    0    &&    index    <=    left.getLastChild())    {    	non-compiled	[CE]  	64	None	replace
214	[BUG]  [BUGGY]  if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
215	[BUG]  [BUGGY]  if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR  ||  intIndex!=  index)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR  ||  intIndex!=  index)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex!=  INDEX_OUT_OF_BOUNDS_ERROR  ||  intIndex!=  index)  {	  if(intIndex!=    index)    {    	non-compiled	[CE]  	62	None	replace
216	[BUG]  [BUGGY]  if(intIndex  >  left.getFirstChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  left.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  left.getFirstChild())  {	  if(intIndex    >=    0    ||    intIndex    >    left.getFirstChild())    {    	non-compiled	[CE]  	51	None	replace
217	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index    >=    0)    {    	non-compiled	[CE]  	33	None	replace
218	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {	  if(index    >=    0)    {    	non-compiled	[CE]  	33	None	replace
219	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  MAX_FOLD_NUMBER)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  MAX_FOLD_NUMBER)  {	  if(index    >=    0)    {    	non-compiled	[CE]  	33	None	replace
220	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  right.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  <  0  ||  index  >  right.getFirstChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  <  0  ||  index  >  right.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getFirstChild())    {    	non-compiled	[CE]  	67	None	replace
221	[BUG]  [BUGGY]  if(intIndex  ==  0  ||  intIndex  ==  left.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  ==  0  ||  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  ==  0  ||  intIndex  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    ==    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
222	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	60	None	replace
223	[BUG]  [BUGGY]  if(intIndex  >  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(intIndex  >  right.getLastChild())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(intIndex  >  right.getLastChild())  {	  if(intIndex    >=    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	11	None	replace
224	[BUG]  [BUGGY]  if(index  >  0  &&  index  <=  left.getFirstChild().getIndex())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }      [BUGGY]  if(index  >  0  &&  index  <=  left.getFirstChild().getIndex())  {  [BUGGY]      error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	if(index  >  0  &&  index  <=  left.getFirstChild().getIndex())  {	  if(index    >    0)    {    	non-compiled	[CE]  	37	None	replace
