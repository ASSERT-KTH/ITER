bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(right.isGetElem());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(right.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.isGetElem());	  Preconditions.checkState(left.isGetElem());    	non-compiled	[CE]  orphaned  case	8	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.isGetElem());    	non-compiled	[CE]  orphaned  case	8	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetElem());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(!left.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetElem());	  Preconditions.checkState(left.isGetElem());    	non-compiled	[CE]  orphaned  case	8	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(left.isGetElem());    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(left.isGetProp());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp());	  Preconditions.checkState(left.isGetElem());    	non-compiled	[CE]  orphaned  case	8	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetObject());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.isGetObject());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetObject());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetType());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetType());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetType());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetNull());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetNull());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetNull());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetProp());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.isGetProp());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetProp());	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(!n.isGetElem());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(!n.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isGetElem());	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElement());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(left.isGetElement());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElement());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetElement());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElement());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.isGetElement());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElement());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElem());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(!right.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElem());	  Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	9	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(!n.isGetProp());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp());	  Preconditions.checkArgument(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	6	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetElement());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(!n.isGetElement());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetElement());	  Preconditions.checkArgument(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	6	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetElem());  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(!left.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetElem());	  Preconditions.checkArgument(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	6	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElem());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElem());	  Preconditions.checkArgument(left.isGetElem());    	non-compiled	[CE]  orphaned  case	5	None	replace
25	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
26	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
27	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
28	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
29	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
30	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
31	[BUG]  [BUGGY]  Node  leftLiteral  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  leftLiteral  =  n.getLastChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetProp());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp());	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isObjectLit());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.isObjectLit());	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isEmpty());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isEmpty());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isPropAccess());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isPropAccess());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isPropAccess());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isObjectLit());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  ||  left.isObjectLit());	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetObject());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetObject());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetObject());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetObject());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(left.isGetObject());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetObject());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetObject());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(!n.isGetObject());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetObject());	  Preconditions.checkArgument(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  Node  left  =  n.getParent();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getParent();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getParent();	      	non-compiled	[CE]  orphaned  case	7	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkNotNull(right.isGetElem());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkNotNull(right.isGetElem());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkNotNull(right.isGetElem());	  Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	9	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetELEM());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkState(n.isGetELEM());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetELEM());	  Preconditions.checkState(n.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	9	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetProp());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(right.isGetProp());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isGetProp());	  Preconditions.checkArgument(right.isGetElem());    	non-compiled	[CE]  orphaned  case	9	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetCondition());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGet());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGet());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGet());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetReturn());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetReturn());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetReturn());	  Preconditions.checkArgument(n.isGetObject());    	non-compiled	[CE]  orphaned  case	11	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isVarArgs());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isVarArgs());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isVarArgs());	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isUndefined());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isUndefined());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isUndefined());	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp());    	non-compiled	[CE]  orphaned  case	2	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isType());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isType());  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isType());	  Preconditions.checkArgument(left.isGetElement());    	non-compiled	[CE]  orphaned  case	10	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	3	None	replace
68	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  n.removeChild(left);  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.removeChild(left);	      	non-compiled	[CE]  orphaned  case	7	None	replace
69	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
