bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left.getString());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left.getString());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left.getString());	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetNull());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetNull());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetNull());	  Preconditions.checkArgument(n.isGetNull());    	non-compiled	[CE]  orphaned  case	8	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()!=  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.GETELEM,  right);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(!n.isGetElement());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!n.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isGetElement());	  Preconditions.checkArgument(!n.isGetElement());    	non-compiled	[CE]  orphaned  case	22	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetElement()  ||!left.isGetElement());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetElement()  ||!left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetElement()  ||!left.isGetElement());	  Preconditions.checkArgument(!n.isGetElement());    	non-compiled	[CE]  orphaned  case	22	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetElement()  &&!left.isObjectLit());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetElement()  &&!left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetElement()  &&!left.isObjectLit());	  Preconditions.checkArgument(!n.isGetElement());    	non-compiled	[CE]  orphaned  case	22	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  n);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM,  left,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	33	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	33	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.isGetElement());    	non-compiled	[CE]  orphaned  case	16	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkNotNull(left.isGetElem());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkNotNull(left.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkNotNull(left.isGetElem());	  Preconditions.checkNotNull(right.isGetElem());    	non-compiled	[CE]  orphaned  case	53	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkNotNull(n.isGetElem());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkNotNull(n.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkNotNull(n.isGetElem());	  Preconditions.checkNotNull(right.isGetElem());    	non-compiled	[CE]  orphaned  case	53	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isObjectLit());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isPropAccess());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  &&  left.isPropAccess());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isPropAccess());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  right.isPropAccess());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isPropAccess());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement()  ||  left.isPropAccess());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isPropAccess());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElement()  ||  left.isPropAccess());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetNull());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetNull());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetNull());	  Preconditions.checkState(left.isGetObject());    	non-compiled	[CE]  orphaned  case	48	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(left.isGet());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGet());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGet());	  Preconditions.checkState(left.isGetObject());    	non-compiled	[CE]  orphaned  case	48	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetIn());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetIn());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetIn());	  Preconditions.checkState(left.isGetObject());    	non-compiled	[CE]  orphaned  case	48	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetType());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetType());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetType());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetType()  ||  left.isObjectLit());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.NAME);	  Preconditions.checkArgument(left.isGetObject());    	non-compiled	[CE]  orphaned  case	47	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(!right.isGetElem());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!right.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!right.isGetElem());	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetProp());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetProp());	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(!left.isEmpty());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isEmpty());	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetProp());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetProp());	  Preconditions.checkArgument(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	23	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	23	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetElem()  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	23	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()!=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(left.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	51	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(right.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(right.isGetElem()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.isGetElem()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.isGetElem()  ||  left.isObjectLit());	  Preconditions.checkState(right.isGetElem());    	non-compiled	[CE]  orphaned  case	1	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetProp());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetProp());	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
55	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
56	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
57	[BUG]  [BUGGY]  Node  right  =  n.getLowerCase();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getLowerCase();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getLowerCase();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
58	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.isGet());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGet());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGet());	  Preconditions.checkArgument(n.isGet());    	non-compiled	[CE]  orphaned  case	60	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.isGet());    	non-compiled	[CE]  orphaned  case	60	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGet());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGet());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGet());	  Preconditions.checkArgument(n.isGet());    	non-compiled	[CE]  orphaned  case	60	None	replace
65	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
66	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  left.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	29	None	replace
67	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getNext();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  right.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	29	None	replace
68	[BUG]  [BUGGY]  Node  left  =  n.getFullName();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getFullName();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getFullName();	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	29	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	32	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	32	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	32	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	32	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isGetProp());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isGetProp());	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  >  0);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  >  0);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  >  0);	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElement()  ||  left.isGetElement());	  Preconditions.checkState(left.isGetElement());    	non-compiled	[CE]  orphaned  case	14	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(right.isGetElement());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.isGetElement());	  Preconditions.checkState(left.isGetElement());    	non-compiled	[CE]  orphaned  case	14	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetElement());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetElement());	  Preconditions.checkState(left.isGetElement());    	non-compiled	[CE]  orphaned  case	14	None	replace
84	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  left.getNext();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
85	[BUG]  [BUGGY]  Node  right  =  n.getRight();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getRight();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getRight();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
86	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(right.isGetProp());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.isGetProp());	  Preconditions.checkArgument(right.isGetProp());    	non-compiled	[CE]  orphaned  case	58	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetProp()  >  0);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.isGetProp()  >  0);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isGetProp()  >  0);	  Preconditions.checkArgument(right.isGetProp());    	non-compiled	[CE]  orphaned  case	58	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(!n.isGetProp());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!n.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isGetProp());	  Preconditions.checkState(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	13	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(!n.isObjectLit());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isObjectLit());	  Preconditions.checkState(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	13	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(!n.isGetObject());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!n.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isGetObject());	  Preconditions.checkState(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	13	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(!n.isEmpty());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!n.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!n.isEmpty());	  Preconditions.checkState(!n.isGetElem());    	non-compiled	[CE]  orphaned  case	13	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.isUndefined());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.isUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  &&  n.isUndefined());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.isUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  right.isUndefined());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.isUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetProp()  ||  n.isUndefined());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isObjectLit());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	19	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM,  right);	  Preconditions.checkArgument(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	19	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.isGetProp());    	non-compiled	[CE]  orphaned  case	11	None	replace
101	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
102	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
103	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
104	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  left.isObjectLit());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  &&  left.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.isObjectLit());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  right.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  n.isObjectLit());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  n.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetProp()  ||  left.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isObjectLit());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  right.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	38	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()!=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	38	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  n);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  left,  right);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  n);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.isVarArgs());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  &&  n.isVarArgs());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.isVarArgs());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetProp()  ||  n.isVarArgs());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isVarArgs());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.isVarArgs());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isObject());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isObject());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isNodeType());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isNodeType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isNodeType());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isGetElement());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  right.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement()  ||  left.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isGetElement());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  &&  left.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  >  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  >  ||  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  >  ||  left.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isGetElement();	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  ||!left.isGetProp());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  ||!left.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp()  ||!left.isGetProp());	  Preconditions.checkArgument(!n.isGetProp());    	non-compiled	[CE]  orphaned  case	21	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&!left.isObjectLit());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&!left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp()  &&!left.isObjectLit());	  Preconditions.checkArgument(!n.isGetProp());    	non-compiled	[CE]  orphaned  case	21	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElem()  ||  left.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  &&  left.isObjectLit());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElem()  &&  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  &&  left.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  n.isObjectLit());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElem()  ||  n.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isPropAccess());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  ||  left.isPropAccess());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  right.isObjectLit());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  right.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  ||  right.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isObjectPropAccess());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  left.isObjectPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  ||  left.isObjectPropAccess());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  right.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  right.isType());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isType());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  &&  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  &&  left.isType());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isType());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement()  ||  left.isType());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isType());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElement()  ||  left.isType());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isType()  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isType()  ||  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isType()  ||  left.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	43	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	64	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	64	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	64	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	64	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.isGetProp());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.isGetProp());	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ';'  expected	64	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  left.getType()  ==  Token.GETELEM);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  ';'  expected	52	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	52	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	52	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	52	None	replace
169	[BUG]  [BUGGY]  Node  left  =  right.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  right.getParent();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  right.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  orphaned  case	50	None	replace
170	[BUG]  [BUGGY]  Node  left  =  left.getParent();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  left.getParent();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  left.getParent();	  Node    left    =    n.getParent();    	non-compiled	[CE]  orphaned  case	50	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(right.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	57	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(right.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	57	None	replace
173	[BUG]  [BUGGY]  Node  leftLiteral  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  leftLiteral  =  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  n.getFirstChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
174	[BUG]  [BUGGY]  Node  leftLiteral  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  leftLiteral  =  left.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  left.getLastChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
175	[BUG]  [BUGGY]  Node  leftLiteral  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  leftLiteral  =  left.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  left.getFirstChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
176	[BUG]  [BUGGY]  Node  leftLiteral  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  leftLiteral  =  right.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  right.getLastChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
177	[BUG]  [BUGGY]  Node  rightLiteral  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  rightLiteral  =  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  rightLiteral  =  n.getFirstChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
178	[BUG]  [BUGGY]  Node  leftLiteral  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  leftLiteral  =  right.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  leftLiteral  =  right.getFirstChild();	  Node    leftLiteral    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	31	None	replace
179	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.removeChild(right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.removeChild(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
180	[BUG]  [BUGGY]  n.addChildToFront(right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.addChildToFront(right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.addChildToFront(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
181	[BUG]  [BUGGY]  n.replaceChild(n,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.replaceChild(n,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.replaceChild(n,  left);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
182	[BUG]  [BUGGY]  n.removeChild(left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.removeChild(left,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.removeChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
183	[BUG]  [BUGGY]  n.addChildToBack(right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.addChildToBack(right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.addChildToBack(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETPROP);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetCondition());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetCondition());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetCondition());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetCondition());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isGetCondition());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition()  ||  n.isGetCondition());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetType());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetType());	  Preconditions.checkArgument(!n.isGetObject());    	non-compiled	[CE]  orphaned  case	49	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetNull());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetNull());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetNull());	  Preconditions.checkArgument(!n.isGetObject());    	non-compiled	[CE]  orphaned  case	49	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isObject());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isObject());	  Preconditions.checkArgument(!n.isGetObject());    	non-compiled	[CE]  orphaned  case	49	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetReturn());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetReturn());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetReturn());	  Preconditions.checkArgument(n.isGetReturn());    	non-compiled	[CE]  orphaned  case	61	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  &&  left.isGetElem());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem()  &&  left.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  &&  left.isGetElem());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElem());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElem());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElem()  ||  left.isGetElem());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElem()  ||  left.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElem()  ||  left.isGetElem());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isGetElem());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElem()  ||  left.isGetElem());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElement());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  ||  left.isGetElement());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  n.isGetElem());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  n.isGetElem());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  ||  n.isGetElem());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	10	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	10	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	10	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETELEM,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETELEM,  left);	  Preconditions.checkState(n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	10	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isEmpty());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isEmpty());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(left.isEmpty());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isEmpty());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(n.isEmpty());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isEmpty());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isNull());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isNull());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isNull());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isEmpty());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isEmpty());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isEmpty()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isEmpty()  ||  left.isObjectLit());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
222	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  n.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
223	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  left.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
224	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  n.getNext();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  n.getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
225	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  left.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isGetProp());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp()  ||  left.isGetProp());	  Preconditions.checkState(left.isGetProp());    	non-compiled	[CE]  orphaned  case	5	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
233	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  left.getLastChild()  :  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
234	[BUG]  [BUGGY]  Node  right  =  n  ==  null?  left.getLastChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n  ==  null?  left.getLastChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n  ==  null?  left.getLastChild()  :  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
235	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
236	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  left.getNext()  :  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetCondition());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetCondition());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetCondition());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isGetCondition());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(right.isGetObject());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(right.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(right.isGetObject());	  Preconditions.checkState(n.isGetObject());    	non-compiled	[CE]  orphaned  case	6	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetElement());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetElement());	  Preconditions.checkArgument(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	23	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isEmpty());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isEmpty());	  Preconditions.checkArgument(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	23	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETELEM,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.GETELEM,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.GETELEM,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM,    left);    	non-compiled	[CE]  orphaned  case	35	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	52	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	19	None	replace
247	[BUG]  [BUGGY]  Node  right  =  n.getAncestor(1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getAncestor(1);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getAncestor(1);	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	30	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	55	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  >=  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  >=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  >=  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	43	None	replace
253	[BUG]  [BUGGY]  Node  left  =  n.getPrevious();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getPrevious();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getPrevious();	  Node    left    =    n.getParent();    	non-compiled	[CE]  orphaned  case	50	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.GETELEM,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.GETELEM,  n);	  Preconditions.checkState(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	2	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElement());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElem()  ||  right.isGetElement());	  Preconditions.checkArgument(left.isGetElem()    ||    left.isGetElem());    	non-compiled	[CE]  orphaned  case	24	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isEmpty());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isEmpty());	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isType());	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement()  ||  left.isObjectLit());	  Preconditions.checkArgument(n.isGetElement());    	non-compiled	[CE]  orphaned  case	15	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  >=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkArgument(left.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	51	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(right.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	57	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElement()  ||  left.isObjectLit());	  Preconditions.checkState(n.isGetElement());    	non-compiled	[CE]  orphaned  case	16	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isUndefined());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isType());    	non-compiled	[CE]  orphaned  case	66	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetReturn());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetReturn());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetReturn());	  Preconditions.checkArgument(n.isGetReturn());    	non-compiled	[CE]  orphaned  case	61	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetReturn());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetReturn());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetReturn());	  Preconditions.checkArgument(n.isGetReturn());    	non-compiled	[CE]  orphaned  case	61	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetType());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetType());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.isGetType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isGetType());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
271	[BUG]  [BUGGY]  Node  left  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n!=  null?  left.getFirstChild()  :  n.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
272	[BUG]  [BUGGY]  Node  left  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n!=  null?  left.getLastChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n!=  null?  left.getLastChild()  :  n.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetELEM());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetELEM());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetELEM());	  Preconditions.checkState(n.isGetELEM());    	non-compiled	[CE]  orphaned  case	54	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
275	[BUG]  [BUGGY]  Node  left  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n!=  null?  left.getNext()  :  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n!=  null?  left.getNext()  :  n.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetPropAccess());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isGetPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetPropAccess());	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(!left.isGetObject());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(!left.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(!left.isGetObject());	  Preconditions.checkState(!left.isGetElem());    	non-compiled	[CE]  orphaned  case	3	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  n);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkNotNull(right.isGetProp());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkNotNull(right.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkNotNull(right.isGetProp());	  Preconditions.checkArgument(right.isGetProp());    	non-compiled	[CE]  orphaned  case	58	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetNull());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetNull());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetNull());	  Preconditions.checkArgument(n.isGetNull());    	non-compiled	[CE]  orphaned  case	8	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  right.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  right.isUndefined());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isUndefined());    	non-compiled	[CE]  orphaned  case	63	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  right);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT,  right);	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetObject()  ||  left.isGetObject());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetObject()  ||  left.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetObject()  ||  left.isGetObject());	  Preconditions.checkState(left.isGetObject());    	non-compiled	[CE]  orphaned  case	48	None	replace
289	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM));  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.replaceChild(left,  new  Node(Token.GETELEM));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
290	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.replaceChild(left,  new  Node(Token.EMPTY));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
291	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM,  right));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM,  right));  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.replaceChild(left,  new  Node(Token.GETELEM,  right));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
292	[BUG]  [BUGGY]  n.addChildToFront(left);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.addChildToFront(left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.addChildToFront(left);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElem(),  left);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetElem(),  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElem(),  left);	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  ||  left.isObjectLit());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  ||  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp()  ||  left.isObjectLit());	  Preconditions.checkArgument(!n.isGetProp());    	non-compiled	[CE]  orphaned  case	21	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&  left.isObjectLit());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp()  &&  left.isObjectLit());	  Preconditions.checkArgument(!n.isGetProp());    	non-compiled	[CE]  orphaned  case	21	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkArgument(!left.isGetObject());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!left.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!left.isGetObject());	  Preconditions.checkArgument(!n.isGetObject());    	non-compiled	[CE]  orphaned  case	49	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  n.isGetElement());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  n.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  n.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  right.isGetElement());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElement()  ||  right.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElement()  ||  right.isGetElement());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  &&  left.isObjectLit());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  &&  left.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  &&  left.isObjectLit());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkNotNull(left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkNotNull(left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkNotNull(left.getType()  ==  Token.GETELEM);	  Preconditions.checkNotNull(right.isGetElem());    	non-compiled	[CE]  orphaned  case	53	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  right.isGetProp());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  right.isGetProp());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp()  ||  right.isGetProp());	  Preconditions.checkState(left.isGetProp());    	non-compiled	[CE]  orphaned  case	5	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isPropertyAccess());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isPropertyAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isPropertyAccess());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  right.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	64	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isVarArgs());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  right.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  right.isVarArgs());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isEmpty());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isEmpty());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  right.isObjectLit());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  right.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElem()  ||  right.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isPropAccess());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetElem()  ||  left.isPropAccess());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetElem()  ||  left.isPropAccess());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
315	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
316	[BUG]  [BUGGY]  Node  right  =  n.getLastChild()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n.getLastChild()  +  1;  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n.getLastChild()  +  1;	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
317	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
318	[BUG]  [BUGGY]  Node  left  =  n.cloneTree();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.cloneTree();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.cloneTree();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
319	[BUG]  [BUGGY]  Node  left  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  node.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  node.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	26	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);	  Preconditions.checkArgument(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	18	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETELEM  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	33	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isObject());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isObject());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isPropAccess());    	non-compiled	[CE]  orphaned  case	45	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty()  ||  left.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isEmpty()  ||  left.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isEmpty()  ||  left.isUndefined());	  Preconditions.checkArgument(left.isEmpty());    	non-compiled	[CE]  orphaned  case	44	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	43	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	43	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.GETELEM  ||  right.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	43	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  n.isType());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  n.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElement()  ||  n.isType());	  Preconditions.checkState(n.isGetElement());    	non-compiled	[CE]  orphaned  case	16	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  n.isVarArgs());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElement()  ||  n.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElement()  ||  n.isVarArgs());	  Preconditions.checkState(n.isGetElement());    	non-compiled	[CE]  orphaned  case	16	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isEmpty());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isEmpty());	  Preconditions.checkArgument(!n.isGetElement());    	non-compiled	[CE]  orphaned  case	22	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetCondition());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetCondition());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetCondition());	  Preconditions.checkArgument(!n.isGetElement());    	non-compiled	[CE]  orphaned  case	22	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetELEM());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetELEM());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetELEM());	  Preconditions.checkState(n.isGetELEM());    	non-compiled	[CE]  orphaned  case	54	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetELM());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetELM());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetELM());	  Preconditions.checkState(n.isGetELEM());    	non-compiled	[CE]  orphaned  case	54	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	12	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetEmpty());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetEmpty());	  Preconditions.checkArgument(left.isGetObject());    	non-compiled	[CE]  orphaned  case	47	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isVarArgs());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isVarArgs());	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetProp()  ||  left.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetProp()  ||  left.isUndefined());	  Preconditions.checkArgument(left.isGetProp());    	non-compiled	[CE]  orphaned  case	36	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  n.isType());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetElement()  ||  n.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetElement()  ||  n.isType());	  Preconditions.checkArgument(n.isGetElement());    	non-compiled	[CE]  orphaned  case	15	None	replace
338	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	25	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetProp()  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.isGetProp());    	non-compiled	[CE]  orphaned  case	11	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.GETPROP);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	65	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElement());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetElement());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElement());	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetEmpty());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetEmpty());	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!right.isGetElem()  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(!right.isGetElem());    	non-compiled	[CE]  orphaned  case	20	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isType());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp()  ||  left.isType());	  Preconditions.checkState(left.isGetProp());    	non-compiled	[CE]  orphaned  case	5	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isVarArgs());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp()  ||  left.isVarArgs());	  Preconditions.checkState(left.isGetProp());    	non-compiled	[CE]  orphaned  case	5	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isUndefined());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.isGetProp()  ||  left.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.isGetProp()  ||  left.isUndefined());	  Preconditions.checkState(left.isGetProp());    	non-compiled	[CE]  orphaned  case	5	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetObject());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.isGetElement()  ||  left.isGetObject());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.isGetElement()  ||  left.isGetObject());	  Preconditions.checkArgument(left.isGetElement()    ||    left.isGetElement());    	non-compiled	[CE]  orphaned  case	17	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isType());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  left.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  left.isType());	  Preconditions.checkArgument(n.isGetProp()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	42	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	38	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.CALL);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	4	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetEmpty());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetEmpty());	  Preconditions.checkArgument(n.isGetNull());    	non-compiled	[CE]  orphaned  case	8	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  n.isObjectLit());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkState(n.isGetElem()  ||  n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkState(n.isGetElem()  ||  n.isObjectLit());	  Preconditions.checkState(n.isGetElem()    ||    left.isObjectLit());    	non-compiled	[CE]  orphaned  case	46	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	41	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isReturnValue());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetProp()  ||  n.isReturnValue());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetProp()  ||  n.isReturnValue());	  Preconditions.checkArgument(n.isGetProp()    ||    n.isVarArgs());    	non-compiled	[CE]  orphaned  case	62	None	replace
356	[BUG]  [BUGGY]  Node  left  =  n.getOwnerFunction();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getOwnerFunction();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getOwnerFunction();	  Node    left    =    n.getParent();    	non-compiled	[CE]  orphaned  case	50	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isGetProp()  ||  right.isUndefined());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.isGetProp()  ||  right.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.isGetProp()  ||  right.isUndefined());	  Preconditions.checkArgument(right.isGetProp());    	non-compiled	[CE]  orphaned  case	58	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	39	None	replace
359	[BUG]  [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  left.getLastChild()  :  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	28	None	replace
360	[BUG]  [BUGGY]  Node  left  =  n.getAncestor(1);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  left  =  n.getAncestor(1);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  left  =  n.getAncestor(1);	  Node    left    =    n.getNext();    	non-compiled	[CE]  orphaned  case	29	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.VAR);	  Preconditions.checkArgument(right.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	57	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.NAME);	  Preconditions.checkArgument(right.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	57	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT,    left);    	non-compiled	[CE]  orphaned  case	40	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetEmpty());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetEmpty());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetEmpty());	  Preconditions.checkArgument(!n.isGetObject());    	non-compiled	[CE]  orphaned  case	49	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  n.isObjectLit());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  n.isObjectLit());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetType()  ||  n.isObjectLit());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  n.isVarArgs());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetType()  ||  n.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetType()  ||  n.isVarArgs());	  Preconditions.checkArgument(n.isGetType());    	non-compiled	[CE]  orphaned  case	7	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  left);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME,  left);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	56	None	replace
368	[BUG]  [BUGGY]  Node  right  =  n  ==  null?  left.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n  ==  null?  left.getFirstChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n  ==  null?  left.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
369	[BUG]  [BUGGY]  Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  n.getFirstChild()  :  n.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
370	[BUG]  [BUGGY]  Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Node  right  =  n!=  null?  n.getLastChild()  :  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	27	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarArgs());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarArgs());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarArgs());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isUndefined());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isUndefined());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition()  ||  n.isUndefined());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isType());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isType());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition()  ||  n.isType());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarDeclaration());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarDeclaration());  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.isGetCondition()  ||  n.isVarDeclaration());	  Preconditions.checkArgument(n.isGetCondition());    	non-compiled	[CE]  orphaned  case	59	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  left.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  left.getType()  ==  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  left.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	34	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_OBJECT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_OBJECT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_OBJECT);	  Preconditions.checkArgument(n.isGetProp()    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	64	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	9	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()!=  Token.EXPR_RESULT  ||  left.getType()!=  Token.GETELEM);	  Preconditions.checkArgument(left.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  orphaned  case	51	None	replace
379	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.EXPR_RESULT,  left));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.EXPR_RESULT,  left));  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n.replaceChild(left,  new  Node(Token.EXPR_RESULT,  left));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	68	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELM  ||  n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELM  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELM  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETELEM    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	67	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(!n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(!n.isGetProp()  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(!n.isGetProp());    	non-compiled	[CE]  orphaned  case	21	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(left.getType()  ==  Token.GETELEM  ||  left.getType()  ==  Token.SETELEM);	  Preconditions.checkArgument(left.getType()    ==    Token.GETELEM);    	non-compiled	[CE]  orphaned  case	19	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETPROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.GETPROP);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  n);  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP,  n);	  Preconditions.checkArgument(n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  orphaned  case	37	None	replace
385	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
386	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {      [BUGGY]  n  =  n.getParent();  [BUGGY]        if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	n  =  n.getParent();	  n    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	69	None	replace
