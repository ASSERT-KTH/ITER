bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  intIndex  =  index;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  intIndex  =(int)index;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =(int)index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  double  intIndex  =  0;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =  0;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  0;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  intIndex  =  index;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  int  intIndex  =(int)index  /  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(int)index  /  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  /  1;	  int    intIndex    =(int)index    -    1;    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  int  intIndex  =(int)index  -  2;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(int)index  -  2;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  -  2;	  int    intIndex    =(int)index    -    1;    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(int)index  *  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  1;	  int    intIndex    =(int)index    -    1;    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  int  intIndex  =(int)index  %  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(int)index  %  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  %  1;	  int    intIndex    =(int)index    -    1;    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?(int)index  :  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  <  0?(int)index  :  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?(int)index  :  1;	  int    intIndex    =    index    <    0?(int)index    :    0;    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  int  intIndex  =  index  >=  0?(int)index  :  0;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  >=  0?(int)index  :  0;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  >=  0?(int)index  :  0;	  int    intIndex    =    index    <    0?(int)index    :    0;    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  int  intIndex  =  index  ==  0?(int)index  :  0;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  ==  0?(int)index  :  0;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  ==  0?(int)index  :  0;	  int    intIndex    =    index    <    0?(int)index    :    0;    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  int  intIndex  =  index!=  0?(int)index  :  0;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index!=  0?(int)index  :  0;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index!=  0?(int)index  :  0;	  int    intIndex    =    index    <    0?(int)index    :    0;    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  int  intIndex  =  index  +  1;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  +  1;	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  int  intIndex  =  index  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  -  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  -  1;	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndex();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  parent.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndex();	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndex(index);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  parent.getIndex(index);  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndex(index);	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  int  intIndex  =  parent.indexOf(left);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  parent.indexOf(left);  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.indexOf(left);	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  int  intIndex  =  (int)index  +  2;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  (int)index  +  2;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  (int)index  +  2;	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  int  intIndex  =  n  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  n  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n  +  1;	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  int  intIndex  =  right.intValue();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  right.intValue();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue();	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  double  intIndex  =  n.intValue();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =  n.intValue();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.intValue();	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  int  intIndex  =  left.intValue();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  left.intValue();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue();	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  int  intIndex  =  index.intValue();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index.intValue();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index.intValue();	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  int  intIndex  =  parent.intValue();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  parent.intValue();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.intValue();	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  int  intIndex  =  n.intValue()  +  1;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  n.intValue()  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.intValue()  +  1;	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  intIndex  =  index  +  right.getIndex();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =  index  +  right.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  right.getIndex();	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  int  index  =  right.getIndex();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  index  =  right.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.getIndex();	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  double  index  =  right.getDouble();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  index  =  right.getDouble();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getDouble();	      	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  intIndex  =  n.getIndex();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =  n.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  n.getIndex();	      	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  intIndex  =  right.getIndex();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =  right.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex();	      	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  int  index  =  left.getIndex();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  index  =  left.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.getIndex();	      	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  int  intIndex  =(int)index  -  1  +  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(int)index  -  1  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  -  1  +  1;	  int    intIndex    =(int)index    -    1;    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  left.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex();	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  right.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex();	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?  0  :  index;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  <  0)?  0  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?  0  :  index;	  int    intIndex    =    0;    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  0  :  index;	  int    intIndex    =    0;    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?  0  :  index;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  >=  0)?  0  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?  0  :  index;	  int    intIndex    =    0;    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  int  intIndex  =  n.intValue()  +  index;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  n.intValue()  +  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.intValue()  +  index;	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  index;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?(int)index  +  1  :  index;	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  index;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  1  :  index;	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  index  +  1;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  index  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(index  +  1):  index  +  1;	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  double  intIndex  =(int)index;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =(int)index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(int)index;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  double  intIndex  =(double)index  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =(double)index  +  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  +  1;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  double  intIndex  =(double)index  -  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =(double)index  -  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  -  1;	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  intIndex  =  index  +  left.getIndex();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  intIndex  =  index  +  left.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  left.getIndex();	      	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  int  intIndex  =  n.intValue()  -  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  n.intValue()  -  1;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.intValue()  -  1;	  int    intIndex    =    n.intValue();    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  int  intIndex  =  index  >>  0?(int)index  :  0;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  >>  0?(int)index  :  0;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  >>  0?(int)index  :  0;	  int    intIndex    =    index    <    0?(int)index    :    0;    	non-compiled	[CE]  	7	None	replace
48	[BUG]  [BUGGY]  int  index  =  n.getIndex();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  index  =  n.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  n.getIndex();	      	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  double  intIndex  =  n.getIndex();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  double  intIndex  =  n.getIndex();  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.getIndex();	  double    intIndex    =    (double)index;    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  int  intIndex  =  i;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  i;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  i;	  int    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  int  intIndex  =  (int)(index  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  (int)(index  +  1);  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  (int)(index  +  1);	  int    intIndex    =    (int)index    +    1;    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?  0  :  index;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();    [BUGGY]  int  intIndex  =  index  <  0?  0  :  index;  [BUGGY]    if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?  0  :  index;	  int    intIndex    =    0;    	non-compiled	[CE]  	2	None	replace
