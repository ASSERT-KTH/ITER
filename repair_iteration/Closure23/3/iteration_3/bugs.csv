bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  intIndex  =(int)index  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  +  1;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  intIndex  =(int)index  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  -  1;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  intIndex  =(int)index  *  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  *  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  *  index;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  intIndex  =(int)index  +  2;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  +  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  +  2;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  double  intIndex  =  index  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index  +  1;	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  double  intIndex  =  left.getIndex();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  left.getIndex();	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  double  intIndex  =  right.getIndex();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  right.getIndex();	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  double  intIndex  =  parent.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  parent.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  parent.getIndex();	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  double  intIndex  =  index  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index  -  1;	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  double  intIndex  =  parent.getIndex(index);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  parent.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  parent.getIndex(index);	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  int  intIndex  =  left.intValue()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.intValue()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue()  -  1;	  int    intIndex    =    n.intValue()    -    1;    	non-compiled	[CE]  	46	None	replace
12	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  -  1;	  int    intIndex    =    n.intValue()    -    1;    	non-compiled	[CE]  	46	None	replace
13	[BUG]  [BUGGY]  intIndex  =  index  +  right.getIndex()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  right.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  right.getIndex()  -  1;	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
14	[BUG]  [BUGGY]  intIndex  =  n  +  right.getIndex();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  n  +  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  n  +  right.getIndex();	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
15	[BUG]  [BUGGY]  intIndex  =  right  +  index.getIndex();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right  +  index.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right  +  index.getIndex();	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
16	[BUG]  [BUGGY]  intIndex  =  index  +  right.getIndex()  -  2;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  right.getIndex()  -  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  right.getIndex()  -  2;	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
17	[BUG]  [BUGGY]  intIndex  =  index  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  1;	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  intIndex  =  index  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  -  1;	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  intIndex  =  0;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  0;	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  intIndex  =  parent.getIndex();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  parent.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  parent.getIndex();	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  intIndex  =  index  +  2;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  2;	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  double  index  =  right.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getIndex();	  int    index    =    n.getIndex();    	non-compiled	[CE]  	48	None	replace
23	[BUG]  [BUGGY]  int  index  =  parent.getIndex();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  parent.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  parent.getIndex();	  int    index    =    n.getIndex();    	non-compiled	[CE]  	48	None	replace
24	[BUG]  [BUGGY]  double  index  =  n.getIndex();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  n.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  n.getIndex();	  int    index    =    n.getIndex();    	non-compiled	[CE]  	48	None	replace
25	[BUG]  [BUGGY]  int  index  =  n.getIndex()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  n.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  n.getIndex()  +  1;	  int    index    =    n.getIndex();    	non-compiled	[CE]  	48	None	replace
26	[BUG]  [BUGGY]  int  intIndex  =  index  +  2;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  +  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  +  2;	  int    intIndex    =    (int)index    +    2;    	non-compiled	[CE]  	18	None	replace
27	[BUG]  [BUGGY]  int  intIndex  =  n.getIndex();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.getIndex();	  int    intIndex    =    parent.getIndex();    	non-compiled	[CE]  	15	None	replace
28	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndex()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndex()  -  1;	  int    intIndex    =    parent.getIndex();    	non-compiled	[CE]  	15	None	replace
29	[BUG]  [BUGGY]  int  intIndex  =  current.getIndex();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  current.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  current.getIndex();	  int    intIndex    =    parent.getIndex();    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  int  index  =  right.intValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.intValue();	  int    intIndex    =    parent.intValue();    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  int  intIndex  =  parent.intValue()  -  index;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.intValue()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.intValue()  -  index;	  int    intIndex    =    parent.intValue();    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  int  intIndex  =(int)index  /  1  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  /  1  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  /  1  +  1;	  int    intIndex    =(int)index    -    1    +    1;    	non-compiled	[CE]  	32	None	replace
33	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  1  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  1  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  1  +  1;	  int    intIndex    =(int)index    -    1    +    1;    	non-compiled	[CE]  	32	None	replace
34	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex()  -  1;	  int    intIndex    =    right.getIndex();    	non-compiled	[CE]  	34	None	replace
35	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex()  +  1;	  int    intIndex    =    right.getIndex();    	non-compiled	[CE]  	34	None	replace
36	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex()  -  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIndex()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex()  -  index;	  int    intIndex    =    right.getIndex();    	non-compiled	[CE]  	34	None	replace
37	[BUG]  [BUGGY]  double  index  =  left.getDouble();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  left.getDouble();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  left.getDouble();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
38	[BUG]  [BUGGY]  double  index  =  right.getNumber();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getNumber();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getNumber();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
39	[BUG]  [BUGGY]  double  index  =  n.getDouble();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  n.getDouble();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  n.getDouble();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
40	[BUG]  [BUGGY]  double  index  =  right.getDouble()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getDouble()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getDouble()  -  1;	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
41	[BUG]  [BUGGY]  double  index  =  right.getLong();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getLong();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getLong();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
42	[BUG]  [BUGGY]  int  index  =  left.getIndex()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  left.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.getIndex()  -  1;	  int    index    =    left.getIndex();    	non-compiled	[CE]  	31	None	replace
43	[BUG]  [BUGGY]  int  index  =  left.getIndex()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  left.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.getIndex()  +  1;	  int    index    =    left.getIndex();    	non-compiled	[CE]  	31	None	replace
44	[BUG]  [BUGGY]  double  index  =  left.getIndex();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  left.getIndex();	  int    index    =    left.getIndex();    	non-compiled	[CE]  	31	None	replace
45	[BUG]  [BUGGY]  int  index  =  left.getIndex()  -  2;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  left.getIndex()  -  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.getIndex()  -  2;	  int    index    =    left.getIndex();    	non-compiled	[CE]  	31	None	replace
46	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex()  -  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex()  -  1;	  int    intIndex    =    left.getIndex();    	non-compiled	[CE]  	33	None	replace
47	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex()  +  1;	  int    intIndex    =    left.getIndex();    	non-compiled	[CE]  	33	None	replace
48	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex()  -  index;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.getIndex()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex()  -  index;	  int    intIndex    =    left.getIndex();    	non-compiled	[CE]  	33	None	replace
49	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex()  +  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.getIndex()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex()  +  index;	  int    intIndex    =    left.getIndex();    	non-compiled	[CE]  	33	None	replace
50	[BUG]  [BUGGY]  int  intIndex  =(index  ==  0)?(int)index  +  1  :  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  0)?(int)index  +  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  0)?(int)index  +  1  :  index;	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
51	[BUG]  [BUGGY]  int  intIndex  =(index  >>  0)?(int)index  +  1  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >>  0)?(int)index  +  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >>  0)?(int)index  +  1  :  index;	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
52	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  2  :  index;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  2  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?(int)index  +  2  :  index;	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
53	[BUG]  [BUGGY]  int  intIndex  =(index!=  0)?(int)index  +  1  :  index;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index!=  0)?(int)index  +  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index!=  0)?(int)index  +  1  :  index;	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
54	[BUG]  [BUGGY]  int  intIndex  =(index  <  1)?(int)index  +  1  :  index;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1)?(int)index  +  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1)?(int)index  +  1  :  index;	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
55	[BUG]  [BUGGY]  int  intIndex  =  right.indexOf(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.indexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
56	[BUG]  [BUGGY]  int  intIndex  =  left.indexOf(left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.indexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
57	[BUG]  [BUGGY]  int  intIndex  =  left.indexOf(right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.indexOf(right);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.indexOf(right);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
58	[BUG]  [BUGGY]  int  intIndex  =  n.indexOf(left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.indexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  int  intIndex  =  indexOf(left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  indexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
60	[BUG]  [BUGGY]  int  intIndex  =  left.indexOf(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.indexOf(parent);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.indexOf(parent);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
61	[BUG]  [BUGGY]  int  intIndex  =(int)index  /  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  /  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  /  2;	  int    intIndex    =(int)index    /    1;    	non-compiled	[CE]  	5	None	replace
62	[BUG]  [BUGGY]  int  intIndex  =(int)index  %  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  %  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  %  2;	  int    intIndex    =(int)index    /    1;    	non-compiled	[CE]  	5	None	replace
63	[BUG]  [BUGGY]  double  intIndex  =  n.getIndex()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  n.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.getIndex()  +  1;	  double    intIndex    =    n.getIndex();    	non-compiled	[CE]  	49	None	replace
64	[BUG]  [BUGGY]  double  intIndex  =  n.getIndex()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  n.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.getIndex()  -  1;	  double    intIndex    =    n.getIndex();    	non-compiled	[CE]  	49	None	replace
65	[BUG]  [BUGGY]  int  index  =  right.getIndex()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.getIndex()  -  1;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	27	None	replace
66	[BUG]  [BUGGY]  int  index  =  right.getIndex()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.getIndex()  +  1;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	27	None	replace
67	[BUG]  [BUGGY]  int  index  =  right.getIndex()  -  2;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.getIndex()  -  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.getIndex()  -  2;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	27	None	replace
68	[BUG]  [BUGGY]  int  intIndex  =  right  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right  +  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
69	[BUG]  [BUGGY]  int  intIndex  =  left  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left  +  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
70	[BUG]  [BUGGY]  double  intIndex  =  n  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  n  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n  +  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
71	[BUG]  [BUGGY]  int  intIndex  =  index  /  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  /  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  /  1;	  int    intIndex    =    index    +    1;    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  int  intIndex  =  index  +  3;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  +  3;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  +  3;	  int    intIndex    =    index    +    1;    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?(index  +  1):  index  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?(index  +  1):  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1  ||  index  <  0)?(index  +  1):  index  +  1;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
74	[BUG]  [BUGGY]  int  intIndex  =(index  <  1)?(index  +  1):  index  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1)?(index  +  1):  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1)?(index  +  1):  index  +  1;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
75	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  index  +  2;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  index  +  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(index  +  1):  index  +  2;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
76	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?(index  +  1):  index  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?(index  +  1):  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?(index  +  1):  index  +  1;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
77	[BUG]  [BUGGY]  int  intIndex  =(index  <  2  ||  index  <  0)?(index  +  1):  index  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  2  ||  index  <  0)?(index  +  1):  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  2  ||  index  <  0)?(index  +  1):  index  +  1;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
78	[BUG]  [BUGGY]  double  intIndex  =(int)index  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(int)index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(int)index  +  1;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
79	[BUG]  [BUGGY]  double  intIndex  =(index  >=  0)?(int)index  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  >=  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  >=  0)?(int)index  :  0;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
80	[BUG]  [BUGGY]  double  intIndex  =(int)index  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(int)index  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(int)index  -  1;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
81	[BUG]  [BUGGY]  double  intIndex  =(index  <  0)?(int)index  :  0;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  <  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  <  0)?(int)index  :  0;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
82	[BUG]  [BUGGY]  double  intIndex  =  index.intValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index.intValue();	  int    intIndex    =    index.intValue();    	non-compiled	[CE]  	23	None	replace
83	[BUG]  [BUGGY]  int  intIndex  =  index.intValue()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index.intValue()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index.intValue()  -  1;	  int    intIndex    =    index.intValue();    	non-compiled	[CE]  	23	None	replace
84	[BUG]  [BUGGY]  int  intIndex  =  index.intValue()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index.intValue()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index.intValue()  +  1;	  int    intIndex    =    index.intValue();    	non-compiled	[CE]  	23	None	replace
85	[BUG]  [BUGGY]  double  intIndex  =(double)index  /  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(double)index  /  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  /  1;	  double    intIndex    =(double)index    -    1;    	non-compiled	[CE]  	44	None	replace
86	[BUG]  [BUGGY]  double  intIndex  =(double)index  -  2;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(double)index  -  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  -  2;	  double    intIndex    =(double)index    -    1;    	non-compiled	[CE]  	44	None	replace
87	[BUG]  [BUGGY]  double  intIndex  =(double)index  *  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(double)index  *  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  *  1;	  double    intIndex    =(double)index    -    1;    	non-compiled	[CE]  	44	None	replace
88	[BUG]  [BUGGY]  intIndex  =  left.getIndex();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  left.getIndex();	  intIndex    =    n.getIndex();    	non-compiled	[CE]  	29	None	replace
89	[BUG]  [BUGGY]  intIndex  =  n.getIndex()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  n.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  n.getIndex()  +  1;	  intIndex    =    n.getIndex();    	non-compiled	[CE]  	29	None	replace
90	[BUG]  [BUGGY]  intIndex  =  index  +  n.getIndex();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  n.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  n.getIndex();	  intIndex    =    n.getIndex();    	non-compiled	[CE]  	29	None	replace
91	[BUG]  [BUGGY]  intIndex  =  left  +  index.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  left  +  index.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  left  +  index.getIndex();	  intIndex    =    index    +    left.getIndex();    	non-compiled	[CE]  	45	None	replace
92	[BUG]  [BUGGY]  intIndex  =  index  +  left.getIndex()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  +  left.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  +  left.getIndex()  -  1;	  intIndex    =    index    +    left.getIndex();    	non-compiled	[CE]  	45	None	replace
93	[BUG]  [BUGGY]  int  intIndex  =(int)index  %  3;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  %  3;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  %  3;	  int    intIndex    =(int)index    %    1;    	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  int  intIndex  =(index  ==  0)?  0  :  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  0)?  0  :  index;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
95	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?  0  :  index  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?  0  :  index  +  1;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
96	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?  0  :  index  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?  0  :  index  +  1;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
97	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?  1  :  index;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?  1  :  index;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
98	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?  1  :  index;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?  1  :  index;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
99	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  +  1;	  int    intIndex    =    n.intValue()    +    1;    	non-compiled	[CE]  	25	None	replace
100	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  /  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  /  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  /  1;	  int    intIndex    =    n.intValue()    +    1;    	non-compiled	[CE]  	25	None	replace
101	[BUG]  [BUGGY]  int  intIndex  =(int)(index  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)(index  +  2);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)(index  +  2);	  int    intIndex    =    (int)(index    +    1);    	non-compiled	[CE]  	51	None	replace
102	[BUG]  [BUGGY]  int  intIndex  =  index  <  (int)(index  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  (int)(index  +  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  (int)(index  +  1);	  int    intIndex    =    (int)(index    +    1);    	non-compiled	[CE]  	51	None	replace
103	[BUG]  [BUGGY]  int  intIndex  =  (int)(index  *  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  (int)(index  *  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  (int)(index  *  1);	  int    intIndex    =    (int)(index    +    1);    	non-compiled	[CE]  	51	None	replace
104	[BUG]  [BUGGY]  double  intIndex  =(double)index  +  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(double)index  +  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  +  2;	  double    intIndex    =(double)index    +    1;    	non-compiled	[CE]  	43	None	replace
105	[BUG]  [BUGGY]  int  intIndex  =  index  -  2;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  -  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  -  2;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  int  intIndex  =  index  *  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  *  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  *  1;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
107	[BUG]  [BUGGY]  int  intIndex  =  n  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n  -  1;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
108	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  2;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  2;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  2;	  int    intIndex    =(int)index    -    2;    	non-compiled	[CE]  	6	None	replace
109	[BUG]  [BUGGY]  int  intIndex  =  index  ==  0?(int)index  :  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  ==  0?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  ==  0?(int)index  :  1;	  int    intIndex    =    index    ==    0?(int)index    :    0;    	non-compiled	[CE]  	11	None	replace
110	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?  0  :  index  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  0?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?  0  :  index  +  1;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
111	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?  1  :  index;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  0?  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?  1  :  index;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
112	[BUG]  [BUGGY]  int  intIndex  =  index  >=  0?  0  :  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  >=  0?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  >=  0?  0  :  index;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
113	[BUG]  [BUGGY]  int  intIndex  =  index  ==  0?  0  :  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  ==  0?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  ==  0?  0  :  index;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
114	[BUG]  [BUGGY]  int  intIndex  =  index  <  1?  0  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  1?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  1?  0  :  index;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
115	[BUG]  [BUGGY]  double  intIndex  =(index  <  0)?  0  :  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  <  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  <  0)?  0  :  index;	  double    intIndex    =    0;    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  +  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  +  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
117	[BUG]  [BUGGY]  int  intIndex  =  left.intValue()  +  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.intValue()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue()  +  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
118	[BUG]  [BUGGY]  int  intIndex  =  index  +  n.intValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  +  n.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  +  n.intValue();	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
119	[BUG]  [BUGGY]  int  intIndex  =  index.intValue()  +  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index.intValue()  +  n;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index.intValue()  +  n;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
120	[BUG]  [BUGGY]  int  intIndex  =  n.intValue()  *  index;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.intValue()  *  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.intValue()  *  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
121	[BUG]  [BUGGY]  int  intIndex  =  parent.intValue()  +  index;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.intValue()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.intValue()  +  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
122	[BUG]  [BUGGY]  int  intIndex  =  index!=  0?(int)index  :  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index!=  0?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index!=  0?(int)index  :  1;	  int    intIndex    =    index!=    0?(int)index    :    0;    	non-compiled	[CE]  	12	None	replace
123	[BUG]  [BUGGY]  int  intIndex  =  index  >=  0?(int)index  :  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  >=  0?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  >=  0?(int)index  :  1;	  int    intIndex    =    index    <    0?(int)index    :    1;    	non-compiled	[CE]  	9	None	replace
124	[BUG]  [BUGGY]  int  intIndex  =  index  <  1?(int)index  :  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  1?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  1?(int)index  :  1;	  int    intIndex    =    index    <    0?(int)index    :    1;    	non-compiled	[CE]  	9	None	replace
125	[BUG]  [BUGGY]  double  intIndex  =  right.intValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  right.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  right.intValue();	  int    intIndex    =    right.intValue();    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  int  intIndex  =  right.getIntValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIntValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIntValue();	  int    intIndex    =    right.intValue();    	non-compiled	[CE]  	20	None	replace
127	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  0  :  index  +  1;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
128	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  1  :  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  1  :  index;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
129	[BUG]  [BUGGY]  int  intIndex  =(index!=  null)?  0  :  index  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index!=  null)?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index!=  null)?  0  :  index  +  1;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
130	[BUG]  [BUGGY]  int  intIndex  =(index!=  null)?  0  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index!=  null)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index!=  null)?  0  :  index;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
131	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index.intValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  index.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  0  :  index.intValue();	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
132	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  2  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  2  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  2  :  index;	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
133	[BUG]  [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?(int)index  +  1  :  index;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?(int)index  +  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1  ||  index  <  0)?(int)index  +  1  :  index;	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
134	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  index  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  1  :  index  +  1;	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
135	[BUG]  [BUGGY]  double  intIndex  =  left.intValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  left.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  left.intValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
136	[BUG]  [BUGGY]  double  index  =  right.intValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.intValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
137	[BUG]  [BUGGY]  double  intIndex  =  right.getIntValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  right.getIntValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  right.getIntValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
138	[BUG]  [BUGGY]  double  intIndex  =  parent.intValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  parent.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  parent.intValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
139	[BUG]  [BUGGY]  double  intIndex  =  n.intValue()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  n.intValue()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.intValue()  +  1;	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
140	[BUG]  [BUGGY]  int  intIndex  =  left.intValue()  -  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.intValue()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue()  -  index;	  int    intIndex    =    left.intValue();    	non-compiled	[CE]  	22	None	replace
141	[BUG]  [BUGGY]  intIndex  =  right.getIndex()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex()  -  1;	  intIndex    =    right.getIndex();    	non-compiled	[CE]  	30	None	replace
142	[BUG]  [BUGGY]  intIndex  =  right.getIndex()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right.getIndex()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex()  +  1;	  intIndex    =    right.getIndex();    	non-compiled	[CE]  	30	None	replace
143	[BUG]  [BUGGY]  intIndex  =  right.getIndex()  -  index;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right.getIndex()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex()  -  index;	  intIndex    =    right.getIndex();    	non-compiled	[CE]  	30	None	replace
144	[BUG]  [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?  0  :  index;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1  ||  index  <  0)?  0  :  index;	  int    intIndex    =(index    <    0)?    0    :    index;    	non-compiled	[CE]  	35	None	replace
145	[BUG]  [BUGGY]  int  intIndex  =(index  <  1)?  0  :  index;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1)?  0  :  index;	  int    intIndex    =(index    <    0)?    0    :    index;    	non-compiled	[CE]  	35	None	replace
146	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  4;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  4;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  4;	  int    intIndex    =(int)index    *    1;    	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  3;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  3;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  3;	  int    intIndex    =(int)index    *    1;    	non-compiled	[CE]  	7	None	replace
148	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex(index);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex(index);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
149	[BUG]  [BUGGY]  int  intIndex  =  left.getIndex(index);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.getIndex(index);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
150	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndex(index  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.getIndex(index  +  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndex(index  +  1);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
151	[BUG]  [BUGGY]  int  intIndex  =  n.getIndex(index);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.getIndex(index);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
152	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndex(index  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.getIndex(index  -  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndex(index  -  1);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
153	[BUG]  [BUGGY]  int  index  =  right.getIndex(index);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.getIndex(index);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
154	[BUG]  [BUGGY]  int  intIndex  =  right.getIndex()  +  index;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.getIndex()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.getIndex()  +  index;	  int    intIndex    =    right.getIndex();    	non-compiled	[CE]  	34	None	replace
155	[BUG]  [BUGGY]  int  intIndex  =  parent.indexOf(left,  index);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.indexOf(left,  index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.indexOf(left,  index);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
156	[BUG]  [BUGGY]  double  intIndex  =  index.getIndex();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index.getIndex();	  double    intIndex    =    n.getIndex();    	non-compiled	[CE]  	49	None	replace
157	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  left.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  1  :  left.getIndex();	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
158	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  right.getIndex();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  1  :  right.getIndex();	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
159	[BUG]  [BUGGY]  intIndex  =  right  +  left.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right  +  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right  +  left.getIndex();	  intIndex    =    index    +    left.getIndex();    	non-compiled	[CE]  	45	None	replace
160	[BUG]  [BUGGY]  double  intIndex  =  n.getIntValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  n.getIntValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  n.getIntValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
161	[BUG]  [BUGGY]  double  intIndex  =  left.getIntValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  left.getIntValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  left.getIntValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
162	[BUG]  [BUGGY]  double  intIndex  =  right.doubleValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  right.doubleValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  right.doubleValue();	  double    intIndex    =    n.intValue();    	non-compiled	[CE]  	21	None	replace
163	[BUG]  [BUGGY]  int  intIndex  =  left.intValue()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.intValue()  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue()  +  1;	  int    intIndex    =    n.intValue()    +    1;    	non-compiled	[CE]  	25	None	replace
164	[BUG]  [BUGGY]  double  intIndex  =(index  >=  0)?  0  :  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  >=  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  >=  0)?  0  :  index;	  double    intIndex    =    0;    	non-compiled	[CE]  	3	None	replace
165	[BUG]  [BUGGY]  double  intIndex  =(index  ==  0)?  0  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  ==  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  ==  0)?  0  :  index;	  double    intIndex    =    0;    	non-compiled	[CE]  	3	None	replace
166	[BUG]  [BUGGY]  double  intIndex  =(index  ==  null)?  0  :  index;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  ==  null)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  ==  null)?  0  :  index;	  double    intIndex    =    0;    	non-compiled	[CE]  	3	None	replace
167	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  8;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  8;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  8;	  int    intIndex    =(int)index    *    1;    	non-compiled	[CE]  	7	None	replace
168	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  -  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  -  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  -  index;	  int    intIndex    =    right.intValue();    	non-compiled	[CE]  	20	None	replace
169	[BUG]  [BUGGY]  float  intIndex  =  (float)(index  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  float  intIndex  =  (float)(index  +  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	float  intIndex  =  (float)(index  +  1);	  int    intIndex    =    (int)(index    +    1);    	non-compiled	[CE]  	51	None	replace
170	[BUG]  [BUGGY]  double  intIndex  =  index  *  NEGATING_A_NON_NUMBER_ERROR;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index  *  NEGATING_A_NON_NUMBER_ERROR;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index  *  NEGATING_A_NON_NUMBER_ERROR;	  double    intIndex    =    index;    	non-compiled	[CE]  	1	None	replace
171	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  right.getIndex();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  0  :  right.getIndex();	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
172	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  left.getIndex();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  0  :  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  0  :  left.getIndex();	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
173	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?  0  :  left.getIndex();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  0?  0  :  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?  0  :  left.getIndex();	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
174	[BUG]  [BUGGY]  int  intIndex  =  index!=  0?  0  :  index;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index!=  0?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index!=  0?  0  :  index;	  int    intIndex    =    index    <    0?    0    :    index;    	non-compiled	[CE]  	52	None	replace
175	[BUG]  [BUGGY]  int  intIndex  =  n.getIndex(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.getIndex(parent);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.getIndex(parent);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
176	[BUG]  [BUGGY]  double  intIndex  =(index  >=  0?(double)index  +  1  :  index);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  >=  0?(double)index  +  1  :  index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  >=  0?(double)index  +  1  :  index);	  double    intIndex    =(double)index    +    1;    	non-compiled	[CE]  	43	None	replace
177	[BUG]  [BUGGY]  int  intIndex  =  left.intValue()  /  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left.intValue()  /  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left.intValue()  /  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
178	[BUG]  [BUGGY]  int  intIndex  =(index  ==  0)?  0  :  index  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  0)?  0  :  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  0)?  0  :  index  +  1;	  int    intIndex    =(index    >=    0)?    0    :    index;    	non-compiled	[CE]  	37	None	replace
179	[BUG]  [BUGGY]  int  intIndex  =  index  -  1  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  -  1  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  -  1  +  1;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
180	[BUG]  [BUGGY]  int  intIndex  =(int)index  /  3;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  /  3;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  /  3;	  int    intIndex    =(int)index    /    1;    	non-compiled	[CE]  	5	None	replace
181	[BUG]  [BUGGY]  double  index  =  right.getIntValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getIntValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getIntValue();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
182	[BUG]  [BUGGY]  int  index  =  left.intValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  left.intValue();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.intValue();	  int    intIndex    =    parent.intValue();    	non-compiled	[CE]  	24	None	replace
183	[BUG]  [BUGGY]  intIndex  =  right.getIndex()  +  index;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right.getIndex()  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex()  +  index;	  intIndex    =    right.getIndex();    	non-compiled	[CE]  	30	None	replace
184	[BUG]  [BUGGY]  int  intIndex  =(index!=  0)?  0  :  index;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index!=  0)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index!=  0)?  0  :  index;	  int    intIndex    =(index    <    0)?    0    :    index;    	non-compiled	[CE]  	35	None	replace
185	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?  1  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?  1  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?  1  :  0;	  int    intIndex    =(index    <    0)?    0    :    index;    	non-compiled	[CE]  	35	None	replace
186	[BUG]  [BUGGY]  float  intIndex  =(float)index  -  1  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  float  intIndex  =(float)index  -  1  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	float  intIndex  =(float)index  -  1  +  1;	  int    intIndex    =(int)index    -    1    +    1;    	non-compiled	[CE]  	32	None	replace
187	[BUG]  [BUGGY]  int  index  =  n.getIndex()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  n.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  n.getIndex()  -  1;	  int    index    =    n.getIndex();    	non-compiled	[CE]  	48	None	replace
188	[BUG]  [BUGGY]  double  intIndex  =(index  ==  0)?(int)index  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  ==  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  ==  0)?(int)index  :  0;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
189	[BUG]  [BUGGY]  double  intIndex  =(index!=  0)?(int)index  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index!=  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index!=  0)?(int)index  :  0;	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
190	[BUG]  [BUGGY]  intIndex  =(index  >=  0)?(int)index  :  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(index  >=  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(index  >=  0)?(int)index  :  0;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
191	[BUG]  [BUGGY]  intIndex  =(index  <  0)?(int)index  :  0;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(index  <  0)?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(index  <  0)?(int)index  :  0;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
192	[BUG]  [BUGGY]  intIndex  =(int)parent;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)parent;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)parent;	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
193	[BUG]  [BUGGY]  intIndex  =  n.getIndex()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  n.getIndex()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  n.getIndex()  -  1;	  intIndex    =    n.getIndex();    	non-compiled	[CE]  	29	None	replace
194	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  left.getIndex();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?(int)index  +  1  :  left.getIndex();	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
195	[BUG]  [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  right.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  0)?(int)index  +  1  :  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  0)?(int)index  +  1  :  right.getIndex();	  int    intIndex    =(index    >=    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	39	None	replace
196	[BUG]  [BUGGY]  int  intIndex  =(int)index  %  4;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  %  4;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  %  4;	  int    intIndex    =(int)index    %    1;    	non-compiled	[CE]  	8	None	replace
197	[BUG]  [BUGGY]  int  intIndex  =  left  +  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  left  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  left  +  index;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
198	[BUG]  [BUGGY]  int  intIndex  =  n  +  index;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n  +  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n  +  index;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
199	[BUG]  [BUGGY]  intIndex  =  left  +  right.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  left  +  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  left  +  right.getIndex();	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
200	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  right.getIndex();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(index  +  1):  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(index  +  1):  right.getIndex();	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
201	[BUG]  [BUGGY]  intIndex  =  parent.indexOf(left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  parent.indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  parent.indexOf(left);	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
202	[BUG]  [BUGGY]  intIndex  =  parent.getIndex(index);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  parent.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  parent.getIndex(index);	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
203	[BUG]  [BUGGY]  double  intIndex  =  index  <  0?  0  :  index;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  index  <  0?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  index  <  0?  0  :  index;	  double    intIndex    =    0;    	non-compiled	[CE]  	3	None	replace
204	[BUG]  [BUGGY]  int  intIndex  =  i  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  i  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  i  +  1;	  int    intIndex    =    index    +    1;    	non-compiled	[CE]  	13	None	replace
205	[BUG]  [BUGGY]  int  index  =  index  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  index  +  1;	  int    intIndex    =    index    +    1;    	non-compiled	[CE]  	13	None	replace
206	[BUG]  [BUGGY]  intIndex  =  right.getIndex()  *  index;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  right.getIndex()  *  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  right.getIndex()  *  index;	  intIndex    =    right.getIndex();    	non-compiled	[CE]  	30	None	replace
207	[BUG]  [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  1)?(index  +  1):  index  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  1  ||  index  <  1)?(index  +  1):  index  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  1  ||  index  <  1)?(index  +  1):  index  +  1;	  int    intIndex    =(index    <    0)?(index    +    1):    index    +    1;    	non-compiled	[CE]  	41	None	replace
208	[BUG]  [BUGGY]  int  intIndex  =  right.indexOf('  ')+  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.indexOf('  ')+  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.indexOf('  ')+  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
209	[BUG]  [BUGGY]  int  intIndex  =  n.indexOf('/')+  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.indexOf('/')+  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.indexOf('/')+  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
210	[BUG]  [BUGGY]  int  intIndex  =  n.indexOf('.')+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  n.indexOf('.')+  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  n.indexOf('.')+  1;	  int    intIndex    =    n    +    1;    	non-compiled	[CE]  	19	None	replace
211	[BUG]  [BUGGY]  intIndex  =(int)index  *(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  *(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  *(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE);	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
212	[BUG]  [BUGGY]  intIndex  =(int)index  *(left.getLastChild(),  right.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  *(left.getLastChild(),  right.getLastChild());  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  *(left.getLastChild(),  right.getLastChild());	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
213	[BUG]  [BUGGY]  intIndex  =(int)index  *(left.getLastChild(),  left.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =(int)index  *(left.getLastChild(),  left.getLastChild());  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =(int)index  *(left.getLastChild(),  left.getLastChild());	  intIndex    =(int)index;    	non-compiled	[CE]  	2	None	replace
214	[BUG]  [BUGGY]  int  intIndex  =  index  <  0?  parent.getIndex()  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  0?  parent.getIndex()  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  0?  parent.getIndex()  :  0;	  int    intIndex    =    parent.getIndex();    	non-compiled	[CE]  	15	None	replace
215	[BUG]  [BUGGY]  int  intIndex  =  right.lastIndexOf(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.lastIndexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.lastIndexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
216	[BUG]  [BUGGY]  int  index  =  right.indexOf(left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  right.indexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  right.indexOf(left);	  int    intIndex    =    parent.indexOf(left);    	non-compiled	[CE]  	17	None	replace
217	[BUG]  [BUGGY]  double  intIndex  =(index  ==  0?(int)index  :  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(index  ==  0?(int)index  :  0);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(index  ==  0?(int)index  :  0);	  double    intIndex    =(int)index;    	non-compiled	[CE]  	42	None	replace
218	[BUG]  [BUGGY]  int  intIndex  =  parent.intValue()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.intValue()  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.intValue()  -  1;	  int    intIndex    =    n.intValue()    -    1;    	non-compiled	[CE]  	46	None	replace
219	[BUG]  [BUGGY]  int  intIndex  =  parent.getIndexOf(left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  parent.getIndexOf(left);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  parent.getIndexOf(left);	  int    intIndex    =    i;    	non-compiled	[CE]  	50	None	replace
220	[BUG]  [BUGGY]  float  intIndex  =(float)index  %  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  float  intIndex  =(float)index  %  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	float  intIndex  =(float)index  %  1;	  int    intIndex    =(int)index    %    1;    	non-compiled	[CE]  	8	None	replace
221	[BUG]  [BUGGY]  double  index  =  right.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  index  =  right.getLastChild();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  index  =  right.getLastChild();	  double    index    =    right.getDouble();    	non-compiled	[CE]  	28	None	replace
222	[BUG]  [BUGGY]  int  intIndex  =  index  >>  0?(int)index  :  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  >>  0?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  >>  0?(int)index  :  1;	  int    intIndex    =    index    <    0?(int)index    :    1;    	non-compiled	[CE]  	9	None	replace
223	[BUG]  [BUGGY]  int  intIndex  =  index  [Delete]  0?(int)index  :  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  [Delete]  0?(int)index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  [Delete]  0?(int)index  :  1;	  int    intIndex    =    index    <    0?(int)index    :    1;    	non-compiled	[CE]  	9	None	replace
224	[BUG]  [BUGGY]  intIndex  =  i  +  left.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  i  +  left.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  i  +  left.getIndex();	  intIndex    =    index    +    left.getIndex();    	non-compiled	[CE]  	45	None	replace
225	[BUG]  [BUGGY]  int  index  =  left.getIndex(index);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  index  =  left.getIndex(index);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  index  =  left.getIndex(index);	  int    intIndex    =    parent.getIndex(index);    	non-compiled	[CE]  	16	None	replace
226	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  *  1  :  index;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  *  1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  *  1  :  index;	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
227	[BUG]  [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  <  0)?(int)index  +  1  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  <  0)?(int)index  +  1  :  0;	  int    intIndex    =(index    <    0)?(int)index    +    1    :    index;    	non-compiled	[CE]  	40	None	replace
228	[BUG]  [BUGGY]  int  intIndex  =(index  >=  null)?  0  :  index;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  >=  null)?  0  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  >=  null)?  0  :  index;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
229	[BUG]  [BUGGY]  int  intIndex  =(index  ==  null)?  -1  :  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(index  ==  null)?  -1  :  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(index  ==  null)?  -1  :  index;	  int    intIndex    =(index    ==    null)?    0    :    index;    	non-compiled	[CE]  	36	None	replace
230	[BUG]  [BUGGY]  int  intIndex  =  right.index  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.index  -  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.index  -  1;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
231	[BUG]  [BUGGY]  int  intIndex  =  index  <  1?  index  :  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  index  <  1?  index  :  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  index  <  1?  index  :  1;	  int    intIndex    =    index    -    1;    	non-compiled	[CE]  	14	None	replace
232	[BUG]  [BUGGY]  int  intIndex  =  0?(int)index  :  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  0?(int)index  :  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  0?(int)index  :  0;	  int    intIndex    =    index    ==    0?(int)index    :    0;    	non-compiled	[CE]  	11	None	replace
233	[BUG]  [BUGGY]  int  intIndex  =(int)index  *  0;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =(int)index  *  0;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =(int)index  *  0;	  int    intIndex    =(int)index    *    1;    	non-compiled	[CE]  	7	None	replace
234	[BUG]  [BUGGY]  intIndex  =  index  <  0?  right.getIndex()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  index  <  0?  right.getIndex()  :  n;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  index  <  0?  right.getIndex()  :  n;	  intIndex    =    n.getIndex();    	non-compiled	[CE]  	29	None	replace
235	[BUG]  [BUGGY]  int  intIndex  =  right.intValue()  *  index;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  int  intIndex  =  right.intValue()  *  index;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	int  intIndex  =  right.intValue()  *  index;	  int    intIndex    =    n.intValue()    +    index;    	non-compiled	[CE]  	38	None	replace
236	[BUG]  [BUGGY]  intIndex  =  i;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  i;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  i;	  intIndex    =    index;    	non-compiled	[CE]  	4	None	replace
237	[BUG]  [BUGGY]  intIndex  =  i  +  right.getIndex();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  intIndex  =  i  +  right.getIndex();  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	intIndex  =  i  +  right.getIndex();	  intIndex    =    index    +    right.getIndex();    	non-compiled	[CE]  	26	None	replace
238	[BUG]  [BUGGY]  double  intIndex  =(double)index  -  1  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =(double)index  -  1  +  1;  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =(double)index  -  1  +  1;	  int    intIndex    =(int)index    -    1    +    1;    	non-compiled	[CE]  	32	None	replace
239	[BUG]  [BUGGY]  double  intIndex  =  (double)(index  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();      [BUGGY]  double  intIndex  =  (double)(index  +  1);  [BUGGY]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	double  intIndex  =  (double)(index  +  1);	  int    intIndex    =    (int)(index    +    1);    	non-compiled	[CE]  	51	None	replace
