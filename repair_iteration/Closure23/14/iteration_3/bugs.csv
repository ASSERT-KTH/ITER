bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
2	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
3	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(n))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
4	[BUG]  [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
5	[BUG]  [BUGGY]  if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
6	[BUG]  [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
7	[BUG]  [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
8	[BUG]  [BUGGY]  if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
9	[BUG]  [BUGGY]  if(parent!=  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  right  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
10	[BUG]  [BUGGY]  if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
11	[BUG]  [BUGGY]  if(parent  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
12	[BUG]  [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  right  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  right  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
13	[BUG]  [BUGGY]  if(parent!=  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  left.getType()  ==  Token.NAME)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
14	[BUG]  [BUGGY]  if(parent  ==  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  left.isEmpty())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  left.isEmpty())  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
15	[BUG]  [BUGGY]  if(parent!=  null  ||  left.isEmpty())  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  left.isEmpty())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  left.isEmpty())  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
16	[BUG]  [BUGGY]  if(parent  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
17	[BUG]  [BUGGY]  if(right!=  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right!=  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
18	[BUG]  [BUGGY]  if(!isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(parent))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
19	[BUG]  [BUGGY]  if(parent!=  null  ||!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
20	[BUG]  [BUGGY]  if(parent!=  null  &&!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
21	[BUG]  [BUGGY]  if(parent  ==  null  ||!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
22	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
23	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING  &&!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.STRING  &&!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.STRING  &&!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
24	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
25	[BUG]  [BUGGY]  if(right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
26	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
27	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
28	[BUG]  [BUGGY]  if(parent  ==  null  ||  right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  right!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
29	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
30	[BUG]  [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(right)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
31	[BUG]  [BUGGY]  Node  right  =  parent.getNext()  -  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  parent.getNext()  -  1;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  parent.getNext()  -  1;	  Node    right    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	13	None	replace
32	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
33	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n,  left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
34	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
35	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
37	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
38	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
39	[BUG]  [BUGGY]  Node  current  =  n.getNext();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  n.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  n.getNext();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
40	[BUG]  [BUGGY]  Node  current  =  right.getNext();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  right.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  right.getNext();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
41	[BUG]  [BUGGY]  Node  current  =  parent.getParent();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  parent.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  parent.getParent();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
42	[BUG]  [BUGGY]  if(n!=  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n!=  null  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n!=  null  &&  isAssignmentTarget(left))  {	  if(n!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
43	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  left.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  left.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
44	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  parent.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
45	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
46	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  left.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
47	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  right.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
48	[BUG]  [BUGGY]  n  =  parent.getNext();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  parent.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  parent.getNext();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
49	[BUG]  [BUGGY]  if(n  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n  ==  null  ||  isAssignmentTarget(left))  {	  if(right    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
50	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(n))  {	  if(left    ==    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
51	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
52	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
53	[BUG]  [BUGGY]  if(isAssignmentTarget(n)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
54	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)&&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)&&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)&&  isAssignmentTarget(left))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
55	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.FUNCTION  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
56	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
57	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
58	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
59	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  parent.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
60	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  right.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
61	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  left.equals(right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  left.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  left.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
62	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(n))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
63	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
64	[BUG]  [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
65	[BUG]  [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
66	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
67	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
68	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
69	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
70	[BUG]  [BUGGY]  if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
71	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
72	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
73	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
74	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	46	None	replace
75	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	46	None	replace
76	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getNext(),  parent);  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getNext(),  parent);	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	46	None	replace
77	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  parent;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getNext(),  parent;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getNext(),  parent;	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	46	None	replace
78	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
79	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(n)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
80	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(right))  {	  if(left!=    null    ||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	51	None	replace
81	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	61	None	replace
82	[BUG]  [BUGGY]  Node  current  =  left.getNext()  -  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getNext()  -  1;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getNext()  -  1;	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	74	None	replace
83	[BUG]  [BUGGY]  Node  current  =  left.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getLastChild();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	74	None	replace
84	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getNext(),  parent);  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getNext(),  parent);	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	74	None	replace
85	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  parent;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getNext(),  parent;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getNext(),  parent;	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	74	None	replace
86	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	48	None	replace
87	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  n.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	48	None	replace
88	[BUG]  [BUGGY]  Node  right  =  n.getRight();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  n.getRight();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getRight();	  Node    right    =    n.getNext();    	non-compiled	[CE]  orphaned  case	48	None	replace
89	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {	  if(right.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
90	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(right.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
91	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {	  if(right.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
92	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
93	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getFirstChild();	  Node    right    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
94	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
95	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
96	[BUG]  [BUGGY]  Node  current  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  n.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  n.getLastChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	75	None	replace
97	[BUG]  [BUGGY]  Node  current  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  right.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  right.getFirstChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	75	None	replace
98	[BUG]  [BUGGY]  if(isAssignableFrom(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignableFrom(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignableFrom(left)||  isAssignmentTarget(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
99	[BUG]  [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArrayAccess(left)||  isAssignmentTarget(right))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
100	[BUG]  [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArrayAccess(left)||  isAssignmentTarget(n))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
101	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isArrayAccess(right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isArrayAccess(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isArrayAccess(right))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
102	[BUG]  [BUGGY]  if(isArrayAccess(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isArrayAccess(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArrayAccess(left)&&  isAssignmentTarget(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
103	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
104	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(right.getType()    ==    Token.NAME    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
105	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(right.getType()    ==    Token.NAME    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	60	None	replace
106	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getParent();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  orphaned  case	15	None	replace
107	[BUG]  [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  &&  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
108	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(n,  left,  right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(n,  left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(n,  left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
109	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
110	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
111	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(n,  left))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
112	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
113	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(n))  {	  if(left!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	66	None	replace
114	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isLocalTarget(parent))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
115	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isLocalTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isLocalTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isLocalTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
116	[BUG]  [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isLocalTarget(left)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
117	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
118	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isLocalTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
119	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isLocalTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isLocalTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isLocalTarget(left))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
120	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isLocalTarget(n))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
121	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
122	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	22	None	replace
123	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isAssignmentTarget(n))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	22	None	replace
124	[BUG]  [BUGGY]  Node  elem  =  parent.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  parent.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  parent.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
125	[BUG]  [BUGGY]  Node  elem  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.getFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getFirstChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
126	[BUG]  [BUGGY]  Node  elem  =  right.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  right.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  right.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
127	[BUG]  [BUGGY]  Node  elem  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getLastChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
128	[BUG]  [BUGGY]  Node  elem  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.getNext()  +  1;  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getNext()  +  1;	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
129	[BUG]  [BUGGY]  Node  elem  =  left.getParent();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getParent();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
130	[BUG]  [BUGGY]  Node  current  =  right.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  right.getLastChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  right.getLastChild();	  Node    current    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
131	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isEquivalentTo(right))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
132	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isEquivalentTo(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isEquivalentTo(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isEquivalentTo(left))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
133	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isEquivalentTo(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)&&  isEquivalentTo(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isEquivalentTo(parent))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
134	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isEquivalentTo(n))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
135	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(right,  parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(right,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isEquivalentTo(right,  parent))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
136	[BUG]  [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEquivalentTo(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
137	[BUG]  [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEquivalentTo(left)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
138	[BUG]  [BUGGY]  if(isAssignmentTarget(parent,  left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent,  left))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
139	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  right))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
140	[BUG]  [BUGGY]  if(isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n,  left))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
141	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
142	[BUG]  [BUGGY]  if(!isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left,  right))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
143	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(parent,  left))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(parent,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  right)||  isAssignmentTarget(parent,  left))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
144	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(n,  parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(n,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  right)||  isAssignmentTarget(n,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
145	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
146	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
147	[BUG]  [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(right)||  isAssignmentTarget(left)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
148	[BUG]  [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)||  isAssignmentTarget(right)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
149	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(left)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
150	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
151	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
152	[BUG]  [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
153	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
154	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
155	[BUG]  [BUGGY]  if(isAssignmentTarget(n)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(n)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
156	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
157	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
158	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
159	[BUG]  [BUGGY]  if(parent.getType()!=  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()!=  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()!=  Token.NAME  &&  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
160	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
161	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
162	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(n))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
163	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
164	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(right))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	58	None	replace
165	[BUG]  [BUGGY]  if(left  ==  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  &&  isAssignmentTarget(left))  {	  if(parent    ==    null    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
166	[BUG]  [BUGGY]  if(right  ==  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  &&  isAssignmentTarget(left))  {	  if(parent    ==    null    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
167	[BUG]  [BUGGY]  if(left  ==  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  &&  isAssignmentTarget(parent))  {	  if(parent    ==    null    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
168	[BUG]  [BUGGY]  if(n  ==  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(n  ==  null  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n  ==  null  &&  isAssignmentTarget(parent))  {	  if(parent    ==    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
169	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left,  right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
170	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n,  left,  right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n,  left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(n,  left,  right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
171	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left,  right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
172	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left,  parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
173	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(n,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(n,  left))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
174	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	27	None	replace
175	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(n.getType()    ==    Token.NAME    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
176	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(n.getType()    ==    Token.NAME    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
177	[BUG]  [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isAssignmentTarget(right))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
178	[BUG]  [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isAssignmentTarget(n))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
179	[BUG]  [BUGGY]  if(isEmpty(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)&&  isAssignmentTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
180	[BUG]  [BUGGY]  if(isNullOrEmpty(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isNullOrEmpty(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isNullOrEmpty(left)||  isAssignmentTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
181	[BUG]  [BUGGY]  if(isEmpty(parent)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(parent)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(parent)||  isAssignmentTarget(left))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
182	[BUG]  [BUGGY]  if(isEmpty(right)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(right)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(right)||  isAssignmentTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
183	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
184	[BUG]  [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
185	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
186	[BUG]  [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(right)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(right)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
187	[BUG]  [BUGGY]  if(left  ==  parent  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  parent  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  parent  ||  isAssignmentTarget(left))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
188	[BUG]  [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  left  ||  isAssignmentTarget(parent))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
189	[BUG]  [BUGGY]  if(right  ==  left  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  left  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  left  ||  isAssignmentTarget(left))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
190	[BUG]  [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  left  ||  isAssignmentTarget(left))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
191	[BUG]  [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  right  ||  isAssignmentTarget(left))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
192	[BUG]  [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  left  ||  isAssignmentTarget(right))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
193	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
194	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(left))  {	  if(right    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
195	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right!=  null  ||  isAssignmentTarget(parent))  {	  if(right    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
196	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
197	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	58	None	replace
198	[BUG]  [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  left  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
199	[BUG]  [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  left  ||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
200	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
201	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
202	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right!=  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
203	[BUG]  [BUGGY]  if(left!=  null  ||  right!=  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  right!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  right!=  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
204	[BUG]  [BUGGY]  if(right  ==  null)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
205	[BUG]  [BUGGY]  if(left  ==  null  ||  right  ==  null)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
206	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
207	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  right.equals(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
208	[BUG]  [BUGGY]  if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
209	[BUG]  [BUGGY]  if(parent!=  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isArrayAccess(left)||  isAssignmentTarget(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
210	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
211	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(right,  parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(right,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  right)||  isAssignmentTarget(right,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
212	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
213	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
214	[BUG]  [BUGGY]  if(parent  ==  null  ||  isEmpty(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isEmpty(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isEmpty(left)||  isAssignmentTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
215	[BUG]  [BUGGY]  if(!isEmpty(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isEmpty(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isEmpty(left)&&  isAssignmentTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
216	[BUG]  [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
217	[BUG]  [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  right  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
218	[BUG]  [BUGGY]  Node  right  =  n.getGrandparent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  n.getGrandparent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getGrandparent();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  orphaned  case	15	None	replace
219	[BUG]  [BUGGY]  Node  elem  =  left.getRoot();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.getRoot();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getRoot();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
220	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
221	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
222	[BUG]  [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  left  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  left  ||  isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
223	[BUG]  [BUGGY]  Node  current  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getfirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getfirstChild();	  Node    current    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	14	None	replace
224	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
225	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isEquivalentTo(right))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
226	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
227	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()!=  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()!=  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
228	[BUG]  [BUGGY]  if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
229	[BUG]  [BUGGY]  if(left  ==  left  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  left  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  left  ||  right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
230	[BUG]  [BUGGY]  Node  current  =  left.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getParent();	  Node    current    =    left.getNext();    	non-compiled	[CE]  orphaned  case	74	None	replace
231	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
232	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
233	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
234	[BUG]  [BUGGY]  if(left.getType()!=  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()!=  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()!=  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
235	[BUG]  [BUGGY]  if(!isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left,  parent))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
236	[BUG]  [BUGGY]  if(!isAssignmentTarget(left)||  parent!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left)||  parent!=  null)  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
237	[BUG]  [BUGGY]  if(!isAssignmentTarget(left)||!right.isNumber())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left)||!right.isNumber())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left)||!right.isNumber())  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
238	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {	  if(right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
239	[BUG]  [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  right  ||  isAssignmentTarget(parent))  {	  if(left    ==    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
240	[BUG]  [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  right  ||  isAssignmentTarget(left,  right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
241	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.hasChildren())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.hasChildren())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.hasChildren())  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
242	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
243	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
244	[BUG]  [BUGGY]  if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
245	[BUG]  [BUGGY]  if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
246	[BUG]  [BUGGY]  if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  left  ==  null  ||  isAssignmentTarget(left))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
247	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(left))  {	  if(parent!=    null    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
248	[BUG]  [BUGGY]  if(left!=  null  &&  parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
249	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
250	[BUG]  [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  left  ||  isAssignmentTarget(right))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
251	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	61	None	replace
252	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	61	None	replace
253	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(parent))  {	  if(right!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
254	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
255	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
256	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
257	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
258	[BUG]  [BUGGY]  if(left!=  right  ||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  right  ||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  right  ||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
259	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
260	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent,  left))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent,  left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent,  left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
261	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
262	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
263	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
264	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent  ==  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isAssignmentTarget(right)&&  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
265	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right)||  right  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
266	[BUG]  [BUGGY]  if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
267	[BUG]  [BUGGY]  if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
268	[BUG]  [BUGGY]  if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
269	[BUG]  [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  right.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
270	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
271	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
272	[BUG]  [BUGGY]  Node  current  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  left.removeFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.removeFirstChild();	  Node    current    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	76	None	replace
273	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  parent!=  null)  {	  if(left    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
274	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isLocalTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)&&  isLocalTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isLocalTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
275	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isLocalTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
276	[BUG]  [BUGGY]  Node  current  =  node.getNext();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  node.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  node.getNext();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
277	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isArrayAccess(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isArrayAccess(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isArrayAccess(parent))  {	  if(left.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	61	None	replace
278	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
279	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	63	None	replace
280	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  right!=  null  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right!=  null  &&  isAssignmentTarget(parent))  {	  if(right!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
281	[BUG]  [BUGGY]  if(isArray()  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isArray()  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArray()  ||  isAssignmentTarget(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
282	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isArrayAccess(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isArrayAccess(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isArrayAccess(parent))  {	  if(isArrayAccess(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	70	None	replace
283	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left,  right)||  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  right)||  isAssignmentTarget(left,  parent))  {	  if(isAssignmentTarget(left,    parent))    {    	non-compiled	[CE]  orphaned  case	52	None	replace
284	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
285	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)&&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
286	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
287	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	18	None	replace
288	[BUG]  [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  &&  isAssignmentTarget(left,  parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
289	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {	  if(parent!=    null    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
290	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(left.getType()    ==    Token.NAME    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
291	[BUG]  [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  right!=  null  &&  isAssignmentTarget(right))  {	  if(parent!=    null    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	38	None	replace
292	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	46	None	replace
293	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  n  =  left.getNext();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  left.getNext();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	77	None	replace
294	[BUG]  [BUGGY]  if(isNumber(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isNumber(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isNumber(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
295	[BUG]  [BUGGY]  if(isArrayTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isArrayTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArrayTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(n)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	26	None	replace
296	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.NAME)  {	  if(parent    ==    null    ||    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
297	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left,  right))  {	  if(parent.getType()    ==    Token.NAME    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
298	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
299	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
300	[BUG]  [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent!=    null)    {    	non-compiled	[CE]  orphaned  case	64	None	replace
301	[BUG]  [BUGGY]  Node  current  =  n.getParent();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  current  =  n.getParent();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  n.getParent();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
302	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {	  if(right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
303	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {	  if(right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
304	[BUG]  [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isLocalTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right)||    parent    ==    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
305	[BUG]  [BUGGY]  Node  elem  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  elem  =  left.removeFirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.removeFirstChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  orphaned  case	47	None	replace
306	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left,  right))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left,  right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left,  right))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n,    left))    {    	non-compiled	[CE]  orphaned  case	34	None	replace
307	[BUG]  [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  left  ||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	39	None	replace
308	[BUG]  [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  left  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  left  ||  isAssignmentTarget(left))  {	  if(parent    ==    left    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
309	[BUG]  [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  right  ||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  right  ||  isAssignmentTarget(right))  {	  if(left    ==    null    ||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
310	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isArrayTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isArrayTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isArrayTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
311	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isObjectTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isAssignmentTarget(left)||  isObjectTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isObjectTarget(right))  {	  if(isAssignmentTarget(left)||    isLocalTarget(right))    {    	non-compiled	[CE]  orphaned  case	72	None	replace
312	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  parent.hasChildren())  {	  if(left    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
313	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.NAME)  {	  if(left    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
314	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
315	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
316	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
317	[BUG]  [BUGGY]  if(parent  ==  null  ||  isArrayTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isArrayTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isArrayTarget(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
318	[BUG]  [BUGGY]  if(parent  ==  null  ||  isArrayEquals(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isArrayEquals(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isArrayEquals(left)||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	28	None	replace
319	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left,  right)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
320	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.VAR  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	68	None	replace
321	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.VAR  &&!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent.getType()  ==  Token.VAR  &&!isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.VAR  &&!isAssignmentTarget(left))  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
322	[BUG]  [BUGGY]  if(!isAssignmentTarget(left)||  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left)||  n.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left)||  n.getType()  ==  Token.NAME)  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
323	[BUG]  [BUGGY]  if(!isAssignmentTarget(left)||  n.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(!isAssignmentTarget(left)||  n.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left)||  n.getType()  ==  Token.RETURN)  {	  if(!isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	62	None	replace
324	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
325	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.RETURN)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.RETURN)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
326	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
327	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
328	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.STRING)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
329	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.BLOCK)  {	  if(parent!=    null)    {    	non-compiled	[CE]  orphaned  case	53	None	replace
330	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  parent.equals(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)&&  parent.equals(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)&&  parent.equals(left))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    parent.equals(left))    {    	non-compiled	[CE]  orphaned  case	50	None	replace
331	[BUG]  [BUGGY]  if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  parent  ==  null  ||  isAssignmentTarget(left))  {	  if(left    ==    null    ||    right    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	55	None	replace
332	[BUG]  [BUGGY]  if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isArrayAccess(left)||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	20	None	replace
333	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getfirstChild();	  Node    right    =    parent.getLastChild();    	non-compiled	[CE]  orphaned  case	10	None	replace
334	[BUG]  [BUGGY]  if(isEmpty(left)||  isArrayTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)||  isArrayTarget(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isArrayTarget(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
335	[BUG]  [BUGGY]  if(isEmpty(left)||  isArrayAccess(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)||  isArrayAccess(parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isArrayAccess(parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
336	[BUG]  [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(right,  parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(right,  parent))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isAssignmentTarget(right,  parent))  {	  if(isEmpty(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	69	None	replace
337	[BUG]  [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(isEquivalentTo(left)||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEquivalentTo(left)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(left)||    isEquivalentTo(parent))    {    	non-compiled	[CE]  orphaned  case	71	None	replace
338	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();          [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(parent)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(parent)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	17	None	replace
