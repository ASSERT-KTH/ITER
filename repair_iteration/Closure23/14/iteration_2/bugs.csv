bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
2	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
3	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
4	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
5	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
6	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(left))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
7	[BUG]  [BUGGY]  if(right!=  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right!=  null  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  ||  isAssignmentTarget(left))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
8	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(left))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
9	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  Node  right  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  parent.getLastChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  parent.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
11	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  parent.getFirstChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  parent.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
12	[BUG]  [BUGGY]  Node  current  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  parent.getFirstChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  parent.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
13	[BUG]  [BUGGY]  Node  right  =  parent.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  parent.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  parent.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
14	[BUG]  [BUGGY]  Node  current  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  parent.getLastChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  parent.getLastChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
15	[BUG]  [BUGGY]  Node  right  =  parent.getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  parent.getParent();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  parent.getParent();	      	non-compiled	[CE]  orphaned  case	7	None	replace
16	[BUG]  [BUGGY]  Node  current  =  parent.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  parent.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  parent.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
17	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
18	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
19	[BUG]  [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(parent)||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(parent)||  isAssignmentTarget(left))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
20	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
21	[BUG]  [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)||  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
22	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(n))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
23	[BUG]  [BUGGY]  if(n  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(n  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n  ==  null  ||  isAssignmentTarget(parent))  {	  if(parent    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
24	[BUG]  [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  &&  isAssignmentTarget(n))  {	  if(parent    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
25	[BUG]  [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right  ==  null  ||  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right  ==  null  ||  isAssignmentTarget(n))  {	  if(parent    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
26	[BUG]  [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(n)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(n)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
27	[BUG]  [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
28	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
29	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if    (isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
30	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
33	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
34	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n,  left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
35	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
36	[BUG]  [BUGGY]  if(n!=  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(n!=  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n!=  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
38	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(right))  {	  if(parent!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
39	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
40	[BUG]  [BUGGY]  if(right!=  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right!=  null  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
41	[BUG]  [BUGGY]  if(n!=  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(n!=  null  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(n!=  null  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
42	[BUG]  [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right!=  null  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right!=  null  &&  isAssignmentTarget(left))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
43	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(left))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
44	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(left))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
45	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(left))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
46	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
47	[BUG]  [BUGGY]  Node  elem  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  elem  =  left.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  elem  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
48	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  right  =  n.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
49	[BUG]  [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  left  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  left  ||  isAssignmentTarget(left))  {	  if(parent    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
50	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(left))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left)||  parent.equals(left))  {	  if(parent    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
51	[BUG]  [BUGGY]  if(left!=  null  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  ||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  ||  isAssignmentTarget(right))  {	  if(parent!=    null    ||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  if(isAssignmentTarget(left,  parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left,  parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left,  parent))  {	  if    (isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
53	[BUG]  [BUGGY]  if(parent!=  null)  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null)  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null)  {	  if    (isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  &&  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(right))  {	  if(parent!=    null    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
55	[BUG]  [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  right  ==  null  ||  isAssignmentTarget(left))  {	  if(parent    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
56	[BUG]  [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left  ==  null  ||  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left  ==  null  ||  isAssignmentTarget(right))  {	  if(parent    ==    null    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
57	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent.getType()  ==  Token.NAME  ||  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
58	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  &&  isAssignmentTarget(right))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
59	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(parent))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(right.getType()  ==  Token.NAME  &&  isAssignmentTarget(left))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
61	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left.getType()  ==  Token.NAME  ||  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
62	[BUG]  [BUGGY]  if(!isAssignmentTarget(left))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(!isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(!isAssignmentTarget(left))  {	  if(isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
63	[BUG]  [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)&&  isAssignmentTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)&&  isAssignmentTarget(right))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
64	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent!=  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
65	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isAssignmentTarget(right)||  parent  ==  null)  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(right))    {    	non-compiled	[CE]  orphaned  case	8	None	replace
66	[BUG]  [BUGGY]  if(left!=  null  &&  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(left!=  null  &&  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(left!=  null  &&  isAssignmentTarget(parent))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
67	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left,  right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left,  right))  {	  if(parent!=    null    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	2	None	replace
68	[BUG]  [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  isAssignmentTarget(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
69	[BUG]  [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isEmpty(left)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isEmpty(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
70	[BUG]  [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isArrayAccess(left)||  isAssignmentTarget(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isArrayAccess(left)||  isAssignmentTarget(parent))  {	  if(isAssignmentTarget(left)||    isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	12	None	replace
71	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(parent))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)||  isEquivalentTo(parent))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isEquivalentTo(parent))  {	  if    (isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	11	None	replace
72	[BUG]  [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(right))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(isAssignmentTarget(left)||  isLocalTarget(right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(isAssignmentTarget(left)||  isLocalTarget(right))  {	  if(isAssignmentTarget(parent))    {    	non-compiled	[CE]  orphaned  case	1	None	replace
73	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME  &&  isAssignmentTarget(n))  {	  if(parent.getType()    ==    Token.NAME    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
74	[BUG]  [BUGGY]  Node  current  =  left.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  left.getNext();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
75	[BUG]  [BUGGY]  Node  current  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  n.getFirstChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
76	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  Node  current  =  left.getFirstChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	Node  current  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
77	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	n  =  parent.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
78	[BUG]  [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();        [BUGGY]  if(parent  ==  null  ||  isAssignmentTarget(left,  right))  {  [BUGGY]    return  n;  }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	if(parent  ==  null  ||  isAssignmentTarget(left,  right))  {	  if(parent    ==    null    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  orphaned  case	9	None	replace
