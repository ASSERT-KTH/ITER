bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right)+  1;	  return    tryFoldExpression(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
2	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  *  1);	  return    tryFoldExpression(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
3	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  +  2);	  return    tryFoldExpression(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
4	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  left  +  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  right,  left  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  right,  left  +  1);	  return    tryFoldExpression(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
5	[BUG]  [BUGGY]  return  tryFoldUpper(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldUpper(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUpper(subtree,  left,  right);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
6	[BUG]  [BUGGY]  return  tryFoldWithUndefined(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithUndefined(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithUndefined(subtree,  left,  right);	  return    tryFoldWithLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	25	None	replace
7	[BUG]  [BUGGY]  return  tryFoldWithEmpty(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithEmpty(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithEmpty(subtree,  left,  right);	  return    tryFoldWithLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	25	None	replace
8	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right)-  1;	  return    tryFoldExpressionOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	18	None	replace
9	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  -  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right  -  2);	  return    tryFoldExpressionOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	18	None	replace
10	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right  *  1);	  return    tryFoldExpressionOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	18	None	replace
11	[BUG]  [BUGGY]  return  tryFoldSetUpperBocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetUpperBocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetUpperBocal(subtree,  left,  right);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
12	[BUG]  [BUGGY]  return  tryFoldSet(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSet(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSet(subtree,  left,  right);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
13	[BUG]  [BUGGY]  return  tryFoldSetLocal(subtree,  right,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetLocal(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetLocal(subtree,  right,  left);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
14	[BUG]  [BUGGY]  return  tryFoldListLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldListLocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldListLocal(subtree,  left,  right);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
15	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  0);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  0);	  return    tryFoldExpressionOperator(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	67	None	replace
16	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  2);	  return    tryFoldExpressionOperator(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	67	None	replace
17	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  3);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  3);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  3);	  return    tryFoldExpressionOperator(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	67	None	replace
18	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  4);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  4);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  4);	  return    tryFoldExpressionOperator(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	67	None	replace
19	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  1);	  return    tryFoldExpressionOperator(subtree,    left,    right,    1);    	non-compiled	[CE]  orphaned  case	67	None	replace
20	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)/  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)/  1;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
21	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  0;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)+  0;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
22	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  2;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)+  2;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
23	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)-  1;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
24	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right)+  1;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
25	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right  +  1);	  return    tryFoldExpressionOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	20	None	replace
26	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right)+  1;	  return    tryFoldExpressionOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	20	None	replace
27	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  +  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right  +  2);	  return    tryFoldExpressionOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	20	None	replace
28	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  result);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  result);	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
29	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
30	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.clone());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.clone());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
31	[BUG]  [BUGGY]  return  tryFoldEmpty(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEmpty(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEmpty(subtree,  left,  right);	  return    tryFoldGetEmpty(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	34	None	replace
32	[BUG]  [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithInstanceof(subtree,  left,  right  +  1);	  return    tryFoldGetInstanceof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	54	None	replace
33	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right  +  1);	  return    tryFoldGetInstanceof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	54	None	replace
34	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right)+  1;	  return    tryFoldGetInstanceof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	54	None	replace
35	[BUG]  [BUGGY]  return  tryFoldExpressionProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionProp(subtree,  left,  right);	  return    tryFoldProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	24	None	replace
36	[BUG]  [BUGGY]  return  tryFoldLocalProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalProp(subtree,  left,  right);	  return    tryFoldProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	24	None	replace
37	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)-  1;	  return    tryFoldExpressionof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  *  1);	  return    tryFoldExpressionof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	3	None	replace
39	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  -  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  -  2);	  return    tryFoldExpressionof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	3	None	replace
40	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right  -  1);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
41	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
42	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right  +  1);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  right,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  right,  left);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
44	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  null);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  null);	  return    tryFoldExpressionOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	66	None	replace
45	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  true);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  true);	  return    tryFoldExpressionOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	66	None	replace
46	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  getConstants());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  getConstants());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  getConstants());	  return    tryFoldExpressionOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	66	None	replace
47	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right  -  1);	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
48	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  right,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  right,  left);	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
49	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right  +  1);	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
50	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right.cloneTree());	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
51	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right.getLastChild());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right.getLastChild());	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
52	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)/  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)/  1;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
53	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  2;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)+  2;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
54	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  0;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)+  0;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
55	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)-  1;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
56	[BUG]  [BUGGY]  return  tryFoldGetElem(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElem(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElem(subtree,  left,  right)+  1;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
57	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  3;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)+  3;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
58	[BUG]  [BUGGY]  return  tryFoldConstantsInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsInstanceof(subtree,  left,  right);	  return    tryFoldSetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	56	None	replace
59	[BUG]  [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetInstanceof(subtree,  left,  right  -  1);	  return    tryFoldSetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	56	None	replace
60	[BUG]  [BUGGY]  return  tryFoldSetInstanceof(subtree,  right,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetInstanceof(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetInstanceof(subtree,  right,  left);	  return    tryFoldSetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	56	None	replace
61	[BUG]  [BUGGY]  return  tryFoldGetBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetBinaryOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetBinaryOperator(subtree,  left,  right);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
62	[BUG]  [BUGGY]  return  tryFoldWithInstanceOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithInstanceOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithInstanceOperator(subtree,  left,  right);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
63	[BUG]  [BUGGY]  return  tryFoldGetRelativeOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetRelativeOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetRelativeOperator(subtree,  left,  right);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
64	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  right,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  right,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  right,  right);	  return    tryFoldExpressionof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	4	None	replace
65	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  false);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
66	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  this);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  this);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
67	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right  -  1);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
68	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  true);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  true);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
69	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
70	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.clone());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.clone());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.clone());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
71	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
72	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right,  false.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right,  false.cloneTree());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
73	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  right,  left.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  right,  left.cloneTree());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
74	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  result);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  result);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
75	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
76	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.clone());	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
77	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
78	[BUG]  [BUGGY]  return  tryFoldWithInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithInstanceOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithInstanceOf(subtree,  left,  right);	  return    tryFoldWithInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
79	[BUG]  [BUGGY]  return  tryFoldConstantsRemove(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsRemove(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsRemove(subtree,  left,  right);	  return    tryFoldRemove(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	50	None	replace
80	[BUG]  [BUGGY]  return  tryFoldEscapeOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEscapeOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEscapeOperator(subtree,  left,  right,  false);	  return    tryFoldExpressionOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
81	[BUG]  [BUGGY]  return  tryFoldGetRight(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetRight(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetRight(subtree,  left,  right);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
82	[BUG]  [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLeft(subtree,  left,  right  -  1);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
83	[BUG]  [BUGGY]  return  tryFoldGetRelative(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetRelative(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetRelative(subtree,  left,  right);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
84	[BUG]  [BUGGY]  return  tryFoldWithEscaped(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithEscaped(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithEscaped(subtree,  left,  right);	  return    tryFoldWithLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	39	None	replace
85	[BUG]  [BUGGY]  return  tryFoldConstantsOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOperator(subtree,  left,  right);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
86	[BUG]  [BUGGY]  return  tryFoldLocalInstanceOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceOperator(subtree,  left,  right);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
87	[BUG]  [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOperator(subtree,  left,  right  -  1);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
88	[BUG]  [BUGGY]  return  tryFoldExprExpression(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExprExpression(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExprExpression(subtree,  left,  right);	  return    tryFoldExpression(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	30	None	replace
89	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  right,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  right,  right);	  return    tryFoldExpression(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	30	None	replace
90	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  null);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  null);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	62	None	replace
91	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	62	None	replace
92	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  getConstants());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  getConstants());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  getConstants());	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	62	None	replace
93	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  0);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  0);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	62	None	replace
94	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
95	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
96	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
97	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
98	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right  -  1);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
99	[BUG]  [BUGGY]  return  tryFoldExpressionEllipse(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionEllipse(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionEllipse(subtree,  left,  right);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
100	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right  +  1);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
101	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  right,  left);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  right,  left);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
102	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right)-  1;	  return    tryFoldExpression(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	28	None	replace
103	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  left  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  right,  left  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  right,  left  -  1);	  return    tryFoldExpression(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	28	None	replace
104	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  -  2);	  return    tryFoldExpression(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	28	None	replace
105	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)/  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)/  1;	  return    tryFoldExpressionof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	58	None	replace
106	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  0;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)+  0;	  return    tryFoldExpressionof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	58	None	replace
107	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  2;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)+  2;	  return    tryFoldExpressionof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	58	None	replace
108	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  3;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)+  3;	  return    tryFoldExpressionof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	58	None	replace
109	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  *  1);	  return    tryFoldLocal(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
110	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  +  2);	  return    tryFoldLocal(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
111	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
112	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right)-  1;	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
113	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
114	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
115	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_BITWISE_OPERAND);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
116	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  FIELD_BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  FIELD_BITWISE_OPERAND);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
117	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
118	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldOperator(subtree,  left,  right);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
119	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  false);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
120	[BUG]  [BUGGY]  return  tryFoldUndefinedOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldUndefinedOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUndefinedOperator(subtree,  left,  right);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
121	[BUG]  [BUGGY]  case  Token.SETELEM:  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.SETELEM:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.SETELEM:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
122	[BUG]  [BUGGY]  case  Token.INSTANCEOF:  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.INSTANCEOF:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.INSTANCEOF:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
123	[BUG]  [BUGGY]  Case  Token.GETELEM:  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  Case  Token.GETELEM:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	Case  Token.GETELEM:	  case    Token.GETELEM:    	non-compiled	[CE]  ';'  expected	11	None	replace
124	[BUG]  [BUGGY]  case  Token.BLOCK:  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.BLOCK:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.BLOCK:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
125	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
126	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right  -  1);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
127	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right  +  1);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
128	[BUG]  [BUGGY]  return  tryFoldConstant(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstant(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstant(subtree,  left,  right);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
129	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.getType());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree.getType());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree.getType());	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
130	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  +  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  +  2);	  return    tryFoldExpressionof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	46	None	replace
131	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)-  1;	  return    tryFoldLocal(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
132	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right  -  1);	  return    tryFoldLocal(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
133	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  -  2);	  return    tryFoldLocal(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
134	[BUG]  [BUGGY]  return  tryFoldWithExpression(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithExpression(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithExpression(subtree,  left,  right);	  return    tryFoldWithDeepest(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	65	None	replace
135	[BUG]  [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithInstanceof(subtree,  left,  right  -  1);	  return    tryFoldGetInstanceof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	53	None	replace
136	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGetInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldGetInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGetInstanceof(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
137	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldInstanceof(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
138	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldBinaryOperator(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
139	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldWithLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldWithLocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldWithLocal(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
140	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldSetLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldSetLocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldSetLocal(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
141	[BUG]  [BUGGY]  Case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  Case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	Case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	12	None	replace
142	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
143	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
144	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  right);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
145	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
146	[BUG]  [BUGGY]  return  tryFoldWithLocalInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithLocalInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithLocalInstanceof(subtree,  left,  right);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
147	[BUG]  [BUGGY]  return  tryFoldUndefinedInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldUndefinedInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUndefinedInstanceof(subtree,  left,  right);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
148	[BUG]  [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceof(subtree,  left,  right  -  1);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
149	[BUG]  [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceof(subtree,  left,  right  +  1);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
150	[BUG]  [BUGGY]  return  tryFoldWithLm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithLm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithLm(subtree,  left,  right);	  return    tryFoldGetLm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
151	[BUG]  [BUGGY]  return  tryFoldGetLm(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLm(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLm(subtree,  left,  right  +  1);	  return    tryFoldGetLm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
152	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldWithProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldWithProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldWithProp(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
153	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldSetProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldSetProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldSetProp(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
154	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldProp(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
155	[BUG]  [BUGGY]  return  tryFoldWithLarger(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithLarger(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithLarger(subtree,  left,  right  +  1);	  return    tryFoldGetLarger(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	68	None	replace
156	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right  -  1);	  return    tryFoldGetLarger(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	68	None	replace
157	[BUG]  [BUGGY]  return  tryFoldConstantsInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsInstanceOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsInstanceOf(subtree,  left,  right);	  return    tryFoldInstanceOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	33	None	replace
158	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getParent());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getParent());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getParent());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
159	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCENAME_PROP));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCENAME_PROP));  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCENAME_PROP));	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
160	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.getType());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.getType());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree.getType());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
161	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getReturnType());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getReturnType());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getReturnType());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
162	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getSimpleName());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getSimpleName());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getSimpleName());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
163	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)/  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)/  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)/  1;	  return    tryFoldLocal(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	60	None	replace
164	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  0;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  0;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)+  0;	  return    tryFoldLocal(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	60	None	replace
165	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  2;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)+  2;	  return    tryFoldLocal(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	60	None	replace
166	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  3;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)+  3;	  return    tryFoldLocal(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	60	None	replace
167	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  4;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  4;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)+  4;	  return    tryFoldLocal(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	60	None	replace
168	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
169	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right  -  1);	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
170	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right  +  1);	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
171	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  right,  left);	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
172	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right,  subtree.getType());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right,  subtree.getType());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right,  subtree.getType());	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
173	[BUG]  [BUGGY]  return  tryFoldSetProp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetProp(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetProp(subtree,  left,  right  +  1);	  return    tryFoldSetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	38	None	replace
174	[BUG]  [BUGGY]  return  tryFoldSetProp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetProp(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetProp(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldSetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	38	None	replace
175	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right  +  1);	  return    tryFoldLocalOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
176	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  this);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  this);	  return    tryFoldLocalOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
177	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  true);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  true);	  return    tryFoldLocalOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
178	[BUG]  [BUGGY]  return  tryFoldConstantsUndefined(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsUndefined(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsUndefined(subtree,  left,  right);	  return    tryFoldUndefined(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
179	[BUG]  [BUGGY]  return  tryFoldUndefined(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldUndefined(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUndefined(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldUndefined(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
180	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right,  subtree.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right,  subtree.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right,  subtree.cloneTree());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
181	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.clone());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.clone());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.clone());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
182	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right,  false.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right,  false.cloneTree());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
183	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  right,  left.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  right,  left.cloneTree());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
184	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneNode());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.cloneNode());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
185	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  left,  right  -  1);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
186	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  left,  right  +  1);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
187	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  right,  left);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOp(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  right,  left);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
188	[BUG]  [BUGGY]  return  tryFoldInstanceOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOp(subtree,  left,  right);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
189	[BUG]  [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOf(subtree,  left,  right  -  1);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
190	[BUG]  [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOf(subtree,  left,  right  +  1);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
191	[BUG]  [BUGGY]  return  tryFoldExpressionOf(subtree,  right,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOf(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOf(subtree,  right,  left);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
192	[BUG]  [BUGGY]  return  tryFoldWithElevm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithElevm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithElevm(subtree,  left,  right);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
193	[BUG]  [BUGGY]  return  tryFoldElevm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElevm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElevm(subtree,  left,  right);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
194	[BUG]  [BUGGY]  return  tryFoldGetLeast(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLeast(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLeast(subtree,  left,  right);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
195	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  >  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  >  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  >  1);	  return    tryFoldExpression(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	28	None	replace
196	[BUG]  [BUGGY]  return  tryFoldLearger(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLearger(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLearger(subtree,  left,  right);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
197	[BUG]  [BUGGY]  return  tryFoldLarger(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLarger(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLarger(subtree,  left,  right  -  1);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
198	[BUG]  [BUGGY]  return  tryFoldLarger(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLarger(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLarger(subtree,  left,  right  +  1);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
199	[BUG]  [BUGGY]  return  tryFoldLeft(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLeft(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLeft(subtree,  left,  right);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
200	[BUG]  [BUGGY]  return  tryFoldGetLimit(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLimit(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLimit(subtree,  left,  right);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
201	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  4;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  4;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)+  4;	  return    tryFoldGetElm(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	64	None	replace
202	[BUG]  [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetInstanceof(subtree,  left,  right  +  1);	  return    tryFoldSetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	56	None	replace
203	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGetUndefined(subtree,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldGetUndefined(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGetUndefined(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
204	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  right,  left);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  right,  left);	  case    Token.GETELEM:    return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
205	[BUG]  [BUGGY]  return  tryFoldELEmBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldELEmBinaryOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldELEmBinaryOperator(subtree,  left,  right);	  return    tryFoldELEm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
206	[BUG]  [BUGGY]  return  tryFoldELm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldELm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldELm(subtree,  left,  right);	  return    tryFoldELEm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
207	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  4;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  4;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)+  4;	  return    tryFoldExpressionof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	58	None	replace
208	[BUG]  [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOperator(subtree,  left,  right,  subtree);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
209	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right;	  return    tryFoldExpressionOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
210	[BUG]  [BUGGY]  return  tryFoldWithDeclaration(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithDeclaration(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithDeclaration(subtree,  left,  right);	  return    tryFoldWithInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
211	[BUG]  [BUGGY]  return  tryFoldLocalInstanceof(subtree,  right,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceof(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceof(subtree,  right,  left);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
212	[BUG]  [BUGGY]  return  tryFoldElementExpressionOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElementExpressionOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElementExpressionOf(subtree,  left,  right);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
213	[BUG]  [BUGGY]  return  tryFoldElemExpressionOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemExpressionOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemExpressionOf(subtree,  left,  right);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
214	[BUG]  [BUGGY]  case  Token.NEW:  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.NEW:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.NEW:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
215	[BUG]  [BUGGY]  case  Token.ELEMENT:  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.ELEMENT:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.ELEMENT:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
216	[BUG]  [BUGGY]  case  Token.NAME:  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.NAME:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.NAME:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
217	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
218	[BUG]  [BUGGY]  return  tryFoldConstants(subtree);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree);	  return    tryFoldBinaryOperator(subtree);    	non-compiled	[CE]  orphaned  case	13	None	replace
219	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneNode());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneNode());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
220	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneBinaryOperator());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneBinaryOperator());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneBinaryOperator());	  return    tryFoldExpressionof(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	57	None	replace
221	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  equal);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  equal);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  equal);	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
222	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right)+  1;	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
223	[BUG]  [BUGGY]  return  tryFoldExprOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExprOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExprOperator(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	4	None	replace
224	[BUG]  [BUGGY]  return  tryFoldElementExpressionof(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElementExpressionof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElementExpressionof(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	4	None	replace
225	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right  *  1);	  return    tryFoldGetInstanceof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	54	None	replace
226	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right.cloneTree());	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
227	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  +  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  +  2);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right  +  2);	  return    tryFoldGetLarger(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	68	None	replace
228	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  value);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  value);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  value);	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	44	None	replace
229	[BUG]  [BUGGY]  return  tryFoldWithEliminal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWithEliminal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithEliminal(subtree,  left,  right);	  return    tryFoldWithElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
230	[BUG]  [BUGGY]  return  tryFoldLocalConstantsOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalConstantsOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalConstantsOf(subtree,  left,  right);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
231	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldLocalOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
232	[BUG]  [BUGGY]  return  tryFoldSetLocal(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetLocal(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetLocal(subtree,  left,  right  -  1);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
233	[BUG]  [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOperator(subtree,  left,  right  -  1);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
234	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getConstants());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getConstants());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getConstants());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
235	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.NAME_PROP));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.NAME_PROP));  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.NAME_PROP));	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
236	[BUG]  [BUGGY]  return  tryFoldLocalInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceOf(subtree,  left,  right);	  return    tryFoldInstanceOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	33	None	replace
237	[BUG]  [BUGGY]  return  tryFoldInstanceOf(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOf(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOf(subtree,  left,  right  -  1);	  return    tryFoldInstanceOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	33	None	replace
238	[BUG]  [BUGGY]  return  tryFoldLm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLm(subtree,  left,  right);	  return    tryFoldGetLm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
239	[BUG]  [BUGGY]  return  tryFoldSetLm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetLm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetLm(subtree,  left,  right);	  return    tryFoldGetLm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
240	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  /  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  /  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  /  1);	  return    tryFoldExpressionof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	46	None	replace
241	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right.cloneTree());	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
242	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
243	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right  -  1);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
244	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  subtree);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
245	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  INDEX_GETELEM_INDEX_ERROR);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
246	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_GETELEM);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_GETELEM);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  DEFAULT_GETELEM);	  return    tryFoldExpressionOperator(subtree,    left,    right,    BITWISE_OPERAND);    	non-compiled	[CE]  orphaned  case	19	None	replace
247	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right.cloneTree());	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
248	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElse(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right)+  1;	  return    tryFoldElse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	59	None	replace
249	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right)-  1;	  return    tryFoldGetInstanceof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	53	None	replace
250	[BUG]  [BUGGY]  return  tryFoldElemProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemProp(subtree,  left,  right);	  return    tryFoldProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	24	None	replace
251	[BUG]  [BUGGY]  return  tryFoldElem(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElem(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElem(subtree,  left,  right  +  1);	  return    tryFoldExpression(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	29	None	replace
252	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
253	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  subtree);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
254	[BUG]  [BUGGY]  return  tryFoldLocalDeclarationOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalDeclarationOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalDeclarationOperator(subtree,  left,  right);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
255	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  3;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  3;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)+  3;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
256	[BUG]  [BUGGY]  return  tryFoldGetProp(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetProp(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetProp(subtree,  left,  right)+  1;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
257	[BUG]  [BUGGY]  return  tryFoldElementExpressionOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElementExpressionOp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElementExpressionOp(subtree,  left,  right);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
258	[BUG]  [BUGGY]  return  tryFoldLocalRemove(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalRemove(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalRemove(subtree,  left,  right);	  return    tryFoldRemove(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	50	None	replace
259	[BUG]  [BUGGY]  return  tryFoldRemove(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldRemove(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldRemove(subtree,  left,  right  -  1);	  return    tryFoldRemove(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	50	None	replace
260	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.cloneTree(),  MAX_FOLD_NUMBER);	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
261	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneBinaryOperator());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneBinaryOperator());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.cloneBinaryOperator());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
262	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.clonePosition());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.clonePosition());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
263	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneOperator());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneOperator());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.cloneOperator());	  return    tryFoldExpression(subtree,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	31	None	replace
264	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right;	  return    tryFoldExpressionof(subtree,    left,    right    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
265	[BUG]  [BUGGY]  return  tryFoldOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldOperator(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldOperator(subtree,  left,  right  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
266	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right;	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  ')'  expected	8	None	replace
267	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  right,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  right,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  right,  right);	  return    tryFoldInstanceof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	70	None	replace
268	[BUG]  [BUGGY]  return  tryFoldEntryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEntryOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEntryOperator(subtree,  left,  right);	  return    tryFoldInstanceof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	70	None	replace
269	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  right,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  right,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  right,  right,  false);	  return    tryFoldExpressionOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	22	None	replace
270	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  -  1);	  return    tryFoldExpressionOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	18	None	replace
271	[BUG]  [BUGGY]  return  tryFoldGetExpressionof(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetExpressionof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetExpressionof(subtree,  left,  right);	  return    tryFoldGetExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	36	None	replace
272	[BUG]  [BUGGY]  return  tryFoldGetExpressionOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetExpressionOperator(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetExpressionOperator(subtree,  left,  right);	  return    tryFoldGetExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	36	None	replace
273	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldExpressionOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	20	None	replace
274	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right.cloneTree()  +  1);	  return    tryFoldExpressionOperator(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	20	None	replace
275	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree()  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right.cloneTree()  -  1);	  return    tryFoldLocal(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
276	[BUG]  [BUGGY]  return  tryFoldUndefined(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldUndefined(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUndefined(subtree,  left,  right  -  1);	  return    tryFoldUndefined(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
277	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
278	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  this);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  this);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
279	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right,  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right,  1);	  return    tryFoldElemOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
280	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right)+  1;	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
281	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipse(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right,  subtree);	  return    tryFoldEllipse(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	49	None	replace
282	[BUG]  [BUGGY]  return  tryFoldElemOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOp(subtree,  left,  right);	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
283	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  left,  right.cloneTree());	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
284	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  left,  right)+  1;	  return    tryFoldExpressionOp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
285	[BUG]  [BUGGY]  return  tryFoldElemOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOf(subtree,  left,  right);	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
286	[BUG]  [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOf(subtree,  left,  right)+  1;	  return    tryFoldExpressionOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
287	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
288	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right,  subtree);	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
289	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  subtree.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right,  subtree.getLastChild());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right,  subtree.getLastChild());	  return    tryFoldConstantsOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
290	[BUG]  [BUGGY]  return  tryFoldElemof(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElemof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemof(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	4	None	replace
291	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree()  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree()  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right.cloneTree()  +  1);	  return    tryFoldLocal(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
292	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  /  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  /  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  /  1);	  return    tryFoldLocal(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	41	None	replace
293	[BUG]  [BUGGY]  return  tryFoldGetEmpty(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetEmpty(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetEmpty(subtree,  left,  right  -  1);	  return    tryFoldGetEmpty(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	34	None	replace
294	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right)-  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElm(subtree,  left,  right)-  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right)-  1;	  return    tryFoldElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
295	[BUG]  [BUGGY]  return  tryFoldLarger(subtree,  right,  left);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLarger(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLarger(subtree,  right,  left);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
296	[BUG]  [BUGGY]  return  tryFoldLarger(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLarger(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLarger(subtree,  left,  right)+  1;	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
297	[BUG]  [BUGGY]  return  tryFoldElarger(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldElarger(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElarger(subtree,  left,  right);	  return    tryFoldLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	40	None	replace
298	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGet(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldGet(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGet(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
299	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldAndOr(subtree,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.GETELEM:  return  tryFoldAndOr(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldAndOr(subtree,  left,  right);	  case    Token.GETELEM:    return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
300	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  value);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  value);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  value);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
301	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right,    subtree);    	non-compiled	[CE]  orphaned  case	61	None	replace
302	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  +  1);	  return    tryFoldExpressionof(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	46	None	replace
303	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneTree()  -  1);	  return    tryFoldExpressionof(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	3	None	replace
304	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  false);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
305	[BUG]  [BUGGY]  return  tryFoldInstanceOf(subtree,  right,  left);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOf(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOf(subtree,  right,  left);	  return    tryFoldInstanceOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	33	None	replace
306	[BUG]  [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
307	[BUG]  [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
308	[BUG]  [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOperator(subtree,  left,  right,  subtree);	  return    tryFoldGetInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	55	None	replace
309	[BUG]  [BUGGY]  return  tryFoldLitProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLitProp(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLitProp(subtree,  left,  right);	  return    tryFoldProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	24	None	replace
310	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)*  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)*  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)*  1;	  return    tryFoldInstanceof(subtree,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	71	None	replace
311	[BUG]  [BUGGY]  return  tryFoldDeepest(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeepest(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeepest(subtree,  left,  right);	  return    tryFoldWithDeepest(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	65	None	replace
312	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  this,  MAX_FOLD_NUMBER);	  return    tryFoldExpressionOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	66	None	replace
313	[BUG]  [BUGGY]  return  tryFoldEllipsis(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldEllipsis(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipsis(subtree,  left,  right);	  return    tryFoldEscape(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
314	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right,  this);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right,  this);	  return    tryFoldBinaryOperator(subtree,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	62	None	replace
315	[BUG]  [BUGGY]  return  tryFoldLeadingInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLeadingInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLeadingInstanceof(subtree,  left,  right);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
316	[BUG]  [BUGGY]  return  tryFoldLeftInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLeftInstanceof(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLeftInstanceof(subtree,  left,  right);	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
317	[BUG]  [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceof(subtree,  left,  right)+  1;	  return    tryFoldLocalInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	69	None	replace
318	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getFirstChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getFirstChild());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getFirstChild());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
319	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCEFILE_PROP));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCEFILE_PROP));  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getProp(Node.SOURCEFILE_PROP));	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
320	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  result.getType());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  result.getType());  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  result.getType());	  return    tryFoldExpressionOperator(subtree,    left,    right,    subtree.getType());    	non-compiled	[CE]  orphaned  case	21	None	replace
321	[BUG]  [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
322	[BUG]  [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right,  this);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOperator(subtree,  left,  right,  this);	  return    tryFoldInstanceOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	37	None	replace
323	[BUG]  [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElevm(subtree,  left,  right  -  1);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
324	[BUG]  [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right  +  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElevm(subtree,  left,  right  +  1);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
325	[BUG]  [BUGGY]  return  tryFoldGetRelevm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetRelevm(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetRelevm(subtree,  left,  right);	  return    tryFoldGetElevm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
326	[BUG]  [BUGGY]  return  tryFoldLeftLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLeftLocal(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLeftLocal(subtree,  left,  right);	  return    tryFoldLocal(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	42	None	replace
327	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  right,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocal(subtree,  right,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  right,  right);	  return    tryFoldLocal(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	42	None	replace
328	[BUG]  [BUGGY]  return  tryFoldLeaf(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLeaf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLeaf(subtree,  left,  right);	  return    tryFoldLocal(subtree,    right,    left);    	non-compiled	[CE]  orphaned  case	42	None	replace
329	[BUG]  [BUGGY]  return  tryFoldSetProp(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetProp(subtree,  left,  right  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetProp(subtree,  left,  right  -  1);	  return    tryFoldSetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	38	None	replace
330	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right,  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right,  1);	  return    tryFoldDeclarationOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
331	[BUG]  [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLeft(subtree,  left,  right)+  1;	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
332	[BUG]  [BUGGY]  return  tryFoldGetUndefined(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetUndefined(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetUndefined(subtree,  left,  right);	  return    tryFoldGetLeft(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	63	None	replace
333	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right,  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right,  1);	  return    tryFoldLocalOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
334	[BUG]  [BUGGY]  return  tryFoldWith(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldWith(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWith(subtree,  left,  right);	  return    tryFoldWithInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
335	[BUG]  [BUGGY]  return  tryFoldSetUpperBound(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetUpperBound(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetUpperBound(subtree,  left,  right);	  return    tryFoldSetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	26	None	replace
336	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right)+  1;  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right)+  1;	  return    tryFoldGetLarger(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	68	None	replace
337	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  *  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  *  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right  *  1);	  return    tryFoldGetLarger(subtree,    left,    right    +    1);    	non-compiled	[CE]  orphaned  case	68	None	replace
338	[BUG]  [BUGGY]  case  Token.START:  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  case  Token.START:  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.START:	  case    Token.GETELEM:    	non-compiled	[CE]  orphaned  case	11	None	replace
339	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree()  -  1);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right.cloneTree()  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	8	None	replace
340	[BUG]  [BUGGY]  return  tryFoldSetInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldSetInstanceOf(subtree,  left,  right);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetInstanceOf(subtree,  left,  right);	  return    tryFoldGetInstanceOf(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	16	None	replace
341	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  right,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  right,  left);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  right,  left);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
342	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:      [BUGGY]  return  tryFoldConstants(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right,  subtree);	  return    tryFoldConstants(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
