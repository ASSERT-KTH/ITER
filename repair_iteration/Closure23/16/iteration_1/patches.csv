bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOf(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOf(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
2	[BUG]  [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOp(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOp(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
3	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  -  1);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
4	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  right,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionof(subtree,  right,  left);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  right,  left);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
5	[BUG]  [BUGGY]  return  tryFoldEscape(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldEscape(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEscape(subtree,  left,  right);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
6	[BUG]  [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocalOperator(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalOperator(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
7	[BUG]  [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldConstantsOf(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstantsOf(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right  -  1);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
9	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
10	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGetProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  case  Token.GETELEM:  return  tryFoldGetProp(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGetProp(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
11	[BUG]  [BUGGY]  case  Token.GETELEM:  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  case  Token.GETELEM:  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:	      	non-compiled	[CE]  orphaned  case	7	None	replace
12	[BUG]  [BUGGY]  case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	case  Token.GETELEM:  return  tryFoldGetLocal(subtree,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
13	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldBinaryOperator(subtree);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree);	      	non-compiled	[CE]  orphaned  case	7	None	replace
14	[BUG]  [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithInstanceof(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithInstanceof(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
15	[BUG]  [BUGGY]  return  tryFoldUndefined(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldUndefined(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldUndefined(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
16	[BUG]  [BUGGY]  return  tryFoldGetInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetInstanceOf(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOf(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
17	[BUG]  [BUGGY]  return  tryFoldAndOr(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldAndOr(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldAndOr(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
18	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right  -  1);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  BITWISE_OPERAND);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  BITWISE_OPERAND);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  BITWISE_OPERAND);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
20	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right  +  1);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
21	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getType());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getType());  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree.getType());	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
22	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  false);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  false);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
23	[BUG]  [BUGGY]  return  tryFoldWithProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithProp(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithProp(subtree,  left,  right);	  return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
24	[BUG]  [BUGGY]  return  tryFoldProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldProp(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldProp(subtree,  left,  right);	  return    tryFoldGetProp(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
25	[BUG]  [BUGGY]  return  tryFoldWithLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithLocal(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithLocal(subtree,  left,  right);	  return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
26	[BUG]  [BUGGY]  return  tryFoldSetLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldSetLocal(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetLocal(subtree,  left,  right);	  return    tryFoldGetLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	12	None	replace
27	[BUG]  [BUGGY]  return  tryFoldConstants(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldConstants(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldConstants(subtree,  left,  right);	  return    tryFoldInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
28	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  -  1);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
29	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right  +  1);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
30	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  left);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpression(subtree,  right,  left);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  right,  left);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
31	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpression(subtree,  left,  right.cloneTree());  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right.cloneTree());	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
32	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  -  1);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
33	[BUG]  [BUGGY]  return  tryFoldInstanceOf(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldInstanceOf(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOf(subtree,  left,  right);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  return  tryFoldGetEmpty(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetEmpty(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetEmpty(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
35	[BUG]  [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetElevm(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElevm(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
36	[BUG]  [BUGGY]  return  tryFoldGetExpression(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetExpression(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetExpression(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
37	[BUG]  [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldInstanceOperator(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceOperator(subtree,  left,  right);	  return    tryFoldWithElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  return  tryFoldSetProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldSetProp(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetProp(subtree,  left,  right);	  return    tryFoldGet(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
39	[BUG]  [BUGGY]  return  tryFoldWithLarger(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithLarger(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithLarger(subtree,  left,  right);	  return    tryFoldGetLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
40	[BUG]  [BUGGY]  return  tryFoldLarger(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLarger(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLarger(subtree,  left,  right);	  return    tryFoldGetLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
41	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right  +  1);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
42	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  right,  left);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocal(subtree,  right,  left);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  right,  left);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
43	[BUG]  [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldElemOperator(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElemOperator(subtree,  left,  right);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
44	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  subtree);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  subtree);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
45	[BUG]  [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldDeclarationOperator(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldDeclarationOperator(subtree,  left,  right);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
46	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right  +  1);	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
47	[BUG]  [BUGGY]  return  tryFoldElm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldElm(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElm(subtree,  left,  right);	  return    tryFoldElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
48	[BUG]  [BUGGY]  return  tryFoldELEm(subtree,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldELEm(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldELEm(subtree,  left,  right);	  return    tryFoldElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  return  tryFoldEllipse(subtree,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldEllipse(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldEllipse(subtree,  left,  right);	  return    tryFoldElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
50	[BUG]  [BUGGY]  return  tryFoldRemove(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldRemove(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldRemove(subtree,  left,  right);	  return    tryFoldGet(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	15	None	replace
51	[BUG]  [BUGGY]  return  tryFoldWithElm(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithElm(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithElm(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
52	[BUG]  [BUGGY]  return  tryFoldGetLm(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetLm(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLm(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
53	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  -  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  -  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right  -  1);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right  +  1);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
55	[BUG]  [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetInstanceOperator(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceOperator(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
56	[BUG]  [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldSetInstanceof(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldSetInstanceof(subtree,  left,  right);	  return    tryFoldGetInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
57	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right.cloneTree());  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right.cloneTree());	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
58	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right)+  1;  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right)+  1;	  return    tryFoldExpressionof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
59	[BUG]  [BUGGY]  return  tryFoldElse(subtree,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldElse(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElse(subtree,  left,  right);	  return    tryFoldElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  1;  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right)+  1;	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
61	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
62	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
63	[BUG]  [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetLeft(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLeft(subtree,  left,  right);	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
64	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetElm(subtree,  left,  right)+  1;  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right)+  1;	  return    tryFoldGetElm(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	13	None	replace
65	[BUG]  [BUGGY]  return  tryFoldWithDeepest(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldWithDeepest(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithDeepest(subtree,  left,  right);	  return    tryFoldWithElem(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
66	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  this);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  this);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
67	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right,  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right,  1);	  return    tryFoldExpressionOperator(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
68	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right  +  1);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right  +  1);	  return    tryFoldGetLarger(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	14	None	replace
69	[BUG]  [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldLocalInstanceof(subtree,  left,  right);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocalInstanceof(subtree,  left,  right);	  return    tryFoldInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
70	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  right,  left);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldInstanceof(subtree,  right,  left);  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  right,  left);	  return    tryFoldInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
71	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:    [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right)+  1;  [BUGGY]      case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right)+  1;	  return    tryFoldInstanceof(subtree,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
