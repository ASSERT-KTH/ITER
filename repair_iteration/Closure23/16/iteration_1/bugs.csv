bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldInstanceof(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldInstanceof(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
2	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
3	[BUG]  [BUGGY]  return  tryFoldWithElem(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldWithElem(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldWithElem(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
4	[BUG]  [BUGGY]  return  tryFoldGetProp(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGetProp(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetProp(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
5	[BUG]  [BUGGY]  return  tryFoldElem(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldElem(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldElem(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
6	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldExpression(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpression(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
7	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]    [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	  	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
8	[BUG]  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldExpressionof(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionof(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
9	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldLocal(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldLocal(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
10	[BUG]  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldExpressionOperator(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldExpressionOperator(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
11	[BUG]  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGetInstanceof(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetInstanceof(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
12	[BUG]  [BUGGY]  return  tryFoldGetLocal(subtree,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGetLocal(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLocal(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
13	[BUG]  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGetElm(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetElm(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
14	[BUG]  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGetLarger(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGetLarger(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
15	[BUG]  [BUGGY]  return  tryFoldGet(subtree,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  if  (right  ==  null)  {  return  subtree;  }  switch(subtree.getType())  {  case  Token.GETPROP:  return  tryFoldGetProp(subtree,  left,  right);  case  Token.GETELEM:  [BUGGY]  return  tryFoldGet(subtree,  left,  right);  [BUGGY]    case  Token.INSTANCEOF:  return  tryFoldInstanceof(subtree,  left,  right);  case  Token.AND:  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  late  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  result  right  subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	return  tryFoldGet(subtree,  left,  right);	return  tryFoldGetElem(subtree,  left,  right);  	non-compiled	[CE]  orphaned  case	31	None	replace
