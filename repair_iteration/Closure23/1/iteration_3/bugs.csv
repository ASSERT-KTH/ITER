bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
2	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getFirstChild();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
3	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if(right!=  null)  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
4	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
5	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getParent();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getParent();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getNext();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
9	[BUG]  [BUGGY]  if(!right.isNumber()  ||  right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
10	[BUG]  [BUGGY]  if(!right.isNumber()  ||  left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
11	[BUG]  [BUGGY]  if(!right.isNumber()  ||!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	186	None	replace
12	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.isObject())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
13	[BUG]  [BUGGY]  if  (!right.isObject()  ||  right.isObject())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isObject()  ||  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isObject()  ||  right.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
14	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  right.isObject())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  right.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
15	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.isObject())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  parent.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
16	[BUG]  [BUGGY]  if  (!left.isObject()  ||  right.isObject())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isObject()  ||  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isObject()  ||  right.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
17	[BUG]  [BUGGY]  if  (!right.isObject()  ||  right.isArray())  {  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isObject()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isObject()  ||  right.isArray())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
18	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
19	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
20	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	88	None	add
21	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	88	None	add
22	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
23	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
24	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!right.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
25	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  If  (!right.isNumber()  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  If  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    If  (!right.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	53	None	add
26	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!left.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
27	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!RIGHT.isNumber()  ||!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!RIGHT.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!RIGHT.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
28	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!right.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
29	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!left.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
30	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!left.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
31	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||!left.isEmpty())  {	  if    (!right.isNumber()    ||!left.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
32	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
33	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
34	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
36	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
37	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  parent);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext(),  parent);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext(),  parent);	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	156	None	replace
38	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  -  parent.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext()  -  parent.getLastChild();	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
39	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &  parent.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  &  parent.getType()  ==  Token.FUNCTION;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext()  &  parent.getType()  ==  Token.FUNCTION;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
40	[BUG]  [BUGGY]  if  (!right.isArray()  &&  parent.equals(left))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  parent.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  parent.equals(left))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
41	[BUG]  [BUGGY]  if  (!right.isArray()  ||  left.equals(right.getString()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  left.equals(right.getString()))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  left.equals(right.getString()))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
42	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  parent.equals(left))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  parent.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  parent.equals(left))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
43	[BUG]  [BUGGY]  if  (!right.isArray()  ||  left.equals(right))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  left.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  left.equals(right))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
44	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
45	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
46	[BUG]  [BUGGY]  if(!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
47	[BUG]  [BUGGY]  Node  current  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  parent.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getLastChild();	  Node    current    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  Node  current  =  right.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  right.getFirstChild();	  Node    current    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
49	[BUG]  [BUGGY]  Node  current  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getLastChild();	  Node    current    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getLastChild();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
51	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (isAssignmentTarget(right))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (isAssignmentTarget(right))  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
52	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!left.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
53	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
54	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
55	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
56	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
57	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    If  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	115	None	add
58	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
59	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
60	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(right))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  isAssignmentTarget(right))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
61	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&  isAssignmentTarget(right))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&  isAssignmentTarget(right))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
62	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
63	[BUG]  [BUGGY]  if  (!left.isEmpty()  ||  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  ||  isAssignmentTarget(n))  {	  if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
64	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(parent))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  isAssignmentTarget(parent))  {	  if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
65	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
66	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
67	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
68	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
69	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
70	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
71	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
72	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!left.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
73	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
74	[BUG]  [BUGGY]  If  (!right.isEmpty())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    If    (!right.isEmpty())    {    	non-compiled	[CE]  ';'  expected	101	None	replace
75	[BUG]  [BUGGY]  if(!left.isEmpty())  {  If  (!right.isEmpty())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty())  {  If  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty())  {  If  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    If    (!right.isEmpty())    {    	non-compiled	[CE]  ';'  expected	101	None	replace
76	[BUG]  [BUGGY]  if(right.isEmpty())  {  If  (!right.isEmpty())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  If  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {  If  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    If    (!right.isEmpty())    {    	non-compiled	[CE]  ';'  expected	101	None	replace
77	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!left.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(n)||!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(n)||!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(n)||!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!left.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  if(n!=  null  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n!=  null  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n!=  null  &&!right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
80	[BUG]  [BUGGY]  if(parent!=  null  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null  &&!right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
81	[BUG]  [BUGGY]  if(left!=  null  &&  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  &&  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  &&  right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
82	[BUG]  [BUGGY]  if(left!=  null  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	207	None	replace
83	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
84	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
85	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
86	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
87	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
88	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()!=  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
89	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
90	[BUG]  [BUGGY]  if  (!left.isEmpty()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
91	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
92	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  parent.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
93	[BUG]  [BUGGY]  if  (!left.isArray()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  right.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
94	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
95	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
96	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
97	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
98	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
99	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
100	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
101	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
102	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    If  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	134	None	add
103	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
104	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
105	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
106	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  &&  parent.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isEmpty()  &&  parent.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
107	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    if  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
108	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  If  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  If  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    If  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	107	None	add
109	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
110	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    if  (!left.isNumber()  &&  isAssignmentTarget(right))  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
111	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
112	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
113	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
114	[BUG]  [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
115	[BUG]  [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
116	[BUG]  [BUGGY]  If  (right.isNumber())  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
117	[BUG]  [BUGGY]  If  (parent.isNumber())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (parent.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
118	[BUG]  [BUGGY]  If  (left.isNumber())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (left.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
119	[BUG]  [BUGGY]  If  (n.isNumber())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (n.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (n.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
120	[BUG]  [BUGGY]  If  (right.isEmpty())  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right.isEmpty())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  ';'  expected	63	None	replace
121	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
122	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  If  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  If  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    If  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
123	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!left.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
124	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!RIGHT.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!RIGHT.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!RIGHT.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
125	[BUG]  [BUGGY]  If  (!right.isNumber()  &&!left.isEmpty())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
126	[BUG]  [BUGGY]  If  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
127	[BUG]  [BUGGY]  If  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
128	[BUG]  [BUGGY]  If  (!right.isEmpty()  &&!left.isEmpty())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
129	[BUG]  [BUGGY]  If  (!left.isNumber()  &&!right.isEmpty())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
130	[BUG]  [BUGGY]  If  (!right.isNumber()  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
131	[BUG]  [BUGGY]  If  (!right.isEmpty()  ||!left.isEmpty())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  ||!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
132	[BUG]  [BUGGY]  if(n.isNumber())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber())  {	  if    (right.isNumber())    {    if    (right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
133	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isNumber())  {	  if    (right.isNumber())    {    if    (right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
134	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
135	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
136	[BUG]  [BUGGY]  n  =  left.getFirstChild();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  left.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  left.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
137	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
138	[BUG]  [BUGGY]  if(left.getType()  ==  Token.RETURN)  {  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.RETURN)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.RETURN)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
139	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
140	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
141	[BUG]  [BUGGY]  If  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
142	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(n))  {  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
143	[BUG]  [BUGGY]  If  (!parent.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!parent.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!parent.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
144	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
145	[BUG]  [BUGGY]  If  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  ';'  expected	11	None	replace
146	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	118	None	replace
147	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	91	None	replace
148	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||!right.isEmpty())    {    if  (!left.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	55	None	add
149	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  If  (!left.isNumber()  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  If  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||!right.isEmpty())    {    If  (!left.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	55	None	add
150	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!right.isEmpty())  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||!right.isEmpty())    {    if  (!right.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	55	None	add
151	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||! "right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||! "right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||!right.isEmpty())    {    if  (!left.isNumber()  ||! "right.isEmpty())  {	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
152	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	113	None	add
153	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	113	None	add
154	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	113	None	add
155	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	113	None	add
156	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	113	None	add
157	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  parent.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	113	None	add
158	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isEmpty())  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
159	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isArray())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isArray())  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
160	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isExtern())  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isExtern())  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
161	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isAssignmentOp())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isAssignmentOp())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isAssignmentOp())  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
162	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isObject())  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isObject())  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
163	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isAssignableFrom(left))  {  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isAssignableFrom(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isAssignableFrom(left))  {	  if(right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
164	[BUG]  [BUGGY]  If  (!parent.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!parent.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!parent.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
165	[BUG]  [BUGGY]  If  (!left.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
166	[BUG]  [BUGGY]  If  (!right.isEmpty()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
167	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
168	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
169	[BUG]  [BUGGY]  if(!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
170	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	44	None	replace
171	[BUG]  [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!parent.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(l))    {    	non-compiled	[CE]  unclosed  string  literal	166	None	replace
172	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(l))  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(l))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(l))    {    	non-compiled	[CE]  unclosed  string  literal	166	None	replace
173	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(l))  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(l))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(l))    {    	non-compiled	[CE]  unclosed  string  literal	166	None	replace
174	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(l))  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(l))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(l))    {    	non-compiled	[CE]  unclosed  string  literal	166	None	replace
175	[BUG]  [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(l))  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!parent.isNumber()  &&  isAssignmentTarget(l))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(l))    {    	non-compiled	[CE]  unclosed  string  literal	166	None	replace
176	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getNext();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getNext();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	159	None	replace
177	[BUG]  [BUGGY]  Node  right  =  left.getNext();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getNext();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	159	None	replace
178	[BUG]  [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getNext();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getNext();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  Node  right  =  left.getNext();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getNext();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	159	None	replace
179	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if(right!=  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if(right!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getNext();  if(right!=  null  ||  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getNext();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	159	None	replace
180	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(right.isEmpty())  {	  	non-compiled	[CE]  unclosed  string  literal	130	None	add
181	[BUG]  [BUGGY]  if(right.isEmpty())  {  Node  right  =  parent.getParent();  if(right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  Node  right  =  parent.getParent();  if(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    Node  right  =  parent.getParent();  if(right.isEmpty())  {	  	non-compiled	[CE]  unclosed  string  literal	130	None	add
182	[BUG]  [BUGGY]  if(right.isEmpty())  {  If(right.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  If(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    If(right.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
183	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(right.isEmpty()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
184	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(left.isEmpty())  {	  	non-compiled	[CE]  unclosed  string  literal	130	None	add
185	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	130	None	add
186	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  unclosed  string  literal	130	None	add
187	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    if  (right  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	28	None	add
188	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    if  (right!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	28	None	add
189	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  If  (right  ==  null  ||!right.isNumber())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  If  (right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    If  (right  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	28	None	add
190	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right  >=  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (right  >=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    if  (right  >=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	28	None	add
191	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (left  ==  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (left  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    if  (left  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	28	None	add
192	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	104	None	replace
193	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	8	None	add
194	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  If(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  If(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    If(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	8	None	add
195	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	8	None	add
196	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  ==  Token.FOR)  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  ==  Token.FOR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(right.isNumber()  ||  right.getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  unclosed  string  literal	8	None	add
197	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	8	None	add
198	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	8	None	add
199	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  right.getFirstChild();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    right.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	205	None	replace
200	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    right.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	205	None	replace
201	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  right.getFirstChild();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    right.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	205	None	replace
202	[BUG]  [BUGGY]  If  (left!=  null  ||  right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (left!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
203	[BUG]  [BUGGY]  If  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
204	[BUG]  [BUGGY]  If  (left  ==  null  ||  right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (left  ==  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (left  ==  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
205	[BUG]  [BUGGY]  If  (parent!=  null  ||!right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (parent!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (parent!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
206	[BUG]  [BUGGY]  If  (n!=  null  ||!right.isNumber())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (n!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (n!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
207	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  unclosed  string  literal	68	None	replace
208	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  isAssignmentTarget(n))  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  unclosed  string  literal	68	None	replace
209	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  left.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	200	None	replace
210	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  parent.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	200	None	replace
211	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  right.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	200	None	replace
212	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  left.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  left.getLastChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	200	None	replace
213	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	200	None	replace
214	[BUG]  [BUGGY]  if  (!right.isArray()  ||!left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||!left.isEmpty())  {	  if    (!left.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	142	None	replace
215	[BUG]  [BUGGY]  if  (!left.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!left.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	142	None	replace
216	[BUG]  [BUGGY]  if  (!right.isNull()  ||!right.isArray())  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNull()  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNull()  ||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
217	[BUG]  [BUGGY]  if  (!right.isNone()  ||!right.isArray())  {  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNone()  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNone()  ||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
218	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||!right.isArray())  {  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
219	[BUG]  [BUGGY]  if  (!right.isObject()  ||!right.isArray())  {  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isObject()  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isObject()  ||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
220	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isAssignmentTo(right))  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isAssignmentTo(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isAssignmentTo(right))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
221	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.isAssignmentTo(left))  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
222	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.isAssignmentTo(left))  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
223	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(n))  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isAssignmentTo(n))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
224	[BUG]  [BUGGY]  if(right.isNumber()  &&  right.isAssignmentTo(left))  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  &&  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  &&  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
225	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isAssignmentTo(left))  {  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  unclosed  string  literal	180	None	replace
226	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	157	None	replace
227	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	157	None	replace
228	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  unclosed  string  literal	157	None	replace
229	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!RIGHT.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	128	None	replace
230	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!RIGHT.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	128	None	replace
231	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
232	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    If  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
233	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
234	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
235	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
236	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FOR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FOR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  	92	None	add
237	[BUG]  [BUGGY]  Node  current  =  left.getNext()  -  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.getNext()  -  1;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getNext()  -  1;	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
238	[BUG]  [BUGGY]  Node  current  =  n.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  n.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  n.getNext();	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
239	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  parent);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.getNext(),  parent);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getNext(),  parent);	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
240	[BUG]  [BUGGY]  Node  current  =  right.getNext();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  right.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  right.getNext();	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
241	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  parent;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.getNext(),  parent;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getNext(),  parent;	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
242	[BUG]  [BUGGY]  if(parent.isArray())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isArray())  {	  if(parent.isNumber())    {    	non-compiled	[CE]  	2	None	replace
243	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&!left.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    if  (!right.isEmpty()  &&!left.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
244	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  If  (!right.isEmpty()  &&!left.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  If  (!right.isEmpty()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    If  (!right.isEmpty()  &&!left.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
245	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!left.isEmpty()  &&!left.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!left.isEmpty()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    if  (!left.isEmpty()  &&!left.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
246	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!RIGHT.isEmpty()  &&!left.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!RIGHT.isEmpty()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    if  (!RIGHT.isEmpty()  &&!left.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
247	[BUG]  [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!parent.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!parent.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignedTarget(left))    {    	non-compiled	[CE]  	194	None	replace
248	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignedTarget(left))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignedTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignedTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignedTarget(left))    {    	non-compiled	[CE]  	194	None	replace
249	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignedTarget(left))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignedTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignedTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignedTarget(left))    {    	non-compiled	[CE]  	194	None	replace
250	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignedTarget(left))  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignedTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignedTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignedTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	194	None	replace
251	[BUG]  [BUGGY]  if(!left.isEmpty()  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||!right.isEmpty())  {	  if(!right.isEmpty()    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	193	None	replace
252	[BUG]  [BUGGY]  if(!parent.isEmpty()  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!parent.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!parent.isEmpty()  ||!right.isEmpty())  {	  if(!right.isEmpty()    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	193	None	replace
253	[BUG]  [BUGGY]  if(right.isEmpty()  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||!right.isEmpty())  {	  if(!right.isEmpty()    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	193	None	replace
254	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
255	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {  if  (right!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
256	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
257	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
258	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
259	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
260	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
261	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  unclosed  string  literal	176	None	replace
262	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  unclosed  string  literal	105	None	add
263	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	105	None	add
264	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	105	None	add
265	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  unclosed  string  literal	105	None	add
266	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
267	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
268	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
269	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
270	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
271	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	183	None	replace
272	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
273	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
274	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
275	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	37	None	replace
276	[BUG]  [BUGGY]  if(parent  ==  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
277	[BUG]  [BUGGY]  if(left  ==  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
278	[BUG]  [BUGGY]  if(n!=  null  ||!right.isNumber())  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	46	None	replace
279	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
280	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
281	[BUG]  [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
282	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
283	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
284	[BUG]  [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	149	None	replace
285	[BUG]  [BUGGY]  if(n!=  null  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n!=  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n!=  null  ||!right.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	168	None	replace
286	[BUG]  [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||!right.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	168	None	replace
287	[BUG]  [BUGGY]  if(parent!=  null  ||!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null  ||!right.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	168	None	replace
288	[BUG]  [BUGGY]  if  (!left.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	198	None	replace
289	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isArray()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	198	None	replace
290	[BUG]  [BUGGY]  if(!left.isNumber()  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||  right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	140	None	replace
291	[BUG]  [BUGGY]  if(!left.isNumber()  &&  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	140	None	replace
292	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  unclosed  string  literal	69	None	add
293	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  If  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  If  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    If  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	69	None	add
294	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  unclosed  string  literal	69	None	add
295	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(lval))  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  isAssignmentTarget(lval))  {	  	non-compiled	[CE]  unclosed  string  literal	69	None	add
296	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
297	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
298	[BUG]  [BUGGY]  Node  right  =  parent.getParent();  if(right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  parent.getParent();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getParent();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	62	None	replace
299	[BUG]  [BUGGY]  if  (left  ==  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left  ==  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||  right.isNumber())  {	  if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
300	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
301	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
302	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	94	None	add
303	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
304	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
305	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
306	[BUG]  [BUGGY]  if(RIGHT.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(RIGHT.isNumber())  {	  if    (right.isNumber())    {    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	206	None	replace
307	[BUG]  [BUGGY]  if(left.isArray())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isArray())  {	  if(left.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	163	None	replace
308	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  left.getType()  ==  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
309	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
310	[BUG]  [BUGGY]  if(left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
311	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
312	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  left.getType()!=  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  left.getType()!=  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  left.getType()!=  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
313	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  right.getType()  ==  Token.RETURN)  {  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  right.getType()  ==  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  unclosed  string  literal	208	None	replace
314	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	97	None	replace
315	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	97	None	replace
316	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	97	None	replace
317	[BUG]  [BUGGY]  if(!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  left.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
318	[BUG]  [BUGGY]  if(!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
319	[BUG]  [BUGGY]  if(!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	122	None	replace
320	[BUG]  [BUGGY]  Node  current  =  left.removeFirstChild();  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.removeFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.removeFirstChild();	  Node    current    =    left.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	201	None	replace
321	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	192	None	replace
322	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	189	None	replace
323	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	189	None	replace
324	[BUG]  [BUGGY]  Node  current  =  n.getLastChild();  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  n.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  n.getLastChild();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  unclosed  string  literal	202	None	replace
325	[BUG]  [BUGGY]  if(right.isNumber()  ||  left.isNumber())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  left.isNumber())  {	  if    (right.isNumber())    {    if    (left.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
326	[BUG]  [BUGGY]  if  (left!=  null  &&  left.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  &&  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  &&  left.isNumber())  {	  if    (left!=    null    ||    left.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	175	None	replace
327	[BUG]  [BUGGY]  if  (right!=  null  ||  left.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right!=  null  ||  left.isNumber())  {	  if    (left!=    null    ||    left.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	175	None	replace
328	[BUG]  [BUGGY]  if  (!right.isArray()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
329	[BUG]  [BUGGY]  if  (!left.isArray()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
330	[BUG]  [BUGGY]  if  (!right.isArray()  ||  left.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  left.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
331	[BUG]  [BUGGY]  if  (!right.isObject()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isObject()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isObject()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
332	[BUG]  [BUGGY]  if  (!right.isArray()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
333	[BUG]  [BUGGY]  if  (!left.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
334	[BUG]  [BUGGY]  if  (!right.isArray()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
335	[BUG]  [BUGGY]  if  (!right.isObject()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isObject()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isObject()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
336	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left!=  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    if  (left!=  null  ||  right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
337	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  ==  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  ==  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    if  (left  ==  null  ||  right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
338	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  If  (left!=  null  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  If  (left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    If  (left!=  null  ||  right.isNumber())  {	  	non-compiled	[CE]  	22	None	add
339	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (left!=  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    Node  right  =  left.getFirstChild();  if  (left!=  null  ||  right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
340	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  >=  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  >=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    if  (left  >=  null  ||  right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
341	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  >>  null  ||  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left  >>  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    if  (left  >>  null  ||  right.isNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
342	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left!=  null  ||  right.getNumber())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  if  (left!=  null  ||  right.getNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (left!=    null    ||    right.isNumber())    {    if  (left!=  null  ||  right.getNumber())  {	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
343	[BUG]  [BUGGY]  if(!right.isNumber()  ||  right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  right.isEmpty())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	187	None	replace
344	[BUG]  [BUGGY]  if(!left.isNumber()  ||  right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||  right.isEmpty())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	187	None	replace
345	[BUG]  [BUGGY]  if(!right.isNumber()  ||  left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  left.isEmpty())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	187	None	replace
346	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignedTarget(n))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignedTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  unclosed  string  literal	184	None	replace
347	[BUG]  [BUGGY]  if  (!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	135	None	replace
348	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
349	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
350	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(n)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
351	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  unclosed  string  literal	112	None	replace
352	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
353	[BUG]  [BUGGY]  if(!RIGHT.isNumber()  &&!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!RIGHT.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!RIGHT.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
354	[BUG]  [BUGGY]  if(!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!RIGHT.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	33	None	replace
355	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	90	None	add
356	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	90	None	add
357	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	90	None	add
358	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	90	None	add
359	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	90	None	add
360	[BUG]  [BUGGY]  if  (!right.equals(n))  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(n))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
361	[BUG]  [BUGGY]  if  (!left.equals(right))  {  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.equals(right))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
362	[BUG]  [BUGGY]  if  (!right.equals(left)||!right.equals(n.getString()))  {  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||!right.equals(n.getString()))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||!right.equals(n.getString()))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
363	[BUG]  [BUGGY]  if  (!right.equals(left)&&!right.equals(n.getString()))  {  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)&&!right.equals(n.getString()))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)&&!right.equals(n.getString()))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
364	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	136	None	replace
365	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()!=  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  parent.getType()!=  Token.NAME)  {	  if    (!right.isEmpty()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	136	None	replace
366	[BUG]  [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
367	[BUG]  [BUGGY]  if(right.isEmpty())  {  if  (!left.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if  (!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {  if  (!left.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
368	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  unclosed  string  literal	102	None	replace
369	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	154	None	replace
370	[BUG]  [BUGGY]  if(!left.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	154	None	replace
371	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isEmpty()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  unclosed  string  literal	154	None	replace
372	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  unclosed  string  literal	111	None	add
373	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()!=  Token.OBJECTLIT)  {	  	non-compiled	[CE]  unclosed  string  literal	111	None	add
374	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  unclosed  string  literal	111	None	add
375	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  If  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  If  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    If  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  	111	None	add
376	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  >=  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  >=  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  >=  Token.OBJECTLIT)  {	  	non-compiled	[CE]  unclosed  string  literal	111	None	add
377	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  left.getType()  ==  Token.OBJECTLIT)  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  left.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  left.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  unclosed  string  literal	111	None	add
378	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
379	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
380	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(lval))  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
381	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  unclosed  string  literal	14	None	replace
382	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
383	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
384	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
385	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >>  Token.FUNCTION)  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  >>  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
386	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  If  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  If  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    If  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	96	None	add
387	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!left.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	96	None	add
388	[BUG]  [BUGGY]  If  (!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
389	[BUG]  [BUGGY]  if(!right.isNumber())  {  If  (!left.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber())  {  If  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber())  {  If  (!left.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
390	[BUG]  [BUGGY]  if(!right.isNumber())  {  If  (!right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber())  {  If  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber())  {  If  (!right.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
391	[BUG]  [BUGGY]  if(!right.isEmpty())  {  If  (!left.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty())  {  If  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty())  {  If  (!left.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
392	[BUG]  [BUGGY]  if(right.isNumber())  {  If  (!left.isNumber())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber())  {  If  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber())  {  If  (!left.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
393	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	89	None	replace
394	[BUG]  [BUGGY]  if  (!right.isArray()  &&!right.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
395	[BUG]  [BUGGY]  if  (!right.isNull()  ||!right.isEmpty())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNull()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNull()  ||!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
396	[BUG]  [BUGGY]  if  (!left.isArray()  ||!right.isEmpty())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
397	[BUG]  [BUGGY]  if  (!right.isNone()  ||!right.isEmpty())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNone()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNone()  ||!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
398	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	167	None	replace
399	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	167	None	replace
400	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	167	None	replace
401	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	167	None	replace
402	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!RIGHT.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!RIGHT.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right!=    null    ||!RIGHT.isNumber())    {    	non-compiled	[CE]  	148	None	replace
403	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isEmpty())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
404	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.isNumber())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
405	[BUG]  [BUGGY]  if(left.isNumber()  ||  left.isEmpty())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  left.isEmpty())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
406	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.isEmpty())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
407	[BUG]  [BUGGY]  if(right.isEmpty()  ||  left.isNumber())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  left.isNumber())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
408	[BUG]  [BUGGY]  if(right.isArray()  ||  left.isEmpty())  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  left.isEmpty())  {	  if(right.isNumber()    ||    left.isEmpty())    {    	non-compiled	[CE]  	164	None	replace
409	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	169	None	replace
410	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	169	None	replace
411	[BUG]  [BUGGY]  if(left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	169	None	replace
412	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	169	None	replace
413	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  left.getType()!=  Token.NAME)  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  left.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  left.getType()!=  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	169	None	replace
414	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
415	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  parent.getParent();  if(RIGHT.isNumber())  {  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  parent.getParent();  if(RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  parent.getParent();  if(RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	66	None	replace
416	[BUG]  [BUGGY]  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	66	None	replace
417	[BUG]  [BUGGY]  Node  right  =  left.getParent();  if  (right.isNumber())  {  [CE]  unclosed  string  literal  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getParent();  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getParent();  if  (right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	66	None	replace
418	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.equals(left))  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.equals(left))  {	  if    (!right.isArray()    ||    right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	144	None	replace
419	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  right.equals(left))  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  right.equals(left))  {	  if    (!right.isArray()    ||    right.equals(left))    {    	non-compiled	[CE]  unclosed  string  literal	144	None	replace
420	[BUG]  [BUGGY]  Node  current  =  parent.getNext()  -  1;  [CE]  unclosed  string  literal  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  parent.getNext()  -  1;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getNext()  -  1;	  Node    current    =    parent.getNext();    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
421	[BUG]  [BUGGY]  Node  current  =  parent.getParent();  [CE]  unclosed  string  literal  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  parent.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getParent();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
422	[BUG]  [BUGGY]  Node  current  =  parent.getNext(),  left);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  parent.getNext(),  left);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getNext(),  left);	  Node    current    =    parent.getNext();    	non-compiled	[CE]  	21	None	replace
423	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
424	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
425	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  unclosed  string  literal	41	None	replace
426	[BUG]  [BUGGY]  if  (left!=  null  &&  right.isNumber())  {  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  &&  right.isNumber())  {	  if    (left!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
427	[BUG]  [BUGGY]  if  (right!=  null  &&  right.isNumber())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right!=  null  &&  right.isNumber())  {	  if    (left!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	23	None	replace
428	[BUG]  [BUGGY]  if  (right  ==  null  ||  left!=  null  ||!right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||  left!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right  ==  null  ||  left!=  null  ||!right.isNumber())  {	  if    (left    ==    null    ||    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	195	None	replace
429	[BUG]  [BUGGY]  if  (left!=  null  ||  right!=  null  ||!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right!=  null  ||!right.isNumber())  {	  if    (left    ==    null    ||    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	195	None	replace
430	[BUG]  [BUGGY]  if  (right  ==  null  ||  right!=  null  ||!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||  right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right  ==  null  ||  right!=  null  ||!right.isNumber())  {	  if    (left    ==    null    ||    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	195	None	replace
431	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
432	[BUG]  [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
433	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null  ||  right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if(right!=  null  ||  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
434	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null  &&  right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  if(right!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getFirstChild();  if(right!=  null  &&  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
435	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
436	[BUG]  [BUGGY]  if  (!right.isArray()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
437	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right!=  null  &&!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (right!=  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
438	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  ==  null  &&!right.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  ==  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (right  ==  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
439	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  If  (right!=  null  &&!right.isNumber())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  If  (right!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    If  (right!=  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
440	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  >=  null  &&!right.isNumber())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  >=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (right  >=  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
441	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (left!=  null  &&!right.isNumber())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (left!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (left!=  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
442	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  >>  null  &&!right.isNumber())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right  >>  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (right  >>  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
443	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  Node  right!=  null  &&!right.isNumber())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  Node  right!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    Node  right!=  null  &&!right.isNumber())  {	  	non-compiled	[CE]  	24	None	add
444	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
445	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
446	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.getType()!=  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  right.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.getType()!=  Token.NAME)  {	  if    (!right.isArray()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	197	None	replace
447	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    if  (!parent.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
448	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  If  (!parent.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  If  (!parent.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    If  (!parent.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
449	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
450	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
451	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    if  (!parent.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
452	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
453	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
454	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
455	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.getType()!=  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
456	[BUG]  [BUGGY]  if(right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
457	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
458	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	57	None	add
459	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  If  (!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  If  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    If  (!left.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	57	None	add
460	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  	57	None	add
461	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  |&!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  |&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  |&!right.isEmpty())  {	  	non-compiled	[CE]  	57	None	add
462	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  	185	None	replace
463	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  	185	None	replace
464	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  	185	None	replace
465	[BUG]  [BUGGY]  if(right.isNumber())  {  if  (!left.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber())  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber())  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
466	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
467	[BUG]  [BUGGY]  if(right.getType()  ==  Token.RETURN)  {  if  (!left.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.RETURN)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.RETURN)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
468	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  if  (!left.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.STRING)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
469	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getNext();  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getNext();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
470	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
471	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent!=  null  ||!right.isNumber())  {  Node  right  =  right.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
472	[BUG]  [BUGGY]  if  (left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	170	None	replace
473	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(n))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	10	None	replace
474	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	10	None	replace
475	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
476	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
477	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
478	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.isEmpty())  {	  if(right.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	5	None	replace
479	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	177	None	replace
480	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	177	None	replace
481	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	177	None	replace
482	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    parent.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  	177	None	replace
483	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
484	[BUG]  [BUGGY]  if(!left.isEmpty())  {  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty())  {  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty())  {  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
485	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
486	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	93	None	replace
487	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
488	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    If  (!right.isNumber()  &&  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
489	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	73	None	add
490	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!left.isNumber()  &&  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
491	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
492	[BUG]  [BUGGY]  if  (parent!=  null  &&!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent!=  null  &&!right.isNumber())  {	  if    (right!=    null    &&!right.isNumber())    {    	non-compiled	[CE]  	25	None	replace
493	[BUG]  [BUGGY]  if  (n!=  null  &&!right.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (n!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (n!=  null  &&!right.isNumber())  {	  if    (right!=    null    &&!right.isNumber())    {    	non-compiled	[CE]  	25	None	replace
494	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	43	None	replace
495	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(left))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isNumber()  &&!right.isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	43	None	replace
496	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||!left.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	43	None	replace
497	[BUG]  [BUGGY]  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
498	[BUG]  [BUGGY]  if(!right.isNumber())  {  Node  right  =  left.getNext();  if(!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber())  {  Node  right  =  left.getNext();  if(!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber())  {  Node  right  =  left.getNext();  if(!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
499	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!RIGHT.isEmpty())    {    	non-compiled	[CE]  	155	None	replace
500	[BUG]  [BUGGY]  if(!right.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&!RIGHT.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!RIGHT.isEmpty())    {    	non-compiled	[CE]  	155	None	replace
501	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&!RIGHT.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!RIGHT.isEmpty())    {    	non-compiled	[CE]  	155	None	replace
502	[BUG]  [BUGGY]  if  (!right.equals(parent))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(parent))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
503	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
504	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
505	[BUG]  [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
506	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
507	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty()  ||  parent.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
508	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
509	[BUG]  [BUGGY]  if  (!right.isArray()  ||  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  isAssignmentTarget(left))  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
510	[BUG]  [BUGGY]  if  (!right.isNull()  &&  isAssignmentTarget(left))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNull()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNull()  &&  isAssignmentTarget(left))  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
511	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(parent))  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
512	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
513	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(left,  right))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(left,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
514	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n,  right))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
515	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  parent))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left,  parent))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
516	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(parent,  left))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(parent,  left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(parent,  left))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
517	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n,  left))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n,  left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n,  left))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
518	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(parent,  right))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(parent,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(parent,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
519	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!right.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
520	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    Node  right  =  left.getFirstChild();  if  (!right.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
521	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  If  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  If  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    If  (!right.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
522	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!  right.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!  right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!  right.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
523	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  throw  new  IllegalArgumentException( " ");  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!right.isNumber()  ||!left.isEmpty())  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  	51	None	add
524	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    if  (!left.isNumber()  &&  isAssignmentTarget(right))  {	  	non-compiled	[CE]  	109	None	add
525	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  If  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  If  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    If  (!left.isNumber()  &&  isAssignmentTarget(right))  {	  	non-compiled	[CE]  	109	None	add
526	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!right.isNumber()  &&  isAssignmentTarget(right))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!right.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    if  (!right.isNumber()  &&  isAssignmentTarget(right))  {	  	non-compiled	[CE]  	109	None	add
527	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  areAssignmentTarget(right))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  areAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    if  (!left.isNumber()  &&  areAssignmentTarget(right))  {	  	non-compiled	[CE]  	109	None	add
528	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	67	None	add
529	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  If  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  If  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    If  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	67	None	add
530	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	67	None	add
531	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!RIGHT.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	67	None	add
532	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(lval))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(lval))  {	  	non-compiled	[CE]  	67	None	add
533	[BUG]  [BUGGY]  Node  right  =  left.getNext();  if  (!right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
534	[BUG]  [BUGGY]  Node  right  =  left.getNext();  if(right!=  null)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  if(right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext();  if(right!=  null)  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
535	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (left!=  null  ||!right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (left!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent!=  null  ||!right.isNumber())  {  if  (left!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (left!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	147	None	replace
536	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!right.isNumber())    {    	non-compiled	[CE]  	78	None	replace
537	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
538	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.NAME)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
539	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  if  (isAssignmentTarget(right))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  if  (isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getFirstChild();  if  (isAssignmentTarget(right))  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
540	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
541	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
542	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.STRING)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
543	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	71	None	add
544	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	71	None	add
545	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!left.isEmpty()  &&  isAssignmentTarget(n))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!left.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!left.isEmpty()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	71	None	add
546	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!RIGHT.isEmpty()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	71	None	add
547	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(lval))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!right.isEmpty()  &&  isAssignmentTarget(lval))  {	  	non-compiled	[CE]  	71	None	add
548	[BUG]  [BUGGY]  Node  right  =  parent.getNext()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  parent.getNext()  -  1;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getNext()  -  1;	  Node    right    =    parent.getNext();    	non-compiled	[CE]  	18	None	replace
549	[BUG]  [BUGGY]  Node  right  =  parent.getNext(),  left);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  parent.getNext(),  left);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getNext(),  left);	  Node    right    =    parent.getNext();    	non-compiled	[CE]  	18	None	replace
550	[BUG]  [BUGGY]  if  (!left.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	133	None	replace
551	[BUG]  [BUGGY]  if(parent.isNumber())  {  if(parent.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
552	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(parent.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  parent.getFirstChild();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
553	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(parent.isNumber())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  parent.getParent();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
554	[BUG]  [BUGGY]  if(parent.isNumber())  {  int  index  =  parent.getIndex();  if(parent.isNumber())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  int  index  =  parent.getIndex();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    int  index  =  parent.getIndex();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
555	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(right.isNumber())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  parent.getFirstChild();  if(right.isNumber())  {	  	non-compiled	[CE]  	1	None	add
556	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(left.isNumber())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getFirstChild();  if(left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  parent.getFirstChild();  if(left.isNumber())  {	  	non-compiled	[CE]  	1	None	add
557	[BUG]  [BUGGY]  if(parent.isNumber())  {  If(parent.isNumber())  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  If(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    If(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
558	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    if(right.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
559	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  If(right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  If(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    If(right.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
560	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    Node  right  =  left.getFirstChild();  if(right.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
561	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  left.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    if(right.isNumber()  ||  left.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
562	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  AssertionFailedError:  Expected:  x=[  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  AssertionFailedError:  Expected:  x=[  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    AssertionFailedError:  Expected:  x=[	  	non-compiled	[CE]  	4	None	add
563	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
564	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
565	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
566	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
567	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
568	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
569	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
570	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
571	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
572	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
573	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  >>  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  >>  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()  >>  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
574	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    If  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
575	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
576	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isExtern())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
577	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.isExtern())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
578	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.isExtern())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
579	[BUG]  [BUGGY]  if(right.isExtern()  ||  right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isExtern()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isExtern()  ||  right.isNumber())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
580	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.isExtern())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
581	[BUG]  [BUGGY]  if(!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  	38	None	replace
582	[BUG]  [BUGGY]  if(n!=  null  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n!=  null  ||  right.isNumber())  {	  if(right!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	162	None	replace
583	[BUG]  [BUGGY]  if(right  ==  null  ||  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||  right.isNumber())  {	  if(right!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	162	None	replace
584	[BUG]  [BUGGY]  if(parent!=  null  ||  right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null  ||  right.isNumber())  {	  if(right!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	162	None	replace
585	[BUG]  [BUGGY]  if(right!=  null  ||  parent.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||  parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  parent.isNumber())  {	  if(right!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	162	None	replace
586	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
587	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!right.isEmpty()  &&  right.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
588	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  If  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  If  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    If  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
589	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  parent.getType()!=  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!right.isEmpty()  &&  parent.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
590	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!right.isEmpty()  &&  left.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
591	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!left.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
592	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
593	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  left.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  left.getNext();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
594	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  left.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  left.getParent();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
595	[BUG]  [BUGGY]  n  =  parent.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  parent.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  parent.getNext();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
596	[BUG]  [BUGGY]  n  =  right.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  right.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  right.getParent();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
597	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  n.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  n.getParent();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
598	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
599	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  If(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  If(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    If(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
600	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(right.isNumber()  ||  right.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
601	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  >=  Token.STRING)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  >=  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(right.isNumber()  ||  right.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
602	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
603	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(right.isNumber()  ||  right.getType()  ==  Token.BLOCK)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(right.isNumber()  ||  right.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  	6	None	add
604	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
605	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
606	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME  &&!left.isNumber()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
607	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
608	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isEmpty()  &&!right.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isEmpty()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!right.isEmpty()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
609	[BUG]  [BUGGY]  if(parent.isEmpty())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
610	[BUG]  [BUGGY]  if(left.isEmpty())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
611	[BUG]  [BUGGY]  if(left.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||  right.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
612	[BUG]  [BUGGY]  if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
613	[BUG]  [BUGGY]  if(n.isEmpty())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
614	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!right.isNumber())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (parent!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
615	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent  ==  null  ||!right.isNumber())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (parent  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
616	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (right!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
617	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  Node  right  =  parent.getFirstChild();  if  (parent!=  null  ||!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  Node  right  =  parent.getFirstChild();  if  (parent!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    Node  right  =  parent.getFirstChild();  if  (parent!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
618	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  If  (parent!=  null  ||!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  If  (parent!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    If  (parent!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
619	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent  >=  null  ||!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent  >=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (parent  >=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	26	None	add
620	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
621	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
622	[BUG]  [BUGGY]  If  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
623	[BUG]  [BUGGY]  If  (!parent.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!parent.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!parent.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
624	[BUG]  [BUGGY]  If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
625	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	129	None	replace
626	[BUG]  [BUGGY]  if  (!left.isArray()  &&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  &&  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	86	None	replace
627	[BUG]  [BUGGY]  if  (!right.isArray()  &&  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  left.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	86	None	replace
628	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.getType()!=  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  right.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.getType()!=  Token.NAME)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	86	None	replace
629	[BUG]  [BUGGY]  if(parent.isEmpty())  {  if  (!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isEmpty())  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isEmpty())  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty())    {    	non-compiled	[CE]  	98	None	replace
630	[BUG]  [BUGGY]  if(!left.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty())    {    	non-compiled	[CE]  	98	None	replace
631	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isNumber())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
632	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isArray())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isArray())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
633	[BUG]  [BUGGY]  if(parent.isNumber()  ||  right.isArray())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber()  ||  right.isArray())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
634	[BUG]  [BUGGY]  if(n.isNumber()  ||  right.isArray())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(n.isNumber()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(n.isNumber()  ||  right.isArray())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
635	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.isArray())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.isArray())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
636	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isArray()  ||  left.isEmpty())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isArray()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isArray()  ||  left.isEmpty())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
637	[BUG]  [BUGGY]  if(right.isEmpty()  ||  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  isAssignmentTarget(left))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	106	None	replace
638	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&  isAssignmentTarget(left))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	106	None	replace
639	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	172	None	replace
640	[BUG]  [BUGGY]  if  (right  ==  null  ||  right!=  null.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||  right!=  null.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right  ==  null  ||  right!=  null.isNumber())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
641	[BUG]  [BUGGY]  if  (left!=  null  ||  right!=  null.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right!=  null.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right!=  null.isNumber())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
642	[BUG]  [BUGGY]  if  (n  ==  null  ||  right!=  null.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (n  ==  null  ||  right!=  null.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (n  ==  null  ||  right!=  null.isNumber())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
643	[BUG]  [BUGGY]  if(right  ==  null  ||  left.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||  left.isNumber())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
644	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  Node  right  ==  null  ||!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  Node  right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    Node  right  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	28	None	add
645	[BUG]  [BUGGY]  if(parent!=  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	10	None	replace
646	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	10	None	replace
647	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	10	None	replace
648	[BUG]  [BUGGY]  if  (!left.isArray()  &&  right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  &&  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  &&  right.isEmpty())  {	  if    (!right.isArray()    ||    right.isEmpty())    {    	non-compiled	[CE]  	196	None	replace
649	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.GETELEM)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	171	None	replace
650	[BUG]  [BUGGY]  if(right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()!=  Token.FUNCTION)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	171	None	replace
651	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()!=  Token.GETELEM)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	171	None	replace
652	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	35	None	replace
653	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	35	None	replace
654	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	35	None	replace
655	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.STRING  ||  right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
656	[BUG]  [BUGGY]  if(left.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  left.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
657	[BUG]  [BUGGY]  if(right.isArray()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
658	[BUG]  [BUGGY]  if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  left.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
659	[BUG]  [BUGGY]  if  (!left.isArray()  &&  isAssignmentTarget(right))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  &&  isAssignmentTarget(right))  {	  if    (!left.isArray())    {    	non-compiled	[CE]  	142	None	replace
660	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!RIGHT.isNumber())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (parent!=  null  ||!RIGHT.isNumber())  {	  	non-compiled	[CE]  	26	None	add
661	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  n  =  right.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  right.getNext();	  n    =    parent.getParent();    	non-compiled	[CE]  	203	None	replace
662	[BUG]  [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  	38	None	replace
663	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isNumber())    {    	non-compiled	[CE]  	140	None	replace
664	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    parent.getFirstChild();    	non-compiled	[CE]  	16	None	replace
665	[BUG]  [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
666	[BUG]  [BUGGY]  if(right!=  null  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
667	[BUG]  [BUGGY]  if(right!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
668	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
669	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.EMPTY)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.EMPTY)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	209	None	replace
670	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  if  (right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getFirstChild();  if  (right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	160	None	replace
671	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  	102	None	replace
672	[BUG]  [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||!right.isEmpty())  {  if  (!left.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  	102	None	replace
673	[BUG]  [BUGGY]  if(right  ==  null)  {  if  (!right.isEmpty())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  	102	None	replace
674	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!left.isEmpty())  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!left.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!left.isEmpty())    {    	non-compiled	[CE]  	102	None	replace
675	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	8	None	add
676	[BUG]  [BUGGY]  if(parent!=  null)  {  if  (!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
677	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
678	[BUG]  [BUGGY]  if(right!=  null)  {  if(!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if(!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if(!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
679	[BUG]  [BUGGY]  if(right!=  null)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if(!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if(!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
680	[BUG]  [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
681	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!left.isNumber()  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!left.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!left.isNumber()  ||  right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  	186	None	replace
682	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  	186	None	replace
683	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  left.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  	186	None	replace
684	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!left.isNumber()  ||  left.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!left.isNumber()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!left.isNumber()  ||  left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    left.isNumber())    {    	non-compiled	[CE]  	186	None	replace
685	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  	14	None	replace
686	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  	14	None	replace
687	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    parent.getLastChild();    	non-compiled	[CE]  	15	None	replace
688	[BUG]  [BUGGY]  if(left.isEmpty())  {  Node  right  =  right.getFirstChild();  if  (right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  Node  right  =  right.getFirstChild();  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  Node  right  =  right.getFirstChild();  if  (right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    right.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	205	None	replace
689	[BUG]  [BUGGY]  if(right  ==  null  ||  left!=  null  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||  left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||  left!=  null  ||  right.isNumber())  {	  if    (left    ==    null    ||    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	195	None	replace
690	[BUG]  [BUGGY]  if  (!left.isArray()  ||  right.equals(right))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  right.equals(right))  {	  if    (!right.isArray()    ||    right.equals(left))    {    	non-compiled	[CE]  	144	None	replace
691	[BUG]  [BUGGY]  if  (right.isArray()  ||  right.equals(left))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right.isArray()  ||  right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right.isArray()  ||  right.equals(left))  {	  if    (!right.isArray()    ||    right.equals(left))    {    	non-compiled	[CE]  	144	None	replace
692	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.EMPTY)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  	111	None	add
693	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!left.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  	111	None	add
694	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	113	None	add
695	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	113	None	add
696	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  if  (!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getFirstChild();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	137	None	replace
697	[BUG]  [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	137	None	replace
698	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	41	None	replace
699	[BUG]  [BUGGY]  if  (left.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	108	None	replace
700	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	57	None	add
701	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  	57	None	add
702	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  	57	None	add
703	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  if  (!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    if  (!left.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
704	[BUG]  [BUGGY]  if(right!=  null  ||  right.isEmpty())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  right.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
705	[BUG]  [BUGGY]  if(right  ==  null  ||  right.isEmpty())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  ||  right.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
706	[BUG]  [BUGGY]  if(right.isEmpty()  ||  left.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  left.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
707	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!left.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
708	[BUG]  [BUGGY]  if(right.isNumber())  {  if  (!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber())  {  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber())  {  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
709	[BUG]  [BUGGY]  if(right.isEmpty())  {  if  (!left.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
710	[BUG]  [BUGGY]  if(right  ==  null)  {  if  (!left.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null)  {  if  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null)  {  if  (!left.isNumber())  {	  if    (!left.isNumber())    {    if    (!left.isNumber())    {    	non-compiled	[CE]  	75	None	replace
711	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  if  (right!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  if  (right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getFirstChild();  if  (right!=  null)  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  	141	None	replace
712	[BUG]  [BUGGY]  if(right!=  null  ||  right.isArray())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  right.isArray())  {	  if(right!=    null    ||    right.isNumber())    {    	non-compiled	[CE]  	162	None	replace
713	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	94	None	add
714	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FOR)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  ||  right.getType()  ==  Token.FOR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  ||  right.getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  	94	None	add
715	[BUG]  [BUGGY]  if  (left!=  null  &&!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  &&!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  &&!right.isNumber())  {	  if    (right!=    null    &&!right.isNumber())    {    	non-compiled	[CE]  	25	None	replace
716	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  Node  right  =  left.getNext();  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  Node  right  =  left.getNext();  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    Node  right  =  left.getNext();  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	103	None	add
717	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  areAssignmentTarget(left))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  areAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!right.isNumber()  ||  areAssignmentTarget(left))  {	  	non-compiled	[CE]  	103	None	add
718	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  hasAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  hasAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!right.isNumber()  ||  hasAssignmentTarget(left))  {	  	non-compiled	[CE]  	103	None	add
719	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left  ==  null  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||  left.isNumber())  {	  if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	29	None	replace
720	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isArray())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right  ==  null  ||!right.isArray())  {	  if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	29	None	replace
721	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	167	None	replace
722	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isEmpty()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	134	None	add
723	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	66	None	replace
724	[BUG]  [BUGGY]  if(left.isNumber()  ||  left.isExtern())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  left.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  left.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
725	[BUG]  [BUGGY]  if(right.isNumber()  ||  left.isExtern())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  left.isExtern())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  left.isExtern())  {	  if(right.isNumber()    ||    right.isExtern())    {    	non-compiled	[CE]  	181	None	replace
726	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if(!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    ||!left.isEmpty())    {    	non-compiled	[CE]  	204	None	replace
727	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  	122	None	replace
728	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  	122	None	replace
729	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	153	None	replace
730	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  	124	None	replace
731	[BUG]  [BUGGY]  if(!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  	124	None	replace
732	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  	124	None	replace
733	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(left.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
734	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  AssertionFailedError:  Expected:  x=[  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  AssertionFailedError:  Expected:  x=[  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    AssertionFailedError:  Expected:  x=[	  	non-compiled	[CE]  	6	None	add
735	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!right.isNumber())    {    	non-compiled	[CE]  	79	None	replace
736	[BUG]  [BUGGY]  if(!left.isEmpty())  {  if  (!right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty())  {  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty())  {  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    if    (!right.isNumber())    {    	non-compiled	[CE]  	79	None	replace
737	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||!right.isNumber()  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
738	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
739	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
740	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	189	None	replace
741	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	189	None	replace
742	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isEmpty())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	189	None	replace
743	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!RIGHT.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  if  (!left.isNumber()  ||!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||!right.isEmpty())    {    if  (!left.isNumber()  ||!RIGHT.isEmpty())  {	  	non-compiled	[CE]  	55	None	add
744	[BUG]  [BUGGY]  if  (left!=  null  ||!left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||!left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||!left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
745	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
746	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  null  ||  right.isNumber())  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right.isNumber())  {  Node  right  =  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
747	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  left.getFirstChild();  [CE]  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber())  {  Node  right  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber())  {  Node  right  =  left.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
748	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  left.getFirstChild();  [CE]  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  Node  right  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right.isNumber())  {  Node  right  =  left.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
749	[BUG]  [BUGGY]  if(left!=  null)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	119	None	replace
750	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	90	None	add
751	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FOR)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FOR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FOR)  {	  	non-compiled	[CE]  	90	None	add
752	[BUG]  [BUGGY]  if(left  ==  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    >=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	48	None	replace
753	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    >=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	48	None	replace
754	[BUG]  [BUGGY]  if  (!right.equals(left)&&  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)&&  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)&&  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	86	None	replace
755	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null  ||  parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null  ||  parent.isNumber())  {	  if(parent.isNumber())    {    	non-compiled	[CE]  	2	None	replace
756	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {	  if(parent.isNumber())    {    	non-compiled	[CE]  	2	None	replace
757	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.isNumber())  {	  if(parent.isNumber())    {    	non-compiled	[CE]  	2	None	replace
758	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	125	None	replace
759	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	125	None	replace
760	[BUG]  [BUGGY]  if  (!right.equals(left)&&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)&&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)&&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	84	None	replace
761	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right!=  null  &&!RIGHT.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  if  (right!=  null  &&!RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    &&!right.isNumber())    {    if  (right!=  null  &&!RIGHT.isNumber())  {	  	non-compiled	[CE]  	24	None	add
762	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignedTarget(n))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignedTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  	184	None	replace
763	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  	184	None	replace
764	[BUG]  [BUGGY]  if  (!left.isArray()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	197	None	replace
765	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NAME  ||!right.isArray()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left.getType()  ==  Token.NAME  ||!right.isArray()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.getType()  ==  Token.NAME  ||!right.isArray()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	197	None	replace
766	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	187	None	replace
767	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!left.isNumber()  ||  right.isEmpty())  {	  if    (!left.isNumber())    {    if    (!left.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	187	None	replace
768	[BUG]  [BUGGY]  if(left.isNumber())  {  if  (right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  if  (right.isNumber())  {	  if    (right.isNumber())    {    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	206	None	replace
769	[BUG]  [BUGGY]  if(left.isNumber())  {  if  (RIGHT.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  if  (RIGHT.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  if  (RIGHT.isNumber())  {	  if    (right.isNumber())    {    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	206	None	replace
770	[BUG]  [BUGGY]  if(left.getType()  ==  Token.EMPTY  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.EMPTY  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.EMPTY  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if(parent.getType()    ==    Token.FUNCTION    ||!right.isNumber()    &&    right.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  	178	None	replace
771	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!left.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	123	None	replace
772	[BUG]  [BUGGY]  if  (left!=  null  ||  right  ==  null.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  right  ==  null.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right  ==  null.isNumber())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
773	[BUG]  [BUGGY]  if(left.isEmpty())  {  if  (!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty())    {    	non-compiled	[CE]  	98	None	replace
774	[BUG]  [BUGGY]  if  (!left.isArray()  ||  right.isObject())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||  right.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||  right.isObject())  {	  if    (!right.isArray()    ||    right.isObject())    {    	non-compiled	[CE]  	199	None	replace
775	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  isAssignmentTarget(left)||  parent!=  null)  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	106	None	replace
776	[BUG]  [BUGGY]  if(right.isArray()  ||  left.isArray())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  left.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  left.isArray())  {	  if(right.isArray())    {    	non-compiled	[CE]  	3	None	replace
777	[BUG]  [BUGGY]  if(right!=  null  &&  right.isArray())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&  right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&  right.isArray())  {	  if(right.isArray())    {    	non-compiled	[CE]  	3	None	replace
778	[BUG]  [BUGGY]  if(right.isArray()  ||  left.equals(right))  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  left.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  left.equals(right))  {	  if(right.isArray())    {    	non-compiled	[CE]  	3	None	replace
779	[BUG]  [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  left  =  left.getNext();  if  (!right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  left  =  left.getNext();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null)  {  if  (!right.isEmpty())  {  left  =  left.getNext();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
780	[BUG]  [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  right  =  left.getNext();  if  (!right.isEmpty())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null)  {  if  (!right.isEmpty())  {  right  =  left.getNext();  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null)  {  if  (!right.isEmpty())  {  right  =  left.getNext();  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
781	[BUG]  [BUGGY]  If  (!left.isEmpty()  &&!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isEmpty()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isEmpty()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
782	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
783	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  ||  isAssignmentTarget(right))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  ||  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    if  (!left.isNumber()  ||  isAssignmentTarget(right))  {	  	non-compiled	[CE]  	109	None	add
784	[BUG]  [BUGGY]  if(right!=  null)  {  If  (!left.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  If  (!left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  If  (!left.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
785	[BUG]  [BUGGY]  if  (right.isNumber())  {  If  (!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right.isNumber())  {  If  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right.isNumber())  {  If  (!right.isNumber())  {	  if    (!left.isNumber())    {    If    (!left.isNumber())    {    	non-compiled	[CE]  	77	None	replace
786	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
787	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!right.isEmpty()  &&  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	71	None	add
788	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(l))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!right.isEmpty()  &&  isAssignmentTarget(l))  {	  	non-compiled	[CE]  	71	None	add
789	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	89	None	replace
790	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(left,  right))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(left,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
791	[BUG]  [BUGGY]  if(right.isNumber()  &&  isAssignmentTarget(left,  right))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  &&  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  &&  isAssignmentTarget(left,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
792	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left,  right)||  parent!=  null)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
793	[BUG]  [BUGGY]  if(right!=  null)  {  If  (!right.isEmpty())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  If  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  If  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    If    (!right.isEmpty())    {    	non-compiled	[CE]  	101	None	replace
794	[BUG]  [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	172	None	replace
795	[BUG]  [BUGGY]  if(left.isEmpty()  ||  right.isNumber())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||  right.isNumber())  {	  if(right.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	5	None	replace
796	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	170	None	replace
797	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  Node  right  =  left.getNext();  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  Node  right  =  left.getNext();  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    Node  right  =  left.getNext();  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	105	None	add
798	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.isNumber())  {	  if(left.isNumber())    {    	non-compiled	[CE]  	163	None	replace
799	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.isNumber())  {	  if(left.isNumber())    {    	non-compiled	[CE]  	163	None	replace
800	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(l))  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  isAssignmentTarget(l))  {	  	non-compiled	[CE]  	69	None	add
801	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  hasAssignmentTarget(n))  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  hasAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  hasAssignmentTarget(n))  {	  	non-compiled	[CE]  	69	None	add
802	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  areAssignmentTarget(n))  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  areAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  areAssignmentTarget(n))  {	  	non-compiled	[CE]  	69	None	add
803	[BUG]  [BUGGY]  Node  right  =  left,  right.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left,  right.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left,  right.getNext();	  Node    right    =    parent.getNext();    	non-compiled	[CE]  	18	None	replace
804	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  If  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    If  (!left.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	115	None	add
805	[BUG]  [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	149	None	replace
806	[BUG]  [BUGGY]  if  (!right.equals(left)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	82	None	replace
807	[BUG]  [BUGGY]  Node  current  =  node.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  node.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  node.getFirstChild();	  Node    current    =    parent.getFirstChild();    	non-compiled	[CE]  	17	None	replace
808	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!right.isNumber()  ||  isAssignmentTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
809	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  left.getNext();  if(parent.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  left.getNext();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  left.getNext();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
810	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getNext();  if(parent.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getNext();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  right  =  parent.getNext();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
811	[BUG]  [BUGGY]  if  (!right.equals(left)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	87	None	replace
812	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    if  (!left.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  	107	None	add
813	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	129	None	replace
814	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  	165	None	replace
815	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	44	None	replace
816	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  right;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext(),  right;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext(),  right;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	156	None	replace
817	[BUG]  [BUGGY]  if(left!=  null  ||!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||!right.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  	168	None	replace
818	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  right!=  null.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  right!=  null.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  	168	None	replace
819	[BUG]  [BUGGY]  if(left!=  null  ||  left.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	34	None	replace
820	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()!=    Token.FUNCTION)    {    	non-compiled	[CE]  	118	None	replace
821	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.isEmpty())    {    	non-compiled	[CE]  	192	None	replace
822	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.isEmpty())    {    	non-compiled	[CE]  	192	None	replace
823	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.isEmpty())  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.isEmpty())    {    	non-compiled	[CE]  	192	None	replace
824	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  parent.getType()!=  Token.FUNCTION)  {	  if    (!left.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	116	None	replace
825	[BUG]  [BUGGY]  if  (parent.isArray()  ||  right.equals(left))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent.isArray()  ||  right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent.isArray()  ||  right.equals(left))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  	143	None	replace
826	[BUG]  [BUGGY]  if  (parent.isArray()  ||  right.equals(right))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent.isArray()  ||  right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent.isArray()  ||  right.equals(right))  {	  if    (!right.isArray()    ||    parent.equals(left))    {    	non-compiled	[CE]  	143	None	replace
827	[BUG]  [BUGGY]  if(right!=  null  ||!right.isNumber())  {  if(left!=  null  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  ||!right.isNumber())  {  if(left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isNumber())  {  if(left!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (left!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	147	None	replace
828	[BUG]  [BUGGY]  if(right!=  null)  {  if(left!=  null  ||  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if(left!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if(left!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (left!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	147	None	replace
829	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (left.isNumber())    {    	non-compiled	[CE]  	64	None	replace
830	[BUG]  [BUGGY]  if(right.isArray())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray())  {  Node  right  =  parent.getParent();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (left.isNumber())    {    	non-compiled	[CE]  	64	None	replace
831	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(left.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  Node  right  =  parent.getParent();  if(left.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (left.isNumber())    {    	non-compiled	[CE]  	64	None	replace
832	[BUG]  [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isEmpty())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getFirstChild();  if(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    Node  right  =  left.getFirstChild();  if(right.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
833	[BUG]  [BUGGY]  if(right.isEmpty())  {  Node  right  =  parent.getFirstChild();  if(right.isEmpty())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  Node  right  =  parent.getFirstChild();  if(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    Node  right  =  parent.getFirstChild();  if(right.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
834	[BUG]  [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getNext();  if(right.isEmpty())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  Node  right  =  left.getNext();  if(right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    Node  right  =  left.getNext();  if(right.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
835	[BUG]  [BUGGY]  if(right.isArray()  ||  right.isAssignmentTo(left))  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  	180	None	replace
836	[BUG]  [BUGGY]  if(right.isEmpty()  ||  right.isAssignmentTo(left))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  right.isAssignmentTo(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  right.isAssignmentTo(left))  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  	180	None	replace
837	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	43	None	replace
838	[BUG]  [BUGGY]  if(parent.isNumber())  {  if  (left.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  if  (left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  if  (left.isNumber())  {	  if    (right.isNumber())    {    if    (left.isNumber())    {    	non-compiled	[CE]  	65	None	replace
839	[BUG]  [BUGGY]  if(right.isEmpty())  {  if  (left.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if  (left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {  if  (left.isNumber())  {	  if    (right.isNumber())    {    if    (left.isNumber())    {    	non-compiled	[CE]  	65	None	replace
840	[BUG]  [BUGGY]  if(parent.isNumber())  {  if  (right.isNumber())  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  if  (right.isNumber())  {	  if    (right.isNumber())    {    if    (left.isNumber())    {    	non-compiled	[CE]  	65	None	replace
841	[BUG]  [BUGGY]  Node  current  =  left.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getParent();	  Node    current    =    left.getNext();    	non-compiled	[CE]  	20	None	replace
842	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	120	None	replace
843	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	120	None	replace
844	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&!left.isEmpty()  ||  right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&!left.isEmpty()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    if  (!right.isEmpty()  &&!left.isEmpty()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
845	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&! "left.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  if  (!right.isEmpty()  &&! "left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&!left.isEmpty())    {    if  (!right.isEmpty()  &&! "left.isEmpty())  {	  	non-compiled	[CE]  	80	None	add
846	[BUG]  [BUGGY]  Node  left  =  left.getNext();  if  (!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getNext();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getNext();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
847	[BUG]  [BUGGY]  Node  left  =  left.getNext();  if(right!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  left  =  left.getNext();  if(right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  left  =  left.getNext();  if(right!=  null)  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
848	[BUG]  [BUGGY]  Node  current  =  left,  right.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left,  right.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left,  right.getNext();	  Node    current    =    parent.getNext();    	non-compiled	[CE]  	21	None	replace
849	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
850	[BUG]  [BUGGY]  if  (left  ==  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left  ==  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||  left.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
851	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||  right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {  If  (right!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
852	[BUG]  [BUGGY]  if(left.isEmpty())  {  if  (right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty())  {  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty())  {  if  (right.isNumber())  {	  if    (right.isNumber())    {    if    (right.isNumber())    {    	non-compiled	[CE]  	61	None	replace
853	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (right.isNumber())  {	  if    (right.isNumber())    {    if    (right.isNumber())    {    	non-compiled	[CE]  	61	None	replace
854	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(left)||  right.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	112	None	replace
855	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
856	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
857	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
858	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
859	[BUG]  [BUGGY]  Node  right  =  node.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  node.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  node.getParent();	  Node    right    =    parent.getParent();    	non-compiled	[CE]  	19	None	replace
860	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!left.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!left.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n)||!left.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!left.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	12	None	replace
861	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
862	[BUG]  [BUGGY]  if(parent!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
863	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
864	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
865	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
866	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.GETELEM)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	183	None	replace
867	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	183	None	replace
868	[BUG]  [BUGGY]  if(left.isEmpty()  ||!right.isEmpty())  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||!right.isEmpty())  {	  if(!right.isEmpty()    ||!right.isEmpty())    {    	non-compiled	[CE]  	193	None	replace
869	[BUG]  [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	188	None	replace
870	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	188	None	replace
871	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	188	None	replace
872	[BUG]  [BUGGY]  if  (!left.isArray()  ||!right.isArray())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isArray()  ||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray()  ||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  	85	None	replace
873	[BUG]  [BUGGY]  if  (!right.equals(left)||!right.isArray())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  	85	None	replace
874	[BUG]  [BUGGY]  if  (!left.equals(right)||!right.isArray())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.equals(right)||!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.equals(right)||!right.isArray())  {	  if    (!right.isArray()    ||!right.isArray())    {    	non-compiled	[CE]  	85	None	replace
875	[BUG]  [BUGGY]  if  (left.equals(right))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.equals(right))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  	145	None	replace
876	[BUG]  [BUGGY]  if  (!right.equals(left)||!right.equals(left))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||!right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||!right.equals(left))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
877	[BUG]  [BUGGY]  if  (!right.equals(left)||!right.equals(right))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||!right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||!right.equals(right))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
878	[BUG]  [BUGGY]  if  (!right.equals(left)&&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)&&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)&&  isAssignmentTarget(left))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
879	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  hasAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  hasAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  hasAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
880	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  areAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  areAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  areAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
881	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(l))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(l))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(l))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
882	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(n);	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
883	[BUG]  [BUGGY]  if(parent.isNumber())  {  If  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  If  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {  If  (right.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
884	[BUG]  [BUGGY]  if  (left.isNumber())  {  If  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left.isNumber())  {  If  (right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.isNumber())  {  If  (right.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
885	[BUG]  [BUGGY]  If  (right!=  null  &&  right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right!=  null  &&  right.isNumber())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
886	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.GETPROP)  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!RIGHT.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
887	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right)||  parent!=  null)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right)||  parent!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  isAssignmentTarget(right)||  parent!=  null)  {	  if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  	110	None	replace
888	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||! "right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||! "right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!right.isNumber()  ||! "right.isEmpty())  {	  	non-compiled	[CE]  	53	None	add
889	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!RIGHT.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  if  (!right.isNumber()  ||!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!right.isEmpty())    {    if  (!right.isNumber()  ||!RIGHT.isEmpty())  {	  	non-compiled	[CE]  	53	None	add
890	[BUG]  [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
891	[BUG]  [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
892	[BUG]  [BUGGY]  if(!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
893	[BUG]  [BUGGY]  if(left.isArray()  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isArray()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isArray()  ||  right.isNumber())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
894	[BUG]  [BUGGY]  if(left.isNumber()  ||  left.isArray())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  left.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  left.isArray())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
895	[BUG]  [BUGGY]  if(right.isArray()  ||  left.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isArray()  ||  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray()  ||  left.isNumber())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
896	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getNext();  if(right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getNext();  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    Node  right  =  left.getNext();  if(right.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
897	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getLastChild();  if(right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getLastChild();  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    Node  right  =  left.getLastChild();  if(right.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
898	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getFirstChild();  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  Node  right  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  	4	None	add
899	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR)  {  if  (!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.VAR)  {  if  (!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.VAR)  {  if  (!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
900	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  if  (right!=  null)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  if  (right!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getFirstChild();  if  (right!=  null)  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
901	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  if  (right!=  null  ||!right.isEmpty())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  if  (right!=  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getFirstChild();  if  (right!=  null  ||!right.isEmpty())  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
902	[BUG]  [BUGGY]  if(left!=  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	46	None	replace
903	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  if  (right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	46	None	replace
904	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left,  right))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(left,  right))  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
905	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left,  parent))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left,  parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(left,  parent))  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
906	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent!=  null)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(left)||  parent!=  null)  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
907	[BUG]  [BUGGY]  if(left!=  null  ||  left.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  ||  left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  ||  left.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!left.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	126	None	replace
908	[BUG]  [BUGGY]  if(right  ==  null  &&!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right  ==  null  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right  ==  null  &&!right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  	207	None	replace
909	[BUG]  [BUGGY]  if(left!=  null  &&!right.isEmpty())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left!=  null  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left!=  null  &&!right.isEmpty())  {	  if(right!=    null    &&!right.isEmpty())    {    	non-compiled	[CE]  	207	None	replace
910	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||! "left.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||! "left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!right.isNumber()  ||! "left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
911	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.hasEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!right.isNumber()  ||!left.hasEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!right.isNumber()  ||!left.hasEmpty())  {	  	non-compiled	[CE]  	51	None	add
912	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    	non-compiled	[CE]  	185	None	replace
913	[BUG]  [BUGGY]  if  (!left.equals(right)||!right.equals(left))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.equals(right)||!right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.equals(right)||!right.equals(left))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
914	[BUG]  [BUGGY]  if(!left.equals(right)||!right.equals(right))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.equals(right)||!right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.equals(right)||!right.equals(right))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
915	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
916	[BUG]  [BUGGY]  if(right.getType()  ==  Token.RETURN)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.RETURN)  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
917	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    Node    right    =    n.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	138	None	replace
918	[BUG]  [BUGGY]  if(left.getType()  ==  Token.RETURN)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.RETURN)  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
919	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    Node    right    =    left.getNext();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	100	None	replace
920	[BUG]  [BUGGY]  if(!right.isNumber()  ||  isAssignedTarget(n))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||  isAssignedTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  	184	None	replace
921	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  ||  isAssignedTarget(n))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isNumber()  ||  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isNumber()  ||  isAssignedTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  	184	None	replace
922	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignedTarget(n))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignedTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignedTarget(n))    {    	non-compiled	[CE]  	184	None	replace
923	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.NAME)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()!=  Token.NAME)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	169	None	replace
924	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	209	None	replace
925	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	209	None	replace
926	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isNode())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isNode())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isNode())  {	  if    (right.isNumber())    {    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	206	None	replace
927	[BUG]  [BUGGY]  parent  =  parent.getParent();  if(right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  parent  =  parent.getParent();  if(right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	parent  =  parent.getParent();  if(right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (RIGHT.isNumber())    {    	non-compiled	[CE]  	66	None	replace
928	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!RIGHT.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	172	None	replace
929	[BUG]  [BUGGY]  if(!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  right.getType()  >=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  	124	None	replace
930	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  left.getType()  >=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    >=    Token.FUNCTION)    {    	non-compiled	[CE]  	124	None	replace
931	[BUG]  [BUGGY]  If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	11	None	replace
932	[BUG]  [BUGGY]  If  (!right.isIn()  &&  isAssignmentTarget(n))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isIn()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isIn()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	11	None	replace
933	[BUG]  [BUGGY]  if(right!=  null  &&!right.isArray())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isArray())  {	  if    (right!=    null    &&!right.isNumber())    {    	non-compiled	[CE]  	25	None	replace
934	[BUG]  [BUGGY]  If  (right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right.isNumber()  ||  right.isEmpty())  {	  if    (right.isNumber())    {    If    (right.isNumber())    {    	non-compiled	[CE]  	63	None	replace
935	[BUG]  [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	154	None	replace
936	[BUG]  [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.EMPTY)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  ||!right.isEmpty()  ||  right.getType()  ==  Token.EMPTY)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	154	None	replace
937	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isArrayAccess(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isArrayAccess(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  isArrayAccess(left))  {	  if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    	non-compiled	[CE]  	104	None	replace
938	[BUG]  [BUGGY]  if(left.isEmpty()  ||  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isEmpty()  ||  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isEmpty()  ||  isAssignmentTarget(left))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	106	None	replace
939	[BUG]  [BUGGY]  if(!right.isEmpty()  &&  isAssignmentTarget(left,  right))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  &&  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  &&  isAssignmentTarget(left,  right))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	106	None	replace
940	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!right.isNumber()    &&    isAssignedTarget(left))    {    	non-compiled	[CE]  	194	None	replace
941	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
942	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.VAR)  {	  if    (!right.isEmpty())    {    Node    right    =    parent.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	99	None	replace
943	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignedTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignedTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(left))    {    if  (!right.isNumber()  ||  isAssignedTarget(left))  {	  	non-compiled	[CE]  	103	None	add
944	[BUG]  [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  isAssignmentTarget(lval))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    isAssignmentTarget(lval))    {    	non-compiled	[CE]  	14	None	replace
945	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  right.hasChildren())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  right.hasChildren())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  right.hasChildren())  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
946	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  right.equals(left))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  right.equals(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
947	[BUG]  [BUGGY]  If  (!right.isNumber()  &&  right.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  &&  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  &&  right.getType()  ==  Token.VAR)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	42	None	replace
948	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(RIGHT.isEmpty())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(RIGHT.isEmpty())  {	  	non-compiled	[CE]  	130	None	add
949	[BUG]  [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty())  <  return  n;  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty())  {  if(right.isEmpty())  <  return  n;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())    {    if(right.isEmpty())  <  return  n;	  	non-compiled	[CE]  	130	None	add
950	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  left.getNext(),  right);  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext(),  right);	  Node    right    =    left.getNext();    	non-compiled	[CE]  	156	None	replace
951	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    left.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	88	None	add
952	[BUG]  [BUGGY]  if(parent  ==  null  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent  ==  null  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent  ==  null  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	36	None	replace
953	[BUG]  [BUGGY]  If  (!left.isEmpty()  ||!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!left.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!left.isEmpty()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    If    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	127	None	replace
954	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	93	None	replace
955	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	108	None	replace
956	[BUG]  [BUGGY]  if(right!=  null  &&  right.isEmpty())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&  right.isEmpty())  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
957	[BUG]  [BUGGY]  if(right.isEmpty()  ||  left.equals(right.getString()))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  left.equals(right.getString()))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  left.equals(right.getString()))  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
958	[BUG]  [BUGGY]  if(right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {	  if(right.isEmpty())    {    	non-compiled	[CE]  	131	None	replace
959	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.STRING)  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
960	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NAME)  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
961	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.VAR)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.VAR)  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!left.isNumber())    {    	non-compiled	[CE]  	76	None	replace
962	[BUG]  [BUGGY]  if  (left  ==  null  ||!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (left  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||!right.isNumber())  {	  if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	29	None	replace
963	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.VAR)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()!=  Token.VAR)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	188	None	replace
964	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null.isArray())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  right!=  null.isArray())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  right!=  null.isArray())  {	  if    (left    ==    null    ||    right!=    null.isNumber())    {    	non-compiled	[CE]  	174	None	replace
965	[BUG]  [BUGGY]  if(right.isNumber()  ||  isAssignmentTarget(left,  right))  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  isAssignmentTarget(left,  right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  isAssignmentTarget(left,  right))  {	  if(!right.isNumber()    &&    isAssignmentTarget(left,    right))    {    	non-compiled	[CE]  	182	None	replace
966	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!left.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	126	None	replace
967	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  right.getType()  ==  Token.STRING)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!right.isNumber()    &&    hasAssignmentTarget(n))    {    	non-compiled	[CE]  	165	None	replace
968	[BUG]  [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.VAR)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	171	None	replace
969	[BUG]  [BUGGY]  if(right.getType()  ==  Token.EMPTY)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.EMPTY)  {	  if    (left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	171	None	replace
970	[BUG]  [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	34	None	replace
971	[BUG]  [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	34	None	replace
972	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  	non-compiled	[CE]  	111	None	add
973	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!right.getType())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  if  (parent!=  null  ||!right.getType())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (parent!=    null    ||!right.isNumber())    {    if  (parent!=  null  ||!right.getType())  {	  	non-compiled	[CE]  	26	None	add
974	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignedTarget(parent))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  if  (!right.isNumber()  &&  isAssignedTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(parent))    {    if  (!right.isNumber()  &&  isAssignedTarget(parent))  {	  	non-compiled	[CE]  	73	None	add
975	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getFirstChild();  if(parent.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getFirstChild();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  current  =  parent.getFirstChild();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
976	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getLastChild();  if(parent.isNumber())  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getLastChild();  if(parent.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  current  =  parent.getLastChild();  if(parent.isNumber())  {	  	non-compiled	[CE]  	1	None	add
977	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getFirstChild();  if(current.isNumber())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getFirstChild();  if(current.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  current  =  parent.getFirstChild();  if(current.isNumber())  {	  	non-compiled	[CE]  	1	None	add
978	[BUG]  [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getLastChild();  if(current.isNumber())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.isNumber())  {  Node  current  =  parent.getLastChild();  if(current.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())    {    Node  current  =  parent.getLastChild();  if(current.isNumber())  {	  	non-compiled	[CE]  	1	None	add
979	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  if(RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    if(RIGHT.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	8	None	add
980	[BUG]  [BUGGY]  Node  current  =  n.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  n.getParent();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  n.getParent();	  Node    current    =    n.getFirstChild();    	non-compiled	[CE]  	202	None	replace
981	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
982	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.GETELEM)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.GETELEM)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  	150	None	replace
983	[BUG]  [BUGGY]  if(right.isObject()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isObject()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isObject()  ||  right.getType()  ==  Token.STRING)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	7	None	replace
984	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.RETURN)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  right.getType()!=  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  right.getType()!=  Token.RETURN)  {	  if(!right.isEmpty()    ||    left.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	208	None	replace
985	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null  ||!right.isEmpty())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  right!=  null  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  right!=  null  ||!right.isEmpty())  {	  if(right!=    null    ||!right.isEmpty())    {    	non-compiled	[CE]  	168	None	replace
986	[BUG]  [BUGGY]  if(right!=  null  &&!right.isNumber())  {  if  (left!=  null  &&  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isNumber())  {  if  (left!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isNumber())  {  if  (left!=  null  &&  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (left!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	147	None	replace
987	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	134	None	add
988	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isArray()  ||  left.isObject())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isArray()  ||  left.isObject())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isArray()  ||  left.isObject())  {	  if(right.isNumber()    ||    right.isArray())    {    	non-compiled	[CE]  	179	None	replace
989	[BUG]  [BUGGY]  if(left.getType()  ==  Token.EMPTY)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.EMPTY)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	120	None	replace
990	[BUG]  [BUGGY]  If  (left!=  null  ||!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (left!=  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (left!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
991	[BUG]  [BUGGY]  If  (right  ==  null  ||!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (right  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (right  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
992	[BUG]  [BUGGY]  if(right!=  null  &&!right.isNumber())  {  If  (left!=  null  &&  right.isNumber())  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isNumber())  {  If  (left!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isNumber())  {  If  (left!=  null  &&  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    If    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	47	None	replace
993	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  if  (!parent.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!parent.isNumber()    &&!right.isEmpty())    {    if  (!parent.isNumber()  ||!right.isEmpty())  {	  	non-compiled	[CE]  	59	None	add
994	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!left.isNumber()  ||!left.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!left.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!left.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
995	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!RIGHT.isNumber()  ||!left.isEmpty())  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  if  (!RIGHT.isNumber()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||!left.isEmpty())    {    if  (!RIGHT.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  	51	None	add
996	[BUG]  [BUGGY]  if(!right.equals(left)||!right.equals(parent))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.equals(left)||!right.equals(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.equals(left)||!right.equals(parent))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  	145	None	replace
997	[BUG]  [BUGGY]  if(!right.equals(left)&&  n.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.equals(left)&&  n.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.equals(left)&&  n.getType()  ==  Token.NAME)  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  	145	None	replace
998	[BUG]  [BUGGY]  if(!right.equals(left)&&!right.equals(right))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.equals(left)&&!right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.equals(left)&&!right.equals(right))  {	  if    (!right.equals(left))    {    	non-compiled	[CE]  	145	None	replace
999	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(right))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!left.isNumber()  &&  isAssignmentTarget(right))  {	  if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    	non-compiled	[CE]  	110	None	replace
1000	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isNumber()  ||  right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	30	None	replace
1001	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	30	None	replace
1002	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()!=  Token.NAME)  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()!=  Token.NAME)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	190	None	replace
1003	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!left.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
1004	[BUG]  [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||!left.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&!right.isEmpty()  ||!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&!right.isEmpty()  ||!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!left.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	32	None	replace
1005	[BUG]  [BUGGY]  if(!left.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&!RIGHT.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!RIGHT.isEmpty())    {    	non-compiled	[CE]  	155	None	replace
1006	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()!=    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	96	None	add
1007	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.ARRAYLIT)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.ARRAYLIT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.ARRAYLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	112	None	replace
1008	[BUG]  [BUGGY]  if(left  ==  null  ||  right!=  null  ||  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  right!=  null  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  right!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    ==    null    ||!right.isNumber())    {    	non-compiled	[CE]  	46	None	replace
1009	[BUG]  [BUGGY]  parent  =  parent.getParent();  if(right!=  null  &&  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  parent  =  parent.getParent();  if(right!=  null  &&  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	parent  =  parent.getParent();  if(right!=  null  &&  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (right.isNumber())    {    	non-compiled	[CE]  	62	None	replace
1010	[BUG]  [BUGGY]  parent  =  parent.getParent();  if(isAssignmentTarget(n))  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  parent  =  parent.getParent();  if(isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	parent  =  parent.getParent();  if(isAssignmentTarget(n))  {	  if    (right.isNumber())    {    Node    right    =    parent.getParent();    if    (right.isNumber())    {    	non-compiled	[CE]  	62	None	replace
1011	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignedTarget(n))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  if  (!right.isEmpty()  &&  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    if  (!right.isEmpty()  &&  isAssignedTarget(n))  {	  	non-compiled	[CE]  	71	None	add
1012	[BUG]  [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isNumber())  {  Node  right  =  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
1013	[BUG]  [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  right.getFirstChild();  [CE]  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isNumber())  {  Node  right  =  right.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
1014	[BUG]  [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  left.getFirstChild();  [CE]  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&!right.isNumber())  {  Node  right  =  left.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isNumber())  {  Node  right  =  left.getFirstChild();	  if    (right!=    null    ||!right.isNumber())    {    Node    right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  	50	None	replace
1015	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.RETURN  ||!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.RETURN  ||!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.RETURN  ||!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	183	None	replace
1016	[BUG]  [BUGGY]  if(!right.isNumber()  &&  parent.getType()  ==  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  parent.getType()  ==  Token.RETURN)  {	  if(!right.isNumber()    &&    isAssignmentTarget(left)||    parent.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  	183	None	replace
1017	[BUG]  [BUGGY]  Node  right  =  node.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  right  =  node.getNext();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  node.getNext();	  Node    right    =    parent.getNext();    	non-compiled	[CE]  	18	None	replace
1018	[BUG]  [BUGGY]  if(right.getType()  ==  Token.RETURN  ||!right.equals(right))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.RETURN  ||!right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.RETURN  ||!right.equals(right))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
1019	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  &&!right.equals(left))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  &&!right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME  &&!right.equals(left))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
1020	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||!right.equals(left))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||!right.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME  ||!right.equals(left))  {	  if    (!right.equals(right))    {    	non-compiled	[CE]  	146	None	replace
1021	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignedTarget(n))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignedTarget(n))  {	  	non-compiled	[CE]  	67	None	add
1022	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    if  (!RIGHT.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	132	None	add
1023	[BUG]  [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  	141	None	replace
1024	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!right.isNumber())    {    	non-compiled	[CE]  	141	None	replace
1025	[BUG]  [BUGGY]  if(right.getType()  ==  Token.NAME  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.NAME  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.NAME  ||!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	91	None	replace
1026	[BUG]  [BUGGY]  Node  current  =  left,  right.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  Node  current  =  left,  right.getFirstChild();  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left,  right.getFirstChild();	  Node    current    =    parent.getFirstChild();    	non-compiled	[CE]  	17	None	replace
1027	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!right.isNumber()  ||  right.isEmpty())  {	  if(left.getType()    ==    Token.NAME    &&!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	152	None	replace
1028	[BUG]  [BUGGY]  if(parent  ==  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent  ==  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent  ==  null  ||!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
1029	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (RIGHT  ==  null  ||!right.isNumber())  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  if  (RIGHT  ==  null  ||!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right    ==    null    ||!right.isNumber())    {    if  (RIGHT  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  	28	None	add
1030	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [CE]  [FE]                junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NAME)  {	  if    (right!=    null    ||!right.isNumber())    {    if    (right    >>    null    ||!right.isNumber())    {    	non-compiled	[CE]  	49	None	replace
1031	[BUG]  [BUGGY]  if(right.isEmpty()  ||  isAssignmentTarget(n))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isEmpty()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty()  ||  isAssignmentTarget(n))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	72	None	replace
1032	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  isAssignmentTarget(parent))  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  isAssignmentTarget(parent))  {	  if    (!right.isEmpty()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	72	None	replace
1033	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(RIGHT.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  if(RIGHT.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.getType()    ==    Token.STRING)    {    if(RIGHT.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	6	None	add
1034	[BUG]  [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!left.isNumber())    {    Node    right    =    left.getFirstChild();    if    (!left.isNumber())    {    	non-compiled	[CE]  	139	None	replace
1035	[BUG]  [BUGGY]  if(!left.isNumber()  &&  right.hasChildren())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  right.hasChildren())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  right.hasChildren())  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!left.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	12	None	replace
1036	[BUG]  [BUGGY]  if(!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
1037	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
1038	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentBlock(n))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentBlock(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(n)||!RIGHT.isNumber()  &&  isAssignmentBlock(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if    (!RIGHT.isNumber()    &&    isAssignmentTarget(n))    {    	non-compiled	[CE]  	13	None	replace
1039	[BUG]  [BUGGY]  if(left.isNumber()  ||  right.isNumber())  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.isNumber()  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber()  ||  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
1040	[BUG]  [BUGGY]  if(left.getType()  ==  Token.RETURN  ||  right.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.RETURN  ||  right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.RETURN  ||  right.isNumber())  {	  if    (right.isNumber())    {    Node    right    =    left.getFirstChild();    if    (right.isNumber())    {    	non-compiled	[CE]  	158	None	replace
1041	[BUG]  [BUGGY]  if  (!right.equals(left)||!right.isEmpty())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)||!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
1042	[BUG]  [BUGGY]  if  (!right.isAll()  ||!right.isEmpty())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isAll()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isAll()  ||!right.isEmpty())  {	  if    (!right.isArray()    ||!right.isEmpty())    {    	non-compiled	[CE]  	83	None	replace
1043	[BUG]  [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  ||!right.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!right.isNumber()    &&!left.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	149	None	replace
1044	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	82	None	replace
1045	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    ||    parent.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	113	None	add
1046	[BUG]  [BUGGY]  if(right!=  null  &&  left.isNumber())  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right!=  null  &&  left.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&  left.isNumber())  {	  if    (left!=    null    ||    left.isNumber())    {    	non-compiled	[CE]  	175	None	replace
1047	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isEmpty()  ||  left.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	5	None	replace
1048	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty()  ||  left.equals(left))  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty()  ||  left.equals(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isEmpty()  ||  left.equals(left))  {	  if(right.isNumber()    ||    right.isEmpty())    {    	non-compiled	[CE]  	5	None	replace
1049	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.STRING)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.STRING)  {	  if    (!right.isEmpty())    {    Node    right    =    left.getFirstChild();    if    (!right.isEmpty())    {    	non-compiled	[CE]  	137	None	replace
1050	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.getType()!=  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isArray()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.getType()!=  Token.NAME)  {	  if    (!right.isArray()    ||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	87	None	replace
1051	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
1052	[BUG]  [BUGGY]  If  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	121	None	replace
1053	[BUG]  [BUGGY]  If  (!right.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isNumber()  ||  right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	31	None	replace
1054	[BUG]  [BUGGY]  If  (!right.isEmpty()  ||!right.isEmpty())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  If  (!right.isEmpty()  ||!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	If  (!right.isEmpty()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    If    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	31	None	replace
1055	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty()  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty()  ||  left.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  	57	None	add
1056	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignedTarget(n))  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.isNumber()  ||  isAssignedTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.isNumber()  ||  isAssignedTarget(n))  {	  	non-compiled	[CE]  	69	None	add
1057	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.getNumber()  ||  isAssignmentTarget(n))  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  if  (!left.getNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    ||    isAssignmentTarget(n))    {    if  (!left.getNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  	69	None	add
1058	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  isAssignedTarget(right))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  if  (!left.isNumber()  &&  isAssignedTarget(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(right))    {    if  (!left.isNumber()  &&  isAssignedTarget(right))  {	  	non-compiled	[CE]  	109	None	add
1059	[BUG]  [BUGGY]  if(right.getType()  ==  Token.GETPROP)  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.getType()  ==  Token.GETPROP)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	191	None	replace
1060	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	135	None	replace
1061	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(left)||  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(left)||  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isAssignmentTo(left)||  parent.getType()  ==  Token.EXPR_RESULT)  {	  if(right.isNumber()    ||    right.isAssignmentTo(left))    {    	non-compiled	[CE]  	180	None	replace
1062	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignedTarget(left))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignedTarget(left))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    if  (!left.isNumber()  &&  isAssignedTarget(left))  {	  	non-compiled	[CE]  	107	None	add
1063	[BUG]  [BUGGY]  if(!left.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isEmpty()  ||  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    if    (!right.isEmpty()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	189	None	replace
1064	[BUG]  [BUGGY]  if(left.getType()  ==  Token.RETURN  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.RETURN  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.RETURN  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!RIGHT.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	128	None	replace
1065	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.VAR)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!RIGHT.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	128	None	replace
1066	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	90	None	add
1067	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber()    &&    right.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	92	None	add
1068	[BUG]  [BUGGY]  if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
1069	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.EMPTY)  {  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.getType()  ==  Token.EMPTY)  {	  if(right.isNumber()    ||    right.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	9	None	replace
1070	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME)  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {	  if    (!left.isNumber())    {    Node    right    =    left.getNext();    if    (!right.isNumber())    {    	non-compiled	[CE]  	78	None	replace
1071	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETPROP)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETPROP)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.GETPROP)  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  	125	None	replace
1072	[BUG]  [BUGGY]  if(!left.isNumber()  &&  right.equals(right))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!left.isNumber()  &&  right.equals(right))  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!left.isNumber()  &&  right.equals(right))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if    (!left.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	43	None	replace
1073	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
1074	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!right.isEmpty())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!RIGHT.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    if    (!RIGHT.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  	33	None	replace
1075	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	133	None	replace
1076	[BUG]  [BUGGY]  if  (!right.equals(left)&&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if  (!right.equals(left)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left)&&  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	133	None	replace
1077	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.EMPTY)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.NAME  ||!right.isEmpty()  &&  parent.getType()  ==  Token.EMPTY)  {	  if    (!right.isEmpty()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	133	None	replace
1078	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(left.isNumber()  ||  right.isEmpty())  {  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(left.isNumber()  ||  right.isEmpty())  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    if(left.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  	4	None	add
1079	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  right.isEmpty())  <  return  n;  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  if(right.isNumber()  ||  right.isEmpty())  <  return  n;  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()    ||    right.isEmpty())    {    if(right.isNumber()  ||  right.isEmpty())  <  return  n;	  	non-compiled	[CE]  	4	None	add
1080	[BUG]  [BUGGY]  if(!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }      [BUGGY]  if(!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]        return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isArray()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if    (!right.isArray()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  	161	None	replace
