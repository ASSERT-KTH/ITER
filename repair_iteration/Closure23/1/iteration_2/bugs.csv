bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(parent.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if(parent.isNumber())  {	  if    (right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
2	[BUG]  [BUGGY]  if(parent.isNumber())  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(parent.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.isNumber())  {	  if    (right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
3	[BUG]  [BUGGY]  if(right.isArray())  {  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isArray())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isArray())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
4	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if(right.isNumber()  ||  right.isEmpty())  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
5	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isEmpty())  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
7	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.getType()  ==  Token.STRING)  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
8	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
9	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	9	1	replace
10	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
11	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  If  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    If  (!right.isNumber()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  ';'  expected	12	None	add
12	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!left.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!left.isNumber()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!RIGHT.isNumber()  &&  isAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
14	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(lval))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(lval))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  &&  isAssignmentTarget(lval))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
15	[BUG]  [BUGGY]  Node  right  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  parent.getLastChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  parent.getFirstChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
17	[BUG]  [BUGGY]  Node  current  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  current  =  parent.getFirstChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  Node  right  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  parent.getNext();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getNext();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  Node  right  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  parent.getParent();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  Node  current  =  left.getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  current  =  left.getNext();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  Node  current  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  current  =  parent.getNext();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  parent.getNext();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (left!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	16	1	replace
23	[BUG]  [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left!=  null  ||  right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	16	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (right!=  null  &&!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
25	[BUG]  [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  &&!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right!=  null  &&!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
26	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (parent!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	16	1	replace
27	[BUG]  [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (parent!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (parent!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	16	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (right  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
29	[BUG]  [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right  ==  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
30	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!right.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
31	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  If  (!right.isNumber()  &&!left.isEmpty())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  If  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    If  (!right.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	3	None	add
32	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!left.isNumber()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!left.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!RIGHT.isNumber()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!RIGHT.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
34	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!right.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
35	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
36	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
37	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
38	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
39	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
40	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
41	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
42	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  If  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  If  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    If  (!right.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
43	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
44	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if  (!RIGHT.isNumber()  &&  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
45	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (right!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
46	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  ==  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (right  ==  null  ||!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
47	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  If  (right!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    If  (right!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  ';'  expected	15	None	add
48	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  >=  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  >=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (right  >=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
49	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  >>  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right  >>  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (right  >>  null  ||!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
50	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  Node  right!=  null  ||!right.isNumber())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  Node  right!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    Node  right!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  ';'  expected	15	None	add
51	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||!left.isEmpty())  {	  if    (!left.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	18	1	replace
52	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||!left.isEmpty())  {	  if    (!left.isNumber())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	18	1	replace
53	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
54	[BUG]  [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
55	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
56	[BUG]  [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
57	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
58	[BUG]  [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
59	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!parent.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
60	[BUG]  [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!parent.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!parent.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	22	1	replace
61	[BUG]  [BUGGY]  if  (right.isNumber())  {  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  if  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    if  (right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
62	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  parent.getParent();  if  (right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
63	[BUG]  [BUGGY]  if  (right.isNumber())  {  If  (right.isNumber())  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  If  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    If  (right.isNumber())  {	  	non-compiled	[CE]  ';'  expected	8	None	add
64	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  parent.getParent();  if  (left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
65	[BUG]  [BUGGY]  if  (right.isNumber())  {  if  (left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  if  (left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    if  (left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
66	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  parent.getParent();  if  (RIGHT.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
68	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
69	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	13	1	replace
70	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	13	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
72	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  isAssignmentTarget(n))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
74	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(parent))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
75	[BUG]  [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    if  (!left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
76	[BUG]  [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getNext();  if  (!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getNext();  if  (!left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    Node  right  =  left.getNext();  if  (!left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
77	[BUG]  [BUGGY]  if  (!left.isNumber())  {  If  (!left.isNumber())  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  If  (!left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    If  (!left.isNumber())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
78	[BUG]  [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getNext();  if  (!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    Node  right  =  left.getNext();  if  (!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
79	[BUG]  [BUGGY]  if  (!left.isNumber())  {  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  if  (!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    if  (!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
80	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	4	1	replace
81	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&!left.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	4	1	replace
82	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
83	[BUG]  [BUGGY]  if  (!right.isArray()  ||!right.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||!right.isEmpty())  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
84	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
85	[BUG]  [BUGGY]  if  (!right.isArray()  ||!right.isArray())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||!right.isArray())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||!right.isArray())  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
86	[BUG]  [BUGGY]  if  (!right.isArray()  &&  right.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  &&  right.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
87	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
89	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
91	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
93	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
95	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
97	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  right.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
98	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
99	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    Node  right  =  parent.getFirstChild();  if  (!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
100	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  left.getNext();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  left.getNext();  if  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    Node  right  =  left.getNext();  if  (!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
101	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  If  (!right.isEmpty())  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  If  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    If  (!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
102	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
104	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
106	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
108	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  &&  isAssignmentTarget(right))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
110	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  isAssignmentTarget(right))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  isAssignmentTarget(right))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
112	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.OBJECTLIT)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
114	[BUG]  [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
115	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	7	1	replace
116	[BUG]  [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  ||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	7	1	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
118	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  parent.getType()!=  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
119	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
120	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
121	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    If  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
122	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
123	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
124	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!right.isNumber()  &&  left.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
125	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
126	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!left.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!left.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
127	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  If  (!right.isNumber()  &&!right.isEmpty())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  If  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    If  (!right.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	21	None	add
128	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!RIGHT.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!RIGHT.isNumber()  &&!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
129	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if(right.isEmpty())  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
131	[BUG]  [BUGGY]  if(right.isEmpty())  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isEmpty())  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
133	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
135	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isEmpty())    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
136	[BUG]  [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	2	None	replace
137	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    Node  right  =  left.getFirstChild();  if  (!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
138	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    Node  right  =  n.getFirstChild();  if  (!right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
139	[BUG]  [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    Node  right  =  left.getFirstChild();  if  (!left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
140	[BUG]  [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    if  (!left.isNumber()  ||  right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
141	[BUG]  [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    Node  right  =  left.getFirstChild();  if  (!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
142	[BUG]  [BUGGY]  if  (!left.isArray())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isArray())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isArray())  {	  if    (!right.isArray())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	5	None	replace
143	[BUG]  [BUGGY]  if  (!right.isArray()  ||  parent.equals(left))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  parent.equals(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  parent.equals(left))  {	  if    (!right.isArray())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	5	None	replace
144	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.equals(left))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  right.equals(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.equals(left))  {	  if    (!right.isArray())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	5	None	replace
145	[BUG]  [BUGGY]  if  (!right.equals(left))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.equals(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(left))  {	  if    (!right.isArray())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	5	None	replace
146	[BUG]  [BUGGY]  if  (!right.equals(right))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.equals(right))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.equals(right))  {	  if    (!right.isArray())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	5	None	replace
147	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (left!=  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (left!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (left!=  null  ||!right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
148	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  if  (right!=  null  ||!RIGHT.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right!=    null    ||!right.isNumber())    {    if  (right!=  null  ||!RIGHT.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
149	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
150	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!right.isNumber()  &&!left.isEmpty()  ||  right.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
151	[BUG]  [BUGGY]  if  (!left.isEmpty()  &&!right.isEmpty())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isEmpty()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isEmpty()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	22	None	replace
152	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(left.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.getType()  ==  Token.NAME  &&!right.isNumber()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	22	None	replace
153	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	7	None	replace
154	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
155	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  if  (!right.isNumber()  &&!RIGHT.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!right.isEmpty())    {    if  (!right.isNumber()  &&!RIGHT.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
156	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
157	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	14	None	replace
158	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  left.getFirstChild();  if  (right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
159	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getNext();  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getNext();  if  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  left.getNext();  if  (right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
160	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  left.getFirstChild();  if  (RIGHT.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
161	[BUG]  [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  &&  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  &&  isAssignmentTarget(left))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	11	None	replace
162	[BUG]  [BUGGY]  if(right!=  null  ||  right.isNumber())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right!=  null  ||  right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||  right.isNumber())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
163	[BUG]  [BUGGY]  if(left.isNumber())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(left.isNumber())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
164	[BUG]  [BUGGY]  if(right.isNumber()  ||  left.isEmpty())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  left.isEmpty())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
165	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  &&  hasAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
166	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(l))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignmentTarget(l))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  &&  isAssignmentTarget(l))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
167	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  ||  isAssignmentTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if  (!right.isNumber()  ||  isAssignmentTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
168	[BUG]  [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right!=  null  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  ||!right.isEmpty())  {	  if    (!right.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	2	None	replace
169	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(!right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  left.getType()  ==  Token.NAME)  {	  if    (!right.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	2	None	replace
170	[BUG]  [BUGGY]  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	20	None	replace
171	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.FUNCTION)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left.getType()  ==  Token.FUNCTION)  {	  if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	20	None	replace
172	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    left.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
173	[BUG]  [BUGGY]  if  (!right.isEmpty()  &&!right.isEmpty())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty()  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty()  &&!right.isEmpty())  {	  if    (!right.isNumber()    &&!left.isEmpty())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	4	None	replace
174	[BUG]  [BUGGY]  if  (left  ==  null  ||  right!=  null.isNumber())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left  ==  null  ||  right!=  null.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||  right!=  null.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	16	None	replace
175	[BUG]  [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left!=  null  ||  left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left!=  null  ||  left.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	16	None	replace
176	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EMPTY)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	7	None	replace
177	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  parent.getType()  ==  Token.EXPR_RESULT)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	7	None	replace
178	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||!right.isNumber()  &&  right.getType()  ==  Token.EMPTY)  {	  if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	7	None	replace
179	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isArray())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.isArray())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isArray())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
180	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(left))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.isAssignmentTo(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isAssignmentTo(left))  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
181	[BUG]  [BUGGY]  if(right.isNumber()  ||  right.isExtern())  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right.isNumber()  ||  right.isExtern())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right.isNumber()  ||  right.isExtern())  {	  if    (right.isNumber())    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	9	None	replace
182	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right))  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left,  right))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left,  right))  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	11	None	replace
183	[BUG]  [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isNumber()  &&  isAssignmentTarget(left)||  parent.getType()  ==  Token.RETURN)  {	  if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    	non-compiled	[CE]  package  com.google.javascript.jscomp.mozilla.rhino  does  not  exist	11	None	replace
184	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignedTarget(n))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  &&  isAssignedTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  &&  isAssignedTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
185	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  if  (!right.isNumber()  ||  isAssignmentTarget(n))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(n))    {    if  (!right.isNumber()  ||  isAssignmentTarget(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
186	[BUG]  [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  left.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  left.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    if  (!left.isNumber()  ||  left.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
187	[BUG]  [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!left.isNumber())  {  if  (!left.isNumber()  ||  right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!left.isNumber())    {    if  (!left.isNumber()  ||  right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
188	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty()  ||  right.getType()  ==  Token.VAR)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
189	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty()  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
190	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty()  ||  right.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
191	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty()  ||  right.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
192	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isEmpty())  {  if  (!right.isEmpty()  ||  right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isEmpty())    {    if  (!right.isEmpty()  ||  right.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
193	[BUG]  [BUGGY]  if(!right.isEmpty()  ||!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(!right.isEmpty()  ||!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||!right.isEmpty())  {	  if    (!right.isNumber()    &&!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
194	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignedTarget(left))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  if  (!right.isNumber()  &&  isAssignedTarget(left))  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    isAssignmentTarget(left))    {    if  (!right.isNumber()  &&  isAssignedTarget(left))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
195	[BUG]  [BUGGY]  if  (left  ==  null  ||  right!=  null  ||!right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (left  ==  null  ||  right!=  null  ||!right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (left  ==  null  ||  right!=  null  ||!right.isNumber())  {	  if    (right!=    null    ||!right.isNumber())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
196	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.isEmpty())  {	  if    (!right.isArray())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
197	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  right.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.getType()  ==  Token.NAME)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
198	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.getType()  ==  Token.FUNCTION)  {	  if    (!right.isArray())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
199	[BUG]  [BUGGY]  if  (!right.isArray()  ||  right.isObject())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isArray()  ||  right.isObject())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray()  ||  right.isObject())  {	  if    (!right.isArray())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
200	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  parent.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
201	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  current  =  left.getFirstChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
202	[BUG]  [BUGGY]  Node  current  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  Node  current  =  n.getFirstChild();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	Node  current  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
203	[BUG]  [BUGGY]  n  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  n  =  parent.getParent();  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	n  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
204	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  if  (!right.isNumber()  ||!left.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&!left.isEmpty())    {    if  (!right.isNumber()  ||!left.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
205	[BUG]  [BUGGY]  if  (right.isNumber())  {  Node  right  =  right.getFirstChild();  if  (right.isNumber())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  Node  right  =  right.getFirstChild();  if  (right.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    Node  right  =  right.getFirstChild();  if  (right.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
206	[BUG]  [BUGGY]  if  (right.isNumber())  {  if  (RIGHT.isNumber())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (right.isNumber())  {  if  (RIGHT.isNumber())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (right.isNumber())    {    if  (RIGHT.isNumber())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
207	[BUG]  [BUGGY]  if(right!=  null  &&!right.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(right!=  null  &&!right.isEmpty())  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(right!=  null  &&!right.isEmpty())  {	  if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
208	[BUG]  [BUGGY]  if(!right.isEmpty()  ||  left.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if(!right.isEmpty()  ||  left.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if(!right.isEmpty()  ||  left.getType()  ==  Token.RETURN)  {	  if    (!right.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
209	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }    [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  if  (!RIGHT.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if    (!right.isNumber()    &&    parent.getType()    ==    Token.FUNCTION)    {    if  (!RIGHT.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
