bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
2	[BUG]  [BUGGY]  if  (!right.isEmpty())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&!left.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
4	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&!left.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&!left.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
5	[BUG]  [BUGGY]  if  (!right.isArray())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isArray())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isArray())  {	if  (!right.isNumber())  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
7	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  parent.getType()  ==  Token.FUNCTION)  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
8	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (right.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (right.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
9	[BUG]  [BUGGY]  if  (right.isNumber())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (right.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
11	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(left))  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(left))  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  isAssignmentTarget(n))  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
13	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  isAssignmentTarget(n))  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  isAssignmentTarget(n))  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
14	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]    [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	  	if  (!right.isNumber())  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (right!=  null  ||!right.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
16	[BUG]  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (right!=  null  ||!right.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (right!=  null  ||!right.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
17	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!left.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!left.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
18	[BUG]  [BUGGY]  if  (!left.isNumber())  {  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!left.isNumber())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!left.isNumber())  {	if  (!right.isNumber())  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=void  0  Result:  x=[  	1	1	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
20	[BUG]  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&  left.getType()  ==  Token.FUNCTION)  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	if  (!right.isNumber()  &&!right.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
22	[BUG]  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldArrayAccess(Node  n,  Node  left,  Node  right)  {  Node  parent  =  n.getParent();    if  (isAssignmentTarget(n))  {  return  n;  }  [BUGGY]  if  (!right.isNumber()  &&!right.isEmpty())  {  [BUGGY]    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;  if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	if  (!right.isNumber()  &&!right.isEmpty())  {	if  (!right.isNumber())  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
