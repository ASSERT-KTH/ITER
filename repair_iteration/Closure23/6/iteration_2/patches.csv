bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  parent  =  left.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  left.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  left.getNext();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  Node  parent  =  right.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  right.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  right.getNext();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  	24	None	replace
3	[BUG]  [BUGGY]  Node  parent  =  current.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  current.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  current.getParent();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  	24	None	replace
4	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  n.getNext();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  	24	None	replace
5	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  n);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  n);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
6	[BUG]  [BUGGY]  Node  current  =  n.cloneTree(),  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.cloneTree(),  left);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.cloneTree(),  left);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
7	[BUG]  [BUGGY]  Node  current  =  right.cloneTree(),  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.cloneTree(),  left);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.cloneTree(),  left);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
8	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  parent);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  parent);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
9	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  right,  intIndex);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  right,  intIndex);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  right,  intIndex);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
10	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  right,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  right,  parent);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  right,  parent);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
11	[BUG]  [BUGGY]  Node  current  =  n.clone();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.clone();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.clone();	  Node    current    =    left.clone();    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Node  current  =  right.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.clone();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.clone();	  Node    current    =    left.clone();    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  Node  current  =  parent.clone();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  parent.clone();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  parent.clone();	  Node    current    =    left.clone();    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  Node  current  =  left.next();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.next();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.next();	  Node    current    =    left.clone();    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  Node  current  =  parent.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  parent.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  parent.getNext();	  Node    current    =    n.cloneTree();    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent().getIndex();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getParent().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  right.getParent().getIndex();	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
17	[BUG]  [BUGGY]  int  parentIndex  =  n.getNext().getIndex();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getNext().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getNext().getIndex();	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
18	[BUG]  [BUGGY]  int  parentIndex  =  n.getParent().getIndex()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getParent().getIndex()  +  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getParent().getIndex()  +  1;	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
19	[BUG]  [BUGGY]  int  parentIndex  =  left.getNext().getIndex();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getNext().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getNext().getIndex();	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
20	[BUG]  [BUGGY]  int  parentIndex  =  n.getLastChild().getIndex();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getLastChild().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getLastChild().getIndex();	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
21	[BUG]  [BUGGY]  Node  current  =  n.removeLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.removeLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.removeLastChild();	  Node    current    =    left.removeLastChild();    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  Node  current  =  right.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.removeLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.removeLastChild();	  Node    current    =    left.removeLastChild();    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  Node  current  =  n.getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.getParent();	  Node    current    =    left.getParent();    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  Node  current  =  right.getNext()  -  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.getNext()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.getNext()  -  1;	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  Node  current  =  n.getNext()  -  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.getNext()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.getNext()  -  1;	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  Node  current  =  left.getParent()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getParent()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getParent()  -  1;	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild().getNext()  -  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getFirstChild().getNext()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getFirstChild().getNext()  -  1;	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getFirstChild()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getFirstChild()  -  1;	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  Node  current  =  left.getFirstChild().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getFirstChild().getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getFirstChild().getNext();	  Node    current    =    left.getNext()    -    1;    	non-compiled	[CE]  	11	None	replace
30	[BUG]  [BUGGY]  Node  elem  =  right.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  right.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  right.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
31	[BUG]  [BUGGY]  Node  elem  =  left.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.getLastChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
32	[BUG]  [BUGGY]  Node  elem  =  left.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.getFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.getFirstChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
33	[BUG]  [BUGGY]  Node  elem  =  left.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.getParent();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
34	[BUG]  [BUGGY]  Node  elem  =  current.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  current.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  current.getNext();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
35	[BUG]  [BUGGY]  Node  elem  =  left.getNext()  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.getNext()  +  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.getNext()  +  1;	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
36	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  n.getLastChild();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  Node  current  =  parent.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  parent.removeFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  parent.removeFirstChild();	  Node    current    =    right.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  Node  current  =  n.cloneChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.cloneChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.cloneChild();	  Node    current    =    left.cloneChild();    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  Node  current  =  right.cloneChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.cloneChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.cloneChild();	  Node    current    =    left.cloneChild();    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  Node  current  =  parent.cloneChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  parent.cloneChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  parent.cloneChild();	  Node    current    =    left.cloneChild();    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  Node  current  =  left.removeChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.removeChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.removeChild();	  Node    current    =    left.cloneChild();    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  int  parentIndex  =  left.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getNext();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  int  parentIndex  =  left.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getLastChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getParent()  -  1;	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  int  parentIndex  =  right.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  right.getNext();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(n,  left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(n,  left);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(n,  left);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(parent,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(parent,  n);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(parent,  n);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
48	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(n,  right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(n,  right);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(n,  right);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
49	[BUG]  [BUGGY]  Node  current  =  n.replaceChild(left,  left);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.replaceChild(left,  left);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.replaceChild(left,  left);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
50	[BUG]  [BUGGY]  Node  current  =  n.replaceChild(left,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  n.replaceChild(left,  n);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  n.replaceChild(left,  n);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
51	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  n,  index);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  n,  index);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  n,  index);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
52	[BUG]  [BUGGY]  int  parentIndex  =  right.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  right.getLastChild();	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  int  parentIndex  =  current.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  current.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  current.getParent();	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  int  parentIndex  =  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getLastChild();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	25	None	replace
55	[BUG]  [BUGGY]  int  parentIndex  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getNext();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getNext();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	25	None	replace
56	[BUG]  [BUGGY]  Node  current  =  right.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.getParent();	  Node    current    =    right.getNext();    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  Node  current  =  right.getNext(),  intIndex);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.getNext(),  intIndex);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.getNext(),  intIndex);	  Node    current    =    right.getNext();    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  Node  parent  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  left.getLastChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  left.getLastChild();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  	21	None	replace
59	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent().getIndex()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getParent().getIndex()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getParent().getIndex()  -  1;	  int    parentIndex    =    left.getParent().getIndex();    	non-compiled	[CE]  	23	None	replace
60	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent().getIndex()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getParent().getIndex()  +  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getParent().getIndex()  +  1;	  int    parentIndex    =    left.getParent().getIndex();    	non-compiled	[CE]  	23	None	replace
61	[BUG]  [BUGGY]  int  parentIndex  =  left.getLastChild().getIndex();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getLastChild().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getLastChild().getIndex();	  int    parentIndex    =    left.getParent().getIndex();    	non-compiled	[CE]  	23	None	replace
62	[BUG]  [BUGGY]  Node  current  =  node.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  node.cloneTree();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  node.cloneTree();	  Node    current    =    parent.cloneTree();    	non-compiled	[CE]  	17	None	replace
63	[BUG]  [BUGGY]  int  parentIndex  =  left.getPrevious();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getPrevious();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getPrevious();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  int  parentIndex  =  left.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getFirstChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	10	None	replace
65	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  n  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  n  +  1);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  n  +  1);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
66	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  n)-  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  n)-  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  n)-  1;	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
67	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(right,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(right,  n);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(right,  n);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
68	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  index);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  index);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  index);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
69	[BUG]  [BUGGY]  Node  current  =  left.getfirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getfirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getfirstChild();	  Node    current    =    n.getLastChild();    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  Node  current  =  this.parent.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  this.parent.cloneTree();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  this.parent.cloneTree();	  Node    current    =    parent.cloneTree();    	non-compiled	[CE]  	17	None	replace
71	[BUG]  [BUGGY]  Node  current  =  left.getNext(),  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.getNext(),  right);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.getNext(),  right);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
72	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  index);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  index);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  index);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
73	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  this.parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  this.parent);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  this.parent);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
74	[BUG]  [BUGGY]  Node  elem  =  left.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.removeFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.removeFirstChild();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
75	[BUG]  [BUGGY]  Node  elem  =  left.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  elem  =  left.cloneTree();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  elem  =  left.cloneTree();	  Node    elem    =    left.getNext();    	non-compiled	[CE]  	22	None	replace
76	[BUG]  [BUGGY]  int  parentIndex  =  left.getPrevious().getIndex();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getPrevious().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getPrevious().getIndex();	  int    parentIndex    =    left.getParent().getIndex();    	non-compiled	[CE]  	23	None	replace
77	[BUG]  [BUGGY]  int  parentIndex  =  n.getParent().getIndex()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  n.getParent().getIndex()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  n.getParent().getIndex()  -  1;	  int    parentIndex    =    n.getParent().getIndex();    	non-compiled	[CE]  	26	None	replace
78	[BUG]  [BUGGY]  Node  parent  =  left.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  left.removeFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  left.removeFirstChild();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  	21	None	replace
79	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  right.removeFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  right.removeFirstChild());  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  right.removeFirstChild());	  Node    current    =    right.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
80	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(n,  new  Node(Token.EMPTY));	  Node    current    =    right.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  int  parentIndex  =  left.getFirstChild().getIndex();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  left.getFirstChild().getIndex();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  left.getFirstChild().getIndex();	  int    parentIndex    =    left.getParent().getIndex();    	non-compiled	[CE]  	23	None	replace
82	[BUG]  [BUGGY]  Node  parent  =  right.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  right.removeFirstChild();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  right.removeFirstChild();	  Node    parent    =    right.getParent();    	non-compiled	[CE]  	24	None	replace
83	[BUG]  [BUGGY]  Node  parent  =  left.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  left.cloneTree();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  left.cloneTree();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  	21	None	replace
84	[BUG]  [BUGGY]  Node  current  =  left.replaceChild(left,  right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.replaceChild(left,  right);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.replaceChild(left,  right);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  Node  current  =  right.replaceChild(left,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  right.replaceChild(left,  n);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  right.replaceChild(left,  n);	  Node    current    =    left.replaceChild(left,    n);    	non-compiled	[CE]  	19	None	replace
86	[BUG]  [BUGGY]  Node  current  =  left.cloneTree(),  right,  index);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneTree(),  right,  index);  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneTree(),  right,  index);	  Node    current    =    left.cloneTree(),    right);    	non-compiled	[CE]  	27	None	replace
87	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	int  parentIndex  =  right.getParent()  -  1;	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  n.getParentNode();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  parent  =  node.getParent();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  parent  =  node.getParent();	  Node    parent    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  Node  current  =  left.cloneNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (intIndex  !=  index)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }      [BUGGY]  Node  current  =  left.cloneNode();  [BUGGY]      Node  elem  =  null;  for  (int  i  =  0;  current  !=  null  &&  i  <  intIndex;  i++)  {  elem  =  current;  current  =  current.getNext();  }  if  (elem  ==  null)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	Node  current  =  left.cloneNode();	  Node    current    =    parent.cloneTree();    	non-compiled	[CE]  	17	None	replace
