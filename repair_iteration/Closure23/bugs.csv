bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (!right.isNumber()) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { Node parent = n.getParent();    if (isAssignmentTarget(n)) { return n; } [BUGGY] if (!right.isNumber()) { [BUGGY]   return n; } double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { Node parent = n.getParent();    if (isAssignmentTarget(n)) { return n; } [BUGGY] [BUGGY] if (!right.isNumber()) {   return n; } double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1431	1431	1	add	
3	[BUG] [BUGGY] double index = right.getDouble(); [FE] AssertionFailedError [CONTEXT] if (isAssignmentTarget(n)) { return n; } if (!right.isNumber()) {   return n; } [BUGGY] double index = right.getDouble(); [BUGGY] int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1437	1437	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (isAssignmentTarget(n)) { return n; } if (!right.isNumber()) {   return n; } [BUGGY] [BUGGY] double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1437	1437	1	add	
5	[BUG] [BUGGY] int intIndex = (int) index; [FE] AssertionFailedError [CONTEXT] return n; } if (!right.isNumber()) {   return n; } double index = right.getDouble(); [BUGGY] int intIndex = (int) index; [BUGGY] if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return n; } if (!right.isNumber()) {   return n; } double index = right.getDouble(); [BUGGY] [BUGGY] int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1438	1438	1	add	
7	[BUG] [BUGGY] if (intIndex != index) { [FE] AssertionFailedError [CONTEXT] } if (!right.isNumber()) {   return n; } double index = right.getDouble(); int intIndex = (int) index; [BUGGY] if (intIndex != index) { [BUGGY] error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (!right.isNumber()) {   return n; } double index = right.getDouble(); int intIndex = (int) index; [BUGGY] [BUGGY] if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	add	
9	[BUG] [BUGGY] if (intIndex < 0) { [FE] AssertionFailedError [CONTEXT] return n; } double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } [BUGGY] if (intIndex < 0) { [BUGGY] error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return n; } double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } [BUGGY] [BUGGY] if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1444	1444	1	add	
11	[BUG] [BUGGY] Node current = left.getFirstChild(); [FE] AssertionFailedError [CONTEXT] if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [BUGGY] Node current = left.getFirstChild(); [BUGGY] Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [BUGGY] [BUGGY] Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1449	1449	1	add	
13	[BUG] [BUGGY] Node elem = null; [FE] AssertionFailedError [CONTEXT] error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); [BUGGY] Node elem = null; [BUGGY] for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1450	1450	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); [BUGGY] [BUGGY] Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1450	1450	1	add	
15	[BUG] [BUGGY] for (int i = 0; current != null && i < intIndex; i++) { [FE] AssertionFailedError [CONTEXT] return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); Node elem = null; [BUGGY] for (int i = 0; current != null && i < intIndex; i++) { [BUGGY] elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1451	1451	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node current = left.getFirstChild(); Node elem = null; [BUGGY] [BUGGY] for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1451	1451	1	add	
17	[BUG] [BUGGY] if (elem == null) { [FE] AssertionFailedError [CONTEXT] } Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } [BUGGY] if (elem == null) { [BUGGY] error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } [BUGGY] [BUGGY] if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1457	1457	1	add	
19	[BUG] [BUGGY] error(INDEX_OUT_OF_BOUNDS_ERROR, right); [FE] AssertionFailedError [CONTEXT] Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { [BUGGY] error(INDEX_OUT_OF_BOUNDS_ERROR, right); [BUGGY] return n; } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { [BUGGY] [BUGGY] error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1458	1458	1	add	
21	[BUG] [BUGGY] return n; [FE] AssertionFailedError [CONTEXT] Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); [BUGGY] return n; [BUGGY] } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }  n.getParent().replaceChild(n, elem); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node current = left.getFirstChild(); Node elem = null; for (int i = 0; current != null && i < intIndex; i++) { elem = current; current = current.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); [BUGGY] [BUGGY] return n; } if (elem.isEmpty()) { elem = NodeUtil.newUndefinedNode(elem); } else { left.removeChild(elem); }  n.getParent().replaceChild(n, elem); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1459	1459	1	add	
23	[BUG] [BUGGY] return tryFoldArrayAccess(n, left, right); [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { [BUGGY] return tryFoldArrayAccess(n, left, right); [BUGGY] } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { [BUGGY] [BUGGY] return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	add	
25	[BUG] [BUGGY] Node parent = n.getParent(); [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { [BUGGY] Node parent = n.getParent(); [BUGGY]    if (isAssignmentTarget(n)) { return n; } if (!right.isNumber()) {   [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { [BUGGY] [BUGGY] Node parent = n.getParent();    if (isAssignmentTarget(n)) { return n; } if (!right.isNumber()) {   [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1423	1423	1	add	
27	[BUG] [BUGGY] if (isAssignmentTarget(n)) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { Node parent = n.getParent();    [BUGGY] if (isAssignmentTarget(n)) { [BUGGY] return n; } if (!right.isNumber()) {   return n; } double index = right.getDouble(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldArrayAccess(Node n, Node left, Node right) { Node parent = n.getParent();    [BUGGY] [BUGGY] if (isAssignmentTarget(n)) { return n; } if (!right.isNumber()) {   return n; } double index = right.getDouble(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldArrayAccess [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER index lv lval negNum numValue result rv rval val value int i intIndex Node current elem left n parent right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1427	1427	1	add	
29	[BUG] [BUGGY] if (left.isArrayLit()) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } [BUGGY] if (left.isArrayLit()) { [BUGGY] return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1363	1363	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } [BUGGY] [BUGGY] if (left.isArrayLit()) { return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5773502691896258	1363	1363	1	add	
31	[BUG] [BUGGY] return tryFoldGetElem(subtree, left, right); [FE] AssertionFailedError [CONTEXT] if (right == null) { return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: [BUGGY] return tryFoldGetElem(subtree, left, right); [BUGGY]  case Token.INSTANCEOF: return tryFoldInstanceof(subtree, left, right); case Token.AND: case Token.OR: return tryFoldAndOr(subtree, left, right); case Token.LSH: case Token.RSH: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean late DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left result right subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (right == null) { return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: [BUGGY] [BUGGY] return tryFoldGetElem(subtree, left, right); case Token.INSTANCEOF: return tryFoldInstanceof(subtree, left, right); case Token.AND: case Token.OR: return tryFoldAndOr(subtree, left, right); case Token.LSH: case Token.RSH: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean late DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left result right subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	118	118	1	add	
33	[BUG] [BUGGY] Preconditions.checkArgument(n.isGetElem()); [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { [BUGGY] Preconditions.checkArgument(n.isGetElem()); [BUGGY]  if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { [BUGGY] [BUGGY] Preconditions.checkArgument(n.isGetElem()); if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1357	1357	1	add	
35	[BUG] [BUGGY] if (left.isObjectLit()) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); [BUGGY] if (left.isObjectLit()) { [BUGGY] return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.isGetElem()); [BUGGY] [BUGGY] if (left.isObjectLit()) { return tryFoldObjectPropAccess(n, left, right); } if (left.isArrayLit()) { return tryFoldArrayAccess(n, left, right); } return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldGetElem [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node left n right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	add	
37	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { Node parent = n.getParent(); if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isInc() || parent.isDec()) {    return true; } [BUGGY] return false; [BUGGY] } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { Node parent = n.getParent(); if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isInc() || parent.isDec()) {    return true; } [BUGGY] [BUGGY] return false; } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4472135954999579	1419	1419	1	add	
39	[BUG] [BUGGY] Node parent = n.getParent(); [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { [BUGGY] Node parent = n.getParent(); [BUGGY] if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isInc() || parent.isDec()) {    return true; } return false; } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4082482904638631	1410	1410	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { [BUGGY] [BUGGY] Node parent = n.getParent(); if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isInc() || parent.isDec()) {    return true; } return false; } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4082482904638631	1410	1410	1	add	
41	[BUG] [BUGGY] if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isInc() || parent.isDec()) { [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { Node parent = n.getParent(); [BUGGY] if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)  || parent.isInc()    || parent.isDec()) { [BUGGY] || parent.isInc() || parent.isDec()) {    return true; } return false; } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4082482904638631	1411	1413	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean isAssignmentTarget(Node n) { Node parent = n.getParent(); [BUGGY] [BUGGY] if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)  || parent.isInc()    || parent.isDec()) { || parent.isInc() || parent.isDec()) {    return true; } return false; } [CLASS] PeepholeFoldConstants [METHOD] isAssignmentTarget [RETURN_TYPE] boolean  Node n [VARIABLES] boolean equivalent late leftLiteral lval nullRight result rightLiteral undefinedLeft undefinedRight valueNull valueUndefined DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lv lval negNum numValue result rv rval val value Node n parent  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.4082482904638631	1411	1413	1	add	
43	[BUG] [BUGGY] return subtree; [FE] AssertionFailedError [CONTEXT] case Token.GT: case Token.LE: case Token.GE: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return tryFoldComparison(subtree, left, right); default: [BUGGY] return subtree; [BUGGY] } } [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean late DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left result right subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.GT: case Token.LE: case Token.GE: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: return tryFoldComparison(subtree, left, right); default: [BUGGY] [BUGGY] return subtree; } } [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean late DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left result right subtree  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2581988897471611	177	177	1	add	
