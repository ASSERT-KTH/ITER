bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
2	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }	  if(chars!=    null)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
3	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
5	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    ==    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    ==    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
7	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    ==    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  if(sz  ==  chars.length  ||  chars  ==  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  chars.length  ||  chars  ==  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  chars.length  ||  chars  ==  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    ==    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
14	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  2)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  if(hasExp)  {  if(chars  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars  ==  null)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars  ==  null)  {  return  false;  }	  if(chars    ==    null)    {    if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
18	[BUG]  [BUGGY]  if(chars  ==  null  ||!allowSigns)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||!allowSigns)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||!allowSigns)  {  return  false;  }	  if(chars    ==    null)    {    if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
19	[BUG]  [BUGGY]  if(sz  ==  chars.length)  {  if(!allowSigns)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  chars.length)  {  if(!allowSigns)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  chars.length)  {  if(!allowSigns)  {  return  false;  }	  if(chars    ==    null)    {    if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
20	[BUG]  [BUGGY]  Boolean  allowSigns  =  true;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  Boolean  allowSigns  =  true;  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	Boolean  allowSigns  =  true;	  Boolean    allowSigns    =    false;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
22	[BUG]  [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
23	[BUG]  [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
24	[BUG]  [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz!=  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
25	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
26	[BUG]  [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(sz    ==    sz    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
27	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  sz;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray()  +  sz;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCharArray()  +  sz;	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  boolean  allowSigns  =  hasExp;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  boolean  allowSigns  =  hasExp;  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	boolean  allowSigns  =  hasExp;	  boolean    allowSigns    =    null;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
32	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
33	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
34	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
35	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
36	[BUG]  [BUGGY]  if(chars  ==  null  ||!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||!hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  if(chars!=  null  ||!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||!hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  if(sz  ==  sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(sz    <    chars.length)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
41	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
42	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  2)  {  if(!allowSigns)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
44	[BUG]  [BUGGY]  if(chars.length  ==  sz)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length  ==  sz)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length  ==  sz)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
45	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
46	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  1)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
47	[BUG]  [BUGGY]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  chars  =  str.toCharArray();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	chars  =  str.toCharArray();	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	String  chars  =  str.toCharArray()  +  1;	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
49	[BUG]  [BUGGY]  if(sz  ==  0  ||  chars.length  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  0  ||  chars.length  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  0  ||  chars.length  ==  0)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars.length    ==    0)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
52	[BUG]  [BUGGY]  if(chars!=  null)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null)  {  if(hasDecPoint)  {  return  false;  }	  if(chars!=    null)    {    if(hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
53	[BUG]  [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(sz    >=    chars.length)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
54	[BUG]  [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
55	[BUG]  [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz!=  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz!=  0)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
56	[BUG]  [BUGGY]  if(chars!=  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
57	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  boolean  permitsSigns  =  true;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  boolean  permitsSigns  =  true;  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	boolean  permitsSigns  =  true;	  boolean    allowsSigns    =    false;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
59	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
60	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1  ||  hasExp)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
61	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  1)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
62	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
67	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  <  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
68	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
69	[BUG]  [BUGGY]  if(hasExp  ||  hasDecPoint)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp  ||  hasDecPoint)  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp  ||  hasDecPoint)  {  return  true;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
70	[BUG]  [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars[sz]  ==  '.')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars[sz]  ==  '.')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp  ||  hasDecPoint  ||  chars[sz]  ==  '.')  {  return  false;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
71	[BUG]  [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars[sz]!=  '.')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars[sz]!=  '.')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp  ||  hasDecPoint  ||  chars[sz]!=  '.')  {  return  false;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
72	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(sz,  hasExp);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(sz,  hasExp);  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCharArray(sz,  hasExp);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
73	[BUG]  [BUGGY]  String  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  String  chars  =  str.toCharArray(sz);  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	String  chars  =  str.toCharArray(sz);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
74	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCharArray(0,  sz);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
75	[BUG]  [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
76	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
77	[BUG]  [BUGGY]  if(chars.length  ==  sz)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length  ==  sz)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length  ==  sz)  {  if(!hasDecPoint)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  if(chars.length  ==  sz)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length  ==  sz)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length  ==  sz)  {  if(!hasExp)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  String[]  chars  =  str.toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  String[]  chars  =  str.toString();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	String[]  chars  =  str.toString();	  String[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    ==    0)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
82	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
83	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
84	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
85	[BUG]  [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(sz    ==    chars.length)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  if(sz  ==  chars.length)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  ==  chars.length)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  ==  chars.length)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null)    {    if(hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
87	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
88	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
89	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
90	[BUG]  [BUGGY]  Char[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  Char[]  chars  =  str.toCharArray();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	Char[]  chars  =  str.toCharArray();	  char[]    chars    =    str.toCharArray()    +    2;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
91	[BUG]  [BUGGY]  char[]  chars  =  str.toCHARArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCHARArray();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCHARArray();	  char[]    chars    =    str.toCharArray()    +    2;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
92	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
93	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
94	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length!=  0)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
95	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;	  if(sz    ==    chars.length)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  <  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(sz    ==    chars.length)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  String  chars  =  str.toString();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  String  chars  =  str.toString();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	String  chars  =  str.toString();	  char[]    chars    =    str.toString();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  if(hasExp)  {  if(chars!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars!=  null)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars!=  null)  {  return  false;  }	  if(chars!=    null)    {    if(!hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  String[]  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  String[]  chars  =  str.toCharArray()  +  1;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	String[]  chars  =  str.toCharArray()  +  1;	  String[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  return  false;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
101	[BUG]  [BUGGY]  if(hasExp  &&  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp  &&  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp  &&  hasDecPoint)  {  return  false;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
102	[BUG]  [BUGGY]  boolean  allowSigns  =  isNumber(chars[0]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  boolean  allowSigns  =  isNumber(chars[0]);  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	boolean  allowSigns  =  isNumber(chars[0]);	  boolean    allowSigns    =    null;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
103	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
105	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
106	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
107	[BUG]  [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
108	[BUG]  [BUGGY]  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
109	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
110	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }	  if(chars    ==    null)    {    if(!hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >=  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars.length    ==    0)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
112	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
113	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  1)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  1)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  1)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
114	[BUG]  [BUGGY]  if(hasExp)  {  if(sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(sz  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(sz    ==    sz    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
116	[BUG]  [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
117	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
118	[BUG]  [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
119	[BUG]  [BUGGY]  if(chars!=  null)  {  if(!allowSigns)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null)  {  if(!allowSigns)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null)  {  if(!allowSigns)  {  return  false;  }	  if(chars    ==    null)    {    if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
120	[BUG]  [BUGGY]  if(chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length  ==  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
121	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
122	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  if(!hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
123	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  2)  {  if(!hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
124	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  1)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  1)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
125	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  1)  {  if(hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
126	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
127	[BUG]  [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!allowSigns)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
128	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
129	[BUG]  [BUGGY]  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
130	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
131	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
132	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  if(!hasDecPoint)  {  return  false;  }	  if(chars!=    null)    {    if(!hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  if(chars.length!=  sz)  {  if(!hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length!=  sz)  {  if(!hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length!=  sz)  {  if(!hasDecPoint)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
134	[BUG]  [BUGGY]  if(hasExp)  {  if(sz  +  1  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(sz  +  1  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(sz  +  1  <  chars.length)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(sz    ==    sz    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
135	[BUG]  [BUGGY]  if(chars!=  null)  {  if(hasDecPoint  ||  hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null)  {  if(hasDecPoint  ||  hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null)  {  if(hasDecPoint  ||  hasExp)  {  return  false;  }	  if(chars!=    null)    {    if(hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
136	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
137	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
138	[BUG]  [BUGGY]  if(!hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
139	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp)  {  if(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
140	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  2)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
141	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
142	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(start);  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCharArray(start);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
143	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start,  sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(start,  sz);  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	char[]  chars  =  str.toCharArray(start,  sz);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
144	[BUG]  [BUGGY]  if(chars  ==  null  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
146	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
147	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  if(!hasExp)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
148	[BUG]  [BUGGY]  if(chars.length!=  0)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length!=  0)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length!=  0)  {  if(!hasExp)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
149	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  if(!hasExp)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
150	[BUG]  [BUGGY]  CharSequence[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  CharSequence[]  chars  =  str.toCharArray();  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	CharSequence[]  chars  =  str.toCharArray();	  String[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
151	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
152	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length  <  2)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length  <  2)  {  if(!hasExp)  {  return  false;  }	  if(chars!=    null)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
153	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
154	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
155	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasExp)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasExp)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  if(!hasExp)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    if(!hasExp)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
156	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;	  if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
157	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  sz  >  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  sz  >  0)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  sz  >  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
158	[BUG]  [BUGGY]  if(sz  >  start  +  2)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >  start  +  2)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >  start  +  2)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars.length    ==    0)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
159	[BUG]  [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars.length  <  2)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasExp  ||  hasDecPoint  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasExp  ||  hasDecPoint  ||  chars.length  <  2)  {  return  false;  }	  if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
160	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(chars!=    null)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
161	[BUG]  [BUGGY]  if(hasDecPoint  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
162	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasDecPoint)return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasDecPoint)return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  if(hasDecPoint)return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
163	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  if(hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars!=  null  ||  chars.length!=  0)  {  if(hasDecPoint)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
164	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  true;	  if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
165	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
166	[BUG]  [BUGGY]  if(sz  >  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(sz  >  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(sz  >  chars.length)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(sz    >=    chars.length)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
167	[BUG]  [BUGGY]  if(chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars.length!=  0)  {  if(hasExp  ||  hasDecPoint)  {  return  false;  }	  if(sz    ==    chars.length)    {    if(hasExp    ||    hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >  start  +  1)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
169	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(!hasDecPoint)return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars  ==  null)  {  if(!hasDecPoint)return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars  ==  null)  {  if(!hasDecPoint)return  false;  }	  if(chars!=    null)    {    if(!hasDecPoint)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  boolean  allowSigns  =  chars.length  ==  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  boolean  allowSigns  =  chars.length  ==  0;  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	boolean  allowSigns  =  chars.length  ==  0;	  boolean    allowSigns    =    null;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  boolean  allowSigns  =  hasDecPoint;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  boolean  allowSigns  =  hasDecPoint;  [BUGGY]      boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	boolean  allowSigns  =  hasDecPoint;	  boolean    allowSigns    =    null;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  true;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
173	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(hasDecPoint)  {  if(sz  >=  start  +  1)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  true;  }	  if(hasExp)    {    if(sz    >    start    +    1)    {    if(chars[start]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
174	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
175	[BUG]  [BUGGY]  if(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;      [BUGGY]  if(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	if(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
