bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sz  =  chars.length  >  1?  chars[1]  :  chars.length;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  >  1?  chars[1]  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  >  1?  chars[1]  :  chars.length;	  int    sz    =    chars.length    >    1?    chars[0]    :    chars.length;    	non-compiled	[CE]  not  a  statement	16	None	replace
2	[BUG]  [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars[1];  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars[1];  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  >  1?  chars[0]  :  chars[1];	  int    sz    =    chars.length    >    1?    chars[0]    :    chars.length;    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars[i];  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars[i];  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  >  1?  chars[0]  :  chars[i];	  int    sz    =    chars.length    >    1?    chars[0]    :    chars.length;    	non-compiled	[CE]  not  a  statement	16	None	replace
4	[BUG]  [BUGGY]  int  chars  =  str.length()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  chars  =  str.length()  +  1;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  chars  =  str.length()  +  1;	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	9	None	replace
5	[BUG]  [BUGGY]  int  charsLength  =  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  charsLength  =  str.length();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  charsLength  =  str.length();	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	9	None	replace
6	[BUG]  [BUGGY]  chars  =  str.length();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.length();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.length();	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	9	None	replace
7	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(!chars.length  >  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null)  {  if(!chars.length  >  0)  {  return  false;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null)  {  if(!chars.length  >  0)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  int  sz  =  chars.length  /  2;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  /  2;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  /  2;	  int    sz    =    chars.length    -    2;    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  int  sz  =  chars.length  -  4;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  -  4;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  -  4;	  int    sz    =    chars.length    -    2;    	non-compiled	[CE]  not  a  statement	2	None	replace
12	[BUG]  [BUGGY]  int  sz  =  chars.length  -  3;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  -  3;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  -  3;	  int    sz    =    chars.length    -    1;    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  int  sz  =(chars  ==  null)?  1  :  chars.length;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =(chars  ==  null)?  1  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =(chars  ==  null)?  1  :  chars.length;	  int    sz    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  not  a  statement	11	None	replace
14	[BUG]  [BUGGY]  int  sz  =(chars!=  null)?  0  :  chars.length;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =(chars!=  null)?  0  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =(chars!=  null)?  0  :  chars.length;	  int    sz    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  not  a  statement	11	None	replace
15	[BUG]  [BUGGY]  chars  =(chars  ==  null)?  0  :  chars.length;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =(chars  ==  null)?  0  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =(chars  ==  null)?  0  :  chars.length;	  int    sz    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  not  a  statement	11	None	replace
16	[BUG]  [BUGGY]  int  sz  =  chars.length  +  2;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  +  2;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  +  2;	  int    sz    =    chars.length    +    1;    	non-compiled	[CE]  not  a  statement	3	None	replace
17	[BUG]  [BUGGY]  int  sz  =  chars.length  +  3;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  +  3;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  +  3;	  int    sz    =    chars.length    +    1;    	non-compiled	[CE]  not  a  statement	3	None	replace
18	[BUG]  [BUGGY]  chars  =  str.toCharArray()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.toCharArray()  +  1;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.toCharArray()  +  1;	      chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  chars  =  str.trim();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.trim();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.trim();	      chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	8	None	replace
20	[BUG]  [BUGGY]  chars  =  str.toCharArray(Character.class);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.toCharArray(Character.class);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.toCharArray(Character.class);	      chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	8	None	replace
21	[BUG]  [BUGGY]  chars  =  new  char[chars.length];  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  new  char[chars.length];  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  new  char[chars.length];	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
22	[BUG]  [BUGGY]  chars  =  new  char[Character.toLowerCase(chars)];  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  new  char[Character.toLowerCase(chars)];  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  new  char[Character.toLowerCase(chars)];	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
23	[BUG]  [BUGGY]  if(chars  ==  null)  {  chars  =  new  char[Character.toLowerCase(chars.length)];  }  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null)  {  chars  =  new  char[Character.toLowerCase(chars.length)];  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null)  {  chars  =  new  char[Character.toLowerCase(chars.length)];  }	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
24	[BUG]  [BUGGY]  if(chars  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null)  {  return  true;  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null)  {  return  true;  }	      if(chars    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
25	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }	      if(chars    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
26	[BUG]  [BUGGY]  int  start  =  chars.length  -  2;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  start  =  chars.length  -  2;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  start  =  chars.length  -  2;	      int    start    =    chars.length    -    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
27	[BUG]  [BUGGY]  int  start  =  chars.length  -  1  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  start  =  chars.length  -  1  +  1;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  start  =  chars.length  -  1  +  1;	      int    start    =    chars.length    -    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
28	[BUG]  [BUGGY]  int  start  =  chars.length  /  1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  start  =  chars.length  /  1;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  start  =  chars.length  /  1;	      int    start    =    chars.length    -    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
29	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  this.str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  this.str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
30	[BUG]  [BUGGY]  String  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  String  chars  =  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	String  chars  =  str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
31	[BUG]  [BUGGY]  char[]  chars  =  getChars(str).toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  getChars(str).toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  getChars(str).toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	String  chars[]  chars  =  str.toCharArray();	      chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	7	None	replace
33	[BUG]  [BUGGY]  int  start  =  chars.length  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  start  =  chars.length  +  1;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  start  =  chars.length  +  1;	      int    start    =    chars.length;    	non-compiled	[CE]  not  a  statement	12	None	replace
34	[BUG]  [BUGGY]  chars.length  =  0;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  0;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  0;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
35	[BUG]  [BUGGY]  chars.length  =  sz;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  sz;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  sz;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
36	[BUG]  [BUGGY]  chars.length  =  str.length;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  str.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  str.length;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
37	[BUG]  [BUGGY]  int  i  =  start  +  2;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  i  =  start  +  2;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  i  =  start  +  2;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	14	None	replace
38	[BUG]  [BUGGY]  int  i  =  start  +  3;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  i  =  start  +  3;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  i  =  start  +  3;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	14	None	replace
39	[BUG]  [BUGGY]  int  i  =  start  +  4;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  i  =  start  +  4;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  i  =  start  +  4;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	14	None	replace
40	[BUG]  [BUGGY]  int  sz  =(chars  ==  null)?  0  :  chars.length  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =(chars  ==  null)?  0  :  chars.length  +  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =(chars  ==  null)?  0  :  chars.length  +  1;	  int    sz    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  not  a  statement	11	None	replace
41	[BUG]  [BUGGY]  int  sz  =  chars.length  -  1  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  -  1  +  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  -  1  +  1;	  int    sz    =    chars.length    -    1;    	non-compiled	[CE]  not  a  statement	1	None	replace
42	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  this.chars.toCharArray();	      chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	7	None	replace
43	[BUG]  [BUGGY]  if(chars!=  null)  {  chars  =  new  char[chars.length];  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars!=  null)  {  chars  =  new  char[chars.length];  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars!=  null)  {  chars  =  new  char[chars.length];  }	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
44	[BUG]  [BUGGY]  char[]  chars  =  new  char[chars.length];  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  new  char[chars.length];  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  new  char[chars.length];	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
45	[BUG]  [BUGGY]  chars.length  =  i;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  i;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  i;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
46	[BUG]  [BUGGY]  if(chars!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars!=  null)  {  return  false;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars!=  null)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
47	[BUG]  [BUGGY]  if(chars  ==  null)  {  if(!chars.length()  >  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null)  {  if(!chars.length()  >  0)  {  return  false;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null)  {  if(!chars.length()  >  0)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
48	[BUG]  [BUGGY]  int  sz  =  chars.length  /  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  /  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  /  1;	  int    sz    =    chars.length    +    1;    	non-compiled	[CE]  not  a  statement	3	None	replace
49	[BUG]  [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars.length  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  >  1?  chars[0]  :  chars.length  +  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  >  1?  chars[0]  :  chars.length  +  1;	  int    sz    =    chars.length    >    1?    chars[0]    :    chars.length;    	non-compiled	[CE]  not  a  statement	16	None	replace
50	[BUG]  [BUGGY]  chars  =  str.toCharArray(new  char[]  {  '+',  '-'  }  );  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.toCharArray(new  char[]  {  '+',  '-'  }  );  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.toCharArray(new  char[]  {  '+',  '-'  }  );	      chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	8	None	replace
51	[BUG]  [BUGGY]  int  sz  =  chars.length  -  2  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =  chars.length  -  2  +  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =  chars.length  -  2  +  1;	  int    sz    =    chars.length    -    2;    	non-compiled	[CE]  not  a  statement	2	None	replace
52	[BUG]  [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  getChars(str.toCharArray());	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  chars  =  new  char[chars.length];  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  chars  =  new  char[chars.length];  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  chars  =  new  char[chars.length];  }	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
54	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  chars  =  new  char[chars.length];  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  chars  =  new  char[chars.length];  }  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  chars  =  new  char[chars.length];  }	      if(chars    ==    null)    {    chars    =    new    char[chars.length];    }    	non-compiled	[CE]  not  a  statement	10	None	replace
55	[BUG]  [BUGGY]  chars.length  =  2;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  2;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  2;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
56	[BUG]  [BUGGY]  chars.length  =  1;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars.length  =  1;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars.length  =  1;	  chars.length    =    chars.length;    	non-compiled	[CE]  not  a  statement	4	None	replace
57	[BUG]  [BUGGY]  chars  =  str.substring(start,  start);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  chars  =  str.substring(start,  start);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	chars  =  str.substring(start,  start);	      chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	8	None	replace
58	[BUG]  [BUGGY]  int  sz  =(chars  ==  null)?  -1  :  chars.length;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =(chars  ==  null)?  -1  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =(chars  ==  null)?  -1  :  chars.length;	  int    sz    =(chars    ==    null)?    0    :    chars.length;    	non-compiled	[CE]  not  a  statement	11	None	replace
59	[BUG]  [BUGGY]  char[]  chars  =(char[])str.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =(char[])str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =(char[])str.toCharArray();	      chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	7	None	replace
60	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  ]);	      chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	7	None	replace
61	[BUG]  [BUGGY]  int  sz  =(chars.length  >  1)?  chars[0]  :  chars.length;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  sz  =(chars.length  >  1)?  chars[0]  :  chars.length;  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  sz  =(chars.length  >  1)?  chars[0]  :  chars.length;	  int    sz    =    chars.length    >    1?    chars[0]    :    chars.length;    	non-compiled	[CE]  not  a  statement	16	None	replace
62	[BUG]  [BUGGY]  int  chars  =(char[])chars.clone();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  chars  =(char[])chars.clone();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  chars  =(char[])chars.clone();	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	9	None	replace
63	[BUG]  [BUGGY]  int  chars  =  chars.length;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  int  chars  =  chars.length;  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	int  chars  =  chars.length;	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	9	None	replace
64	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();    [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]    boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
