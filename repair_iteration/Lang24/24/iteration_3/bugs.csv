bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  2]!=  'x')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  2]!=  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  2]!=  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  2;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray()  +  2;	  Integer    chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  >=  'a'  &&  chars[start  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  >=  'a'  &&  chars[start  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  >=  'a'  &&  chars[start  +  2]  ==  'z')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]    <    =    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  sz  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  sz  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  sz  +  1);	  chars[start]    =    str.substring(start,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  chars[start]  =  str.substring(0,  start  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(0,  start  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(0,  start  +  1);	  chars[start]    =    str.substring(start,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
8	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  start  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  start  +  2);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  start  +  2);	  chars[start]    =    str.substring(start,    start    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  chars  =  str.charAt(sz  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(sz  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(sz  +  1);	  chars    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
10	[BUG]  [BUGGY]  chars  =  str.charAt(start  +  1,  sz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(start  +  1,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(start  +  1,  sz);	  chars    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]  chars  =  str.charAt(start  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(start  +  2);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(start  +  2);	  chars    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
12	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  i);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  i);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  1);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
14	[BUG]  [BUGGY]  int  chars  =  str.charAt(sz  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  int  chars  =  str.charAt(sz  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	int  chars  =  str.charAt(sz  +  1);	  int    chars    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
15	[BUG]  [BUGGY]  if  (sz  <  chars.length  &&  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  &&  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  &&  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {	  if    (chars[start    +    1]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
16	[BUG]  [BUGGY]  if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {	  if    (chars[start    +    1]    ==    '0'    &&    chars[start    +    1]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
17	[BUG]  [BUGGY]  char[]  chars  =  getStr().toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  getStr().toCharArray();  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  getStr().toCharArray();	  char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  str.toCharArray()  +  1;	  char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if  (sz  <  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  2]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  2]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  2]  ==  'x')  {	  if    (sz    <    chars.length    ||    chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
20	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
21	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
22	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
23	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray()  +  2;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray()  +  2;	  chars[start]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(sz  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(sz  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(sz  +  1);	  chars[start]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
28	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(0,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(0,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(0,  sz);	  chars[start]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
29	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(i);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(i);	  chars[start]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
30	[BUG]  [BUGGY]  chars  =  str.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(i  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(i  +  1);	  chars    =    str.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
31	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]    >=    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
32	[BUG]  [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '	  if    ((    chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')&&(chars[start    +    2]    ==    'a'    ||    chars[start    +    3]    ==    'f')&&(chars[start    +    3]    ==    '    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
33	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
34	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[0]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[0]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[]  chars  =  str.toCharArray(new  char[0]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
35	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[]  chars  =  str.toCharArray(new  char[start]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
36	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
37	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  this.str.toCharArray(sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  this.str.toCharArray(sz);	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(0);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(0);	  chars[start]    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
39	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(1);	  chars[start]    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
40	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  2,  sz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  2,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  2,  sz);	  chars[start]    =    str.substring(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  Char  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  Char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  Char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  char	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  ||  chars[i  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x'    ||    chars[start    +    1]    ==    'a'    ||    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
45	[BUG]  [BUGGY]  if  (chars[0]  ==  '0'  ||  chars[0]  ==  'x'  ||  chars[0]  ==  'a'  ||  chars[0]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[0]  ==  '0'  ||  chars[0]  ==  'x'  ||  chars[0]  ==  'a'  ||  chars[0]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[0]  ==  '0'  ||  chars[0]  ==  'x'  ||  chars[0]  ==  'a'  ||  chars[0]  ==  'f')  {	  if    (chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x'    ||    chars[start    +    1]    ==    'a'    ||    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  ||  chars[i  +  1]  ==  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  chars  =  str.charAt(start,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(start,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(start,  sz);	  chars    =    str.charAt(sz);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  chars[start]  =  str.substring(1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(1);	  chars[start]    =    str.trim();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
51	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  start  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  start  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  start  +  1);	  chars[start]    =    str.substring(start    +    2);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
52	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  sz  +  1);	  chars[start]    =    str.substring(start    +    1,    sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
53	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  hasExp);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  hasExp);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  sz,  hasExp);	  chars[start]    =    str.substring(start    +    1,    sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  start  +  1,  sz);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  start  +  1,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  start  +  1,  sz);	  chars[start]    =    str.substring(start    +    1,    sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
55	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  allowSigns);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  allowSigns);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  sz,  allowSigns);	  chars[start]    =    str.substring(start    +    1,    sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
56	[BUG]  [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  2]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  2]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  ((  chars[start]  ==  '0'  ||  chars[start  +  2]  ==  'x')&&(chars[start  +  3]  ==  'a'  ||  chars[start  +  3]  ==  'f')&&(chars[start  +  3]  ==  '	  if    ((    chars[start]    ==    '0'    ||    chars[start    +    2]    ==    'x')&&(chars[start    +    2]    ==    'a'    ||    chars[start    +    3]    ==    'f')&&(chars[start    +    3]    ==    '    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
57	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]!=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]!=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  &&  chars[i  +  1]!=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
58	[BUG]  [BUGGY]  if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'f')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
59	[BUG]  [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  3]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  3]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  3]  ==  'x')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    3]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
60	[BUG]  [BUGGY]  if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[0]  ==  '0'  &&  chars[0]!=  'x'  ||  chars[0]  ==  'a'  &&  chars[0]  ==  'z')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
61	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  chars  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[0]  <  'A'  ||  chars	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
62	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(sz,  start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray(sz,  start);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray(sz,  start);	  Integer    chars[]    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
63	[BUG]  [BUGGY]  if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  2]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  2]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  <  chars.length  ||  chars[start]  ==  '0'  &&  chars[start  +  2]  ==  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    2]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    >=    '    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
65	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >>  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >>  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >>  '	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    >=    '    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
66	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]!=  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]!=  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]!=  '	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    >=    '    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
67	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
68	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
69	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
70	[BUG]  [BUGGY]  chars[i]  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.toCharArray()  +  1;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.toCharArray()  +  1;	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
71	[BUG]  [BUGGY]  chars[i]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.toCharArray()  +  2;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.toCharArray()  +  2;	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
72	[BUG]  [BUGGY]  chars[i]  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.toCharArray(sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.toCharArray(sz);	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
73	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  0,  sz);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  0,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  0,  sz);	  chars[start]    =    str.substring(start,    0);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
74	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start,  2);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start,  2);	  chars[start]    =    str.substring(start,    0);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
75	[BUG]  [BUGGY]  chars[start]  =  str.substring(0,  sz);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(0,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(0,  sz);	  chars[start]    =    str.substring(start,    0);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
76	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
77	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
78	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(start,  sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray(start,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray(start,  sz);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
79	[BUG]  [BUGGY]  chars[start]  =  str.substring(0,  start  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(0,  start  +  2);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(0,  start  +  2);	  chars[start]    =    str.substring(0,    start);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
80	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
81	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
82	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  this.str.toCharArray()  +  1;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  this.str.toCharArray()  +  1;	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    >=    '    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  chars  =  str.charAt(1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(1);	  chars    =    str.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
85	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
86	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  str.toCharArray(new  char[start]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
87	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[1]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[1]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[]  chars  =  str.toCharArray(new  char[1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
88	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  str.toCharArray(start);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  str.toCharArray(start);	  char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
89	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
90	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
91	[BUG]  [BUGGY]  if  (chars[start]!=  '0'  &&  chars[start  +  1]!=  'x')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start]!=  '0'  &&  chars[start  +  1]!=  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start]!=  '0'  &&  chars[start  +  1]!=  'x')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    2]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[0]    >=    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
93	[BUG]  [BUGGY]  chars[0]  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[0]  =  str.toCharArray();  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[0]  =  str.toCharArray();	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
94	[BUG]  [BUGGY]  chars[i]  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.toCharArray(start);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.toCharArray(start);	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(start  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray(start  +  1);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray(start  +  1);	  Integer    chars[]    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
97	[BUG]  [BUGGY]  if  ((  chars[0]  ==  '0'  ||  chars[0]  ==  'x')&&(chars[0]  ==  'a'  ||  chars[0]  ==  'f')&&(chars[0]  ==  '  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  ((  chars[0]  ==  '0'  ||  chars[0]  ==  'x')&&(chars[0]  ==  'a'  ||  chars[0]  ==  'f')&&(chars[0]  ==  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  ((  chars[0]  ==  '0'  ||  chars[0]  ==  'x')&&(chars[0]  ==  'a'  ||  chars[0]  ==  'f')&&(chars[0]  ==  '	  if    ((    chars[start]    ==    '0'    ||    chars[start    +    2]    ==    'x')&&(chars[start    +    2]    ==    'a'    ||    chars[start    +    3]    ==    'f')&&(chars[start    +    3]    ==    '    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
98	[BUG]  [BUGGY]  if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
99	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  if  (chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x'    ||    chars[start    +    1]    ==    'a'    ||    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
101	[BUG]  [BUGGY]  if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x'  ||  chars[start  +  2]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x'    ||    chars[start    +    1]    ==    'a'    ||    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
102	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.toCharArray(start);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.toCharArray(start);	  chars[start]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
103	[BUG]  [BUGGY]  if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]!=  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  if  (sz  >  start  +  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  >  start  +  1)  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  >  start  +  1)  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    1]!=    'x')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  if  (sz  >=  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  >=  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  >=  chars.length  ||  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {	  if    (sz    <    chars.length    ||    chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
106	[BUG]  [BUGGY]  if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  >=  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
107	[BUG]  [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i]  ==  '0'  &&  chars[i  +  1]  >=  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
108	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
109	[BUG]  [BUGGY]  chars  =  str.charAt(start,  i);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.charAt(start,  i);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.charAt(start,  i);	  chars    =    str.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
110	[BUG]  [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  >>  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[0]    >=    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
111	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  start);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  start);	  chars[start]    =    str.substring(start    +    2);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
112	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
113	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  0);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  0);	  chars[start]    =    str.substring(start,    0);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
114	[BUG]  [BUGGY]  if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (sz  >=  chars.length  &&  chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {	  if    (sz    <    chars.length    &&    chars[start]    ==    '0'    &&    chars[start    +    2]    ==    'x')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||  char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
117	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
118	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(int);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray(int);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray(int);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
119	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Integer  chars[]  =  str.toCharArray(i);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Integer  chars[]  =  str.toCharArray(i);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
120	[BUG]  [BUGGY]  if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'z')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
121	[BUG]  [BUGGY]  if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[i  +  1]  ==  '0'  &&  chars[i  +  1]  <  =  'x'  ||  chars[i  +  1]  ==  'a'  &&  chars[i  +  2]  ==  'f')  {	  if    (chars[i]    ==    '0'    &&    chars[i    +    1]    ==    'x'    ||    chars[i    +    1]    ==    'a'    &&    chars[i    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
122	[BUG]  [BUGGY]  int  i  =  start  +  4;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  int  i  =  start  +  4;  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	int  i  =  start  +  4;	  int    i    =    start    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
124	[BUG]  [BUGGY]  Char[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  Char[]  chars  =  str.toCharArray();  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	Char[]  chars  =  str.toCharArray();	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
125	[BUG]  [BUGGY]  chars[i]  =  str.substring(start,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.substring(start,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.substring(start,  sz);	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
126	[BUG]  [BUGGY]  chars[i]  =  str.trim();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[i]  =  str.trim();  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[i]  =  str.trim();	  chars[i]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
127	[BUG]  [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  ==  'a'  &&  chars[start  +  2]!=  'z')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  ==  'a'  &&  chars[start  +  2]!=  'z')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start]  ==  '0'  &&  chars[start  +  1]  <  =  'x'  ||  chars[start  +  1]  ==  'a'  &&  chars[start  +  2]!=  'z')  {	  if    (chars[start]    ==    '0'    &&    chars[start    +    1]    <    =    'x'    ||    chars[start    +    1]    ==    'a'    &&    chars[start    +    2]    ==    'z')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
128	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
129	[BUG]  [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x'  ||  chars[start  +  1]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x'  ||  chars[start  +  1]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x'  ||  chars[start  +  1]  ==  'a'  ||  chars[start  +  2]  ==  'f')  {	  if    (chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x'    ||    chars[start    +    1]    ==    'a'    ||    chars[start    +    2]    ==    'f')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
130	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  str.toCharArray(new  char[sz]);	  char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
131	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	char[]  chars  =  this.chars.toCharArray();	  char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
132	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  hasDecPoint);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz,  hasDecPoint);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars[start]  =  str.substring(start  +  1,  sz,  hasDecPoint);	  chars[start]    =    str.substring(start    +    1,    sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
133	[BUG]  [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  1]  ==  'a'  ||  chars[start  +  1]  ==  'f')&&(chars[start  +  3]  ==  '  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  1]  ==  'a'  ||  chars[start  +  1]  ==  'f')&&(chars[start  +  3]  ==  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	if  ((  chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')&&(chars[start  +  1]  ==  'a'  ||  chars[start  +  1]  ==  'f')&&(chars[start  +  3]  ==  '	  if    ((    chars[start]    ==    '0'    ||    chars[start    +    2]    ==    'x')&&(chars[start    +    2]    ==    'a'    ||    chars[start    +    3]    ==    'f')&&(chars[start    +    3]    ==    '    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
134	[BUG]  [BUGGY]  chars  =  str.substring(start,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  chars  =  str.substring(start,  sz);  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	chars  =  str.substring(start,  sz);	  chars    =    str.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
135	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [BUGGY]      if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
