bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  sz  =  str.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Integer  sz  =  str.length();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Integer  sz  =  str.length();	  int    sz    =    str.length()    +    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(sz    ==    '0'    &&    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(sz    ==    '0'    &&    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  int  i  =  chars.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  i  =  chars.length  -  1;  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  i  =  chars.length  -  1;	  int    i    =    chars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  int  i  =  chars.length  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  i  =  chars.length  /  1;  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  i  =  chars.length  /  1;	  int    i    =    chars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
7	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
8	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
9	[BUG]  [BUGGY]  char[]  chars  =  getStr().toCharArray(sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  getStr().toCharArray(sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  getStr().toCharArray(sz);	  char[]    chars    =    getStr().toCharArray();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  chars[]  =  str!=  null?  null  :  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str!=  null?  null  :  str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str!=  null?  null  :  str.toCharArray();	  chars[]    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
11	[BUG]  [BUGGY]  chars[]  =  str  ==  null  ||  str.toCharArray().length  >  0?  null  :  str.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str  ==  null  ||  str.toCharArray().length  >  0?  null  :  str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str  ==  null  ||  str.toCharArray().length  >  0?  null  :  str.toCharArray();	  chars[]    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
12	[BUG]  [BUGGY]  chars[]  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
13	[BUG]  [BUGGY]  chars[]  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray(new  char[start]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray(new  char[start]);	  chars[]    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
14	[BUG]  [BUGGY]  chars[]  =  str.toCharArray(new  char[0]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray(new  char[0]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray(new  char[0]);	  chars[]    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
15	[BUG]  [BUGGY]  chars[]  =  str.toCharArray(new  char[1]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray(new  char[1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray(new  char[1]);	  chars[]    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
16	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
17	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
18	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
19	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
20	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  start  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  start  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  start  +  1);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
21	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  1);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
22	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  i);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  i);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
23	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  start  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  start  +  2);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  start  +  2);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
24	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
25	[BUG]  [BUGGY]  ((  chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
26	[BUG]  [BUGGY]  ((  chars[0]  >=  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  >=  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  >=  '0'  ||  chars[1]  ==  '9')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
27	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
28	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  >=  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  >=  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  >=  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
29	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  =  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  =  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  =  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
30	[BUG]  [BUGGY]  char  sz  =  str.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char  sz  =  str.length();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char  sz  =  str.length();	  int    sz    =    str.length()    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
32	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
33	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
34	[BUG]  [BUGGY]  int  chars  =  str.length()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.length()  +  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.length()  +  1;	  int    chars    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
35	[BUG]  [BUGGY]  int  chars  =  str.length()  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.length()  +  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.length()  +  2;	  int    chars    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
36	[BUG]  [BUGGY]  int  charsLength  =  str.length();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  charsLength  =  str.length();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  charsLength  =  str.length();	  int    chars    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
37	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    'x')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
38	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    'x')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
39	[BUG]  [BUGGY]  int  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.toCharArray(sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.toCharArray(sz);	  int    chars    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
40	[BUG]  [BUGGY]  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray(sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray(sz);	  int    chars    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
41	[BUG]  [BUGGY]  int  sz  =  string.length();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  string.length();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  string.length();	  int    sz    =    str.length()    -    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
43	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  chars  =  str.toCharArray(new  char[start]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
44	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[0]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[0]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  chars  =  str.toCharArray(new  char[0]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
45	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
46	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
47	[BUG]  [BUGGY]  ((  chars[0]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
48	[BUG]  [BUGGY]  chars[start]  =  str.charAt(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(i);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(i);	  chars[start]    =    str.charAt(start);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
49	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    >=    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
50	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    >=    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
51	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]!=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]!=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]!=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    >=    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
52	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
53	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
54	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
55	[BUG]  [BUGGY]  int  sz  =  chars.length()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  chars.length()  +  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  chars.length()  +  1;	  int    sz    =    chars.length();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
56	[BUG]  [BUGGY]  int  sz  =  chars.length()  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  chars.length()  -  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  chars.length()  -  1;	  int    sz    =    chars.length();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
57	[BUG]  [BUGGY]  int  sz  =  chars.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  chars.length  -  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  chars.length  -  1;	  int    sz    =    chars.length();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
58	[BUG]  [BUGGY]  int  chars  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.toCharArray()  +  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.toCharArray()  +  2;	  int    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
59	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
60	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
61	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
63	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
64	[BUG]  [BUGGY]  ((  chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
65	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
66	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  int  start  =(sz[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start    +    1]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
69	[BUG]  [BUGGY]  int  start  =(sz  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start    +    1]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
70	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
71	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
72	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  ==  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
73	[BUG]  [BUGGY]  chars[start]  =  str.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(i  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(i  +  1);	  chars[start]    =    str.charAt(sz    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  chars[start]  =  str.charAt(sz  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(sz  +  2);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(sz  +  2);	  chars[start]    =    str.charAt(sz    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
75	[BUG]  [BUGGY]  chars[start]  =  str.charAt(sz  +  1,  foundDigit);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(sz  +  1,  foundDigit);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(sz  +  1,  foundDigit);	  chars[start]    =    str.charAt(sz    +    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  int  start  =(sz  |  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  |  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  |  chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(sz    |    chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
77	[BUG]  [BUGGY]  int  start  =(sz  |  chars[start  +  1]  <  '0'  ||  chars[start  +  1]  >  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  |  chars[start  +  1]  <  '0'  ||  chars[start  +  1]  >  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  |  chars[start  +  1]  <  '0'  ||  chars[start  +  1]  >  'x')?  1  :  0;	  int    start    =(sz    |    chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
78	[BUG]  [BUGGY]  chars[]  chars  =  this.str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  chars  =  this.str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  chars  =  this.str.toCharArray();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
79	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  '  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    >=    '    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
82	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  >=  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    >=    '    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
83	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    >=    '    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
84	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
85	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  int  start  =(chars[0]  {  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  {  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  {  '0'  &&  chars[1]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
87	[BUG]  [BUGGY]  chars[start]  =  str.charAt(0,  sz);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(0,  sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(0,  sz);	  chars[start]    =    str.charAt(sz);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
88	[BUG]  [BUGGY]  String  chars  =  this.str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  String  chars  =  this.str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	String  chars  =  this.str.toCharArray();	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    '    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
90	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    '    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
91	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
92	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
93	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
94	[BUG]  [BUGGY]  int  start  =(chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  {  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
95	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
96	[BUG]  [BUGGY]  String  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  String  chars  =  this.chars.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	String  chars  =  this.chars.toCharArray();	  char[]    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
97	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(0,  sz);	  char[]    chars    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
98	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  start  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(0,  start  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(0,  start  +  1);	  char[]    chars    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
99	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  start  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(0,  start  +  2);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(0,  start  +  2);	  char[]    chars    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
100	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[start]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
101	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[0]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
102	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray()  +  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray()  +  2;	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
103	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
104	[BUG]  [BUGGY]  int  start  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
105	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start    +    1]    >=    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
106	[BUG]  [BUGGY]  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray()  +  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray()  +  1;	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
107	[BUG]  [BUGGY]  chars  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray()  +  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray()  +  2;	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  chars  =  str.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toString();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toString();	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
109	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  =  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  ==  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
113	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  >=  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
114	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  >=  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[3]    <    '    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
115	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[4]  <  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[4]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[4]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[3]    <    '    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
116	[BUG]  [BUGGY]  int  chars  =  this.chars.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  this.chars.length;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  this.chars.length;	  int    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
117	[BUG]  [BUGGY]  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  this.chars.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  this.chars.toCharArray();	  int    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
118	[BUG]  [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
119	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  &&  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
120	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
121	[BUG]  [BUGGY]  chars[]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray()  +  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray()  +  2;	  chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
122	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  >=  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  chars	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    'A'    ||    chars    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
123	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[start  +  1]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[start  +  1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  String[start  +  1]);	  char[]    chars    =    str.toCharArray(new    char[start    +    1]);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
124	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start  +  2]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start  +  2]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[start  +  2]);	  char[]    chars    =    str.toCharArray(new    char[start    +    1]);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
125	[BUG]  [BUGGY]  int  sz  =  chars.length  -  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  chars.length  -  2;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  chars.length  -  2;	  int    sz    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
126	[BUG]  [BUGGY]  int  sz  =  chars.length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  sz  =  chars.length  +  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  sz  =  chars.length  +  1;	  int    sz    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
127	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
128	[BUG]  [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  >>  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  >>  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  'A'  ||	  ((    chars[0]    >=    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
129	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
130	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;	  int    start    =(chars[1]    ==    '0'    ||    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
131	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
132	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
133	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
134	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
135	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
136	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
137	[BUG]  [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
138	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1):  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1):  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1):  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
139	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    '    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
140	[BUG]  [BUGGY]  Integer  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Integer  chars  =  this.chars.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Integer  chars  =  this.chars.toCharArray();	  int    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
141	[BUG]  [BUGGY]  int  start  =(sz  &  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  &  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  &  chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(sz    |    chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
142	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  1;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  2  :  1;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    'x')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
143	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  chars[]  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  chars  =  this.chars.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  chars  =  this.chars.toCharArray();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
145	[BUG]  [BUGGY]  char  i  =  sz  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char  i  =  sz  +  1;  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char  i  =  sz  +  1;	  int    i    =    sz    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
146	[BUG]  [BUGGY]  Integer  i  =  start  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Integer  i  =  start  +  1;  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Integer  i  =  start  +  1;	  int    i    =    sz    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
147	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
148	[BUG]  [BUGGY]  chars[]  =  str.toCharArray(start,  new  char[sz]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str.toCharArray(start,  new  char[sz]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str.toCharArray(start,  new  char[sz]);	  chars[]    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
149	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start  +  3]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start  +  3]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[start  +  3]);	  char[]    chars    =    str.toCharArray(new    char[start    +    1]);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  Char[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Char[]  chars  =  str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Char[]  chars  =  str.toCharArray();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
151	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
152	[BUG]  [BUGGY]  int  chars  =  str.toCharArray(start  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.toCharArray(start  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.toCharArray(start  +  1);	  int    chars    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
153	[BUG]  [BUGGY]  int  chars  =  str.toCharArray(start,  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.toCharArray(start,  sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.toCharArray(start,  sz);	  int    chars    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
154	[BUG]  [BUGGY]  int  chars  =  str.toCharArray(start,  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  chars  =  str.toCharArray(start,  start);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  chars  =  str.toCharArray(start,  start);	  int    chars    =    str.toCharArray(start);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
155	[BUG]  [BUGGY]  Int  sz  =  str.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Int  sz  =  str.length();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Int  sz  =  str.length();	  int    sz    =    str.length()    +    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
156	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
157	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
158	[BUG]  [BUGGY]  chars[start]  =  str.charAt(start  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(start  +  2);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(start  +  2);	  chars[start]    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
159	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start,  new  char[sz]);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(start,  new  char[sz]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(start,  new  char[sz]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
160	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(new  char[1]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
161	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  start);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  start);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
162	[BUG]  [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start  +  1,  sz);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start  +  1,  sz);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
163	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;	  int    start    =(chars[1]    ==    '0'    &&    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
164	[BUG]  [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
165	[BUG]  [BUGGY]  int  start  =(chars[0]  >=  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  >=  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  >=  '0'  &&  chars[1]  ==  'x')?  1  :  0;	  int    start    =(chars[start    +    1]    >=    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
166	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
167	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
168	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[1]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
169	[BUG]  [BUGGY]  chars  =  str.charAt(start);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.charAt(start);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.charAt(start);	  int    chars    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
170	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
171	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  >=  'A'  ||	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
172	[BUG]  [BUGGY]  chars  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray(start);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray(start);	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
173	[BUG]  [BUGGY]  chars  =  str.toCharArray()  +  start;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray()  +  start;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray()  +  start;	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
174	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >=  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
175	[BUG]  [BUGGY]  char[]  chars  =  getString().toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  getString().toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  getString().toCharArray();	  char[]    chars    =    getStr().toCharArray();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
176	[BUG]  [BUGGY]  char[]  chars  =  getString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  getString();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  getString();	  char[]    chars    =    getStr().toCharArray();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
177	[BUG]  [BUGGY]  ((  chars[1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
178	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  char[]  chars  =  str.toCharArray(0);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	char[]  chars  =  str.toCharArray(0);	  char[]    chars    =    str.toCharArray(0,    start);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
179	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'f')&&(chars[i]  <  '	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'f')&&(chars[i]    <    '    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
180	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  >=  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[0]  <  'a'  ||  chars[0]  >  'f')&&(chars[0]  >=  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
181	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[start  +  1]  >=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[start  +  1]  >=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  &&  chars[start  +  1]  >=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[start    +    1]    >=    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
182	[BUG]  [BUGGY]  chars[start]  =  str.substring(start,  sz  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.substring(start,  sz  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.substring(start,  sz  +  1);	  chars[start]    =    str.substring(start,    sz);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
183	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  2  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  2  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  2  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
184	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
185	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >>  '  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >>  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  >>  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    >=    '    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
186	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  '0'  ||  chars[1]  ==  'x')?  1  :  0;	  int    start    =(sz    ==    '0'    &&    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
187	[BUG]  [BUGGY]  chars  =  str.toCharArray(0,  start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars  =  str.toCharArray(0,  start);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars  =  str.toCharArray(0,  start);	  chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
188	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[3]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[3]    <    '    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
189	[BUG]  [BUGGY]  Integer  i  =  sz  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Integer  i  =  sz  +  1;  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Integer  i  =  sz  +  1;	  int    i    =    sz    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
190	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
191	[BUG]  [BUGGY]  chars[start]  =  str.charAt(sz  +  1,  start  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[start]  =  str.charAt(sz  +  1,  start  +  1);  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[start]  =  str.charAt(sz  +  1,  start  +  1);	  chars[start]    =    str.charAt(start    +    1);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
192	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
193	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[1]  ==  '0'  ||  chars[start  +  1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
195	[BUG]  [BUGGY]  ((  chars[0]!=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]!=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]!=  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0);	  ((    chars[0]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
196	[BUG]  [BUGGY]  int  start  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0;	  int    start    =(chars[start    +    1]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  >=  'a'  ||  chars[0]  >  'f')&&(chars[0]  <  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[0]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
198	[BUG]  [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0);  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  2  :  0);	  ((    chars[0]    ==    '0'    &&    chars[start    +    1]    ==    'x')?    1    :    0);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
199	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[1]  <  '	  ((    chars[0]    <    '0'    ||    chars[1]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[1]    <    '    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
200	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  >=  '  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  >=  '  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[0]  >  '9')&&(chars[0]  <  'a'  ||  chars[1]  >  'f')&&(chars[0]  >=  '	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[0]    <    'a'    ||    chars[1]    >    'f')&&(chars[0]    <    '    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
201	[BUG]  [BUGGY]  chars[]  =  str  ==  null  ||  chars.length  <  2?  null  :  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  chars[]  =  str  ==  null  ||  chars.length  <  2?  null  :  str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	chars[]  =  str  ==  null  ||  chars.length  <  2?  null  :  str.toCharArray();	  chars[]    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
202	[BUG]  [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char  [BUGGY]      if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[i]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'x')&&(chars[i]  <  'A'  ||  char	  ((    chars[i]    <    '0'    ||    chars[i]    >    '9')&&(chars[i]    <    'a'    ||    chars[i]    >    'x')&&(chars[i]    <    'A'    ||    char    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
203	[BUG]  [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  ((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	((  chars[0]  <  '0'  ||  chars[1]  >  '9')&&(chars[1]  <  'a'  ||  chars[1]  >  'f')&&(chars[2]  <  'A'  ||	  ((    chars[0]    <    '0'    ||    chars[0]    >    '9')&&(chars[1]    <    'a'    ||    chars[1]    >    'f')&&(chars[2]    <    'A'    ||    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  Chars[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  Chars[]  chars  =  str.toCharArray();  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	Chars[]  chars  =  str.toCharArray();	  chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
205	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {      [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;  [BUGGY]      int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  return  false;  }  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
