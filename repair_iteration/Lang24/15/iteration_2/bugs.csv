bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	18	None	replace
2	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	18	None	replace
3	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	18	None	replace
4	[BUG]  [BUGGY]  return(str  ==  null)&&(str.length()  ==  0);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)&&(str.length()  ==  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(str.length()  ==  0);	  return(str    ==    null)&&(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
5	[BUG]  [BUGGY]  return(str  ==  null)&&(str.length()  >=  0);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)&&(str.length()  >=  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(str.length()  >=  0);	  return(str    ==    null)&&(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
6	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length()!=  0);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)&&(chars.length()!=  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length()!=  0);	  return(str    ==    null)&&(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
7	[BUG]  [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
9	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.length()  >  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.length()  >  1;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.length()  >  1;	  return(str    ==    null)?    false    :    str.length()    >    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
10	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.length()  >  2;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.length()  >  2;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.length()  >  2;	  return(str    ==    null)?    false    :    str.length()    >    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
11	[BUG]  [BUGGY]  return(str  ==  null)||(str.length()  ==  1);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)||(str.length()  ==  1);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(str.length()  ==  1);	  return(str    ==    null)||(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
12	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  if(!allowSigns)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(!allowSigns)  {  return  true;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)  {  return  true;  }	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
15	[BUG]  [BUGGY]  if(!allowSigns)return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(!allowSigns)return  true;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)return  true;  }	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
16	[BUG]  [BUGGY]  ||!allowSigns)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  ||!allowSigns)  {  return  false;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	||!allowSigns)  {  return  false;  }	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
17	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
18	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
19	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
20	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
21	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  >=  0)  {  return  true;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
22	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
23	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  >=  0)  {  return  false;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
24	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
27	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
28	[BUG]  [BUGGY]  return(str  ==  null)||(str.length()  >=  0);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)||(str.length()  >=  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(str.length()  >=  0);	  return(str    ==    null)||(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	14	None	replace
29	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }	      if(str    ==    null    ||    str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
30	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str.length()  ==  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  ==  0)  {  return  false;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
31	[BUG]  [BUGGY]  if(chars.length()  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars.length()  ==  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length()  ==  0)  {  return  true;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
32	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
33	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  this.str.toCharArray();  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  this.str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
35	[BUG]  [BUGGY]  String  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  String  chars  =  str.toCharArray();  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars  =  str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
36	[BUG]  [BUGGY]  char[]  chars  =  str.getChars();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.getChars();  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getChars();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
37	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.length()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.length()  +  1;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.length()  +  1;	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
38	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.length();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  true  :  str.length();  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.length();	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
39	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }	      if(str    ==    null    ||    str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
40	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  <  =  0)  {  return  false;  }	      if(str    ==    null    ||    str.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
41	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray()  +  1;	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
42	[BUG]  [BUGGY]  char[]  chars  =  getChars(str);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  getChars(str);  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(str);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
43	[BUG]  [BUGGY]  char[]  chars  =  str.trim();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.trim();  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.trim();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
44	[BUG]  [BUGGY]  return(str  ==  null)||(chars.length()  ==  0);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)||(chars.length()  ==  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(chars.length()  ==  0);	  return(str    ==    null)||(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
45	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
46	[BUG]  [BUGGY]  if(str  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null)  {  return  false;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  return  false;  }	      	non-compiled	[CE]  not  a  statement	5	None	replace
47	[BUG]  [BUGGY]  return(str  ==  null)||(chars.length()!=  0);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)||(chars.length()!=  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(chars.length()!=  0);	  return(str    ==    null)||(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	14	None	replace
48	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
49	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
50	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  >  0;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  >  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray()  >  0;	  return(str    ==    null)?    false    :    str.length()    >    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
51	[BUG]  [BUGGY]  if(str.length()!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str.length()!=  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()!=  0)  {  return  true;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
52	[BUG]  [BUGGY]  if(str.length()!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str.length()!=  0)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()!=  0)  {  return  false;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
53	[BUG]  [BUGGY]  if(!allowSigns  ||  hasExp)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(!allowSigns  ||  hasExp)  {  return  false;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  hasExp)  {  return  false;  }	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
54	[BUG]  [BUGGY]  if(!allowSigns)return  true;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(!allowSigns)return  true;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)return  true;	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
55	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray();  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray();	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
56	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.charAt(0);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.charAt(0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.charAt(0);	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
57	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-');  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[0]  ==  '-');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
58	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
59	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
60	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars	  return    true;    	non-compiled	[CE]  not  a  statement	1	None	replace
61	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
62	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  ]);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
63	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[sz]);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	6	None	replace
64	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.length()  >  0;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  true  :  str.length()  >  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.length()  >  0;	  return(str    ==    null)?    false    :    str.length()    >    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
65	[BUG]  [BUGGY]  return(str  ==  null  ||  str.length()  ==  0);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null  ||  str.length()  ==  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  str.length()  ==  0);	  return(str    ==    null)||(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
66	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
67	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-');  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-');  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[start]  ==  '-');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	19	None	replace
68	[BUG]  [BUGGY]  if(!allowSigns  ||  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(!allowSigns  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  chars.length  <  2)  {  return  false;  }	  if(!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
69	[BUG]  [BUGGY]  if(chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars.length  ==  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length  ==  0)  {  return  true;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
70	[BUG]  [BUGGY]  if(str.length()  <  =  0)  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str.length()  <  =  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  <  =  0)  {  return  true;  }	      if(str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
71	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  ==  0)return  false;  }	      if(str    ==    null    ||    str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
72	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length!=  0);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)&&(chars.length!=  0);  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length!=  0);	  return(str    ==    null)&&(str.length()!=    0);    	non-compiled	[CE]  not  a  statement	15	None	replace
73	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }	      if(chars    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
74	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	18	None	replace
75	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toLowerCase();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.toLowerCase();  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toLowerCase();	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
76	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  return(str  ==  null)?  false  :  str.toString();  [BUGGY]    }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toString();	  return(str    ==    null)?    false    :    str.length();    	non-compiled	[CE]  not  a  statement	3	None	replace
77	[BUG]  [BUGGY]  if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
78	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	      char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
79	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {    [BUGGY]  if(str  ==  null  ||  str.length()  <  =  0)  {  return  true;  }  [BUGGY]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  <  =  0)  {  return  true;  }	      if(str    ==    null    ||    str.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
